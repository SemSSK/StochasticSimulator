<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="3809"><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="0.0000%" y="853" width="0.0263%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50"></text></g><g><title>_mi_arena_memid_is_suitable (1 samples, 0.03%)</title><rect x="0.0263%" y="853" width="0.0263%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2763%" y="863.50"></text></g><g><title>_mi_os_good_alloc_size (1 samples, 0.03%)</title><rect x="0.0525%" y="853" width="0.0263%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.3025%" y="863.50"></text></g><g><title>entity_centered::moved_molecule::MovedMolecule::process_collisions (21 samples, 0.55%)</title><rect x="0.0788%" y="853" width="0.5513%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="21"/><text x="0.3288%" y="863.50"></text></g><g><title>entity_centered::simulation::detect_collision (5 samples, 0.13%)</title><rect x="0.6301%" y="821" width="0.1313%" height="15" fill="rgb(208,68,35)" fg:x="24" fg:w="5"/><text x="0.8801%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;&gt; (5 samples, 0.13%)</title><rect x="0.6301%" y="805" width="0.1313%" height="15" fill="rgb(232,128,0)" fg:x="24" fg:w="5"/><text x="0.8801%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt;&gt; (5 samples, 0.13%)</title><rect x="0.6301%" y="789" width="0.1313%" height="15" fill="rgb(207,160,47)" fg:x="24" fg:w="5"/><text x="0.8801%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.13%)</title><rect x="0.6301%" y="773" width="0.1313%" height="15" fill="rgb(228,23,34)" fg:x="24" fg:w="5"/><text x="0.8801%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.13%)</title><rect x="0.6301%" y="757" width="0.1313%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="5"/><text x="0.8801%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (5 samples, 0.13%)</title><rect x="0.6301%" y="741" width="0.1313%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="5"/><text x="0.8801%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.13%)</title><rect x="0.6301%" y="725" width="0.1313%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="5"/><text x="0.8801%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (5 samples, 0.13%)</title><rect x="0.6301%" y="709" width="0.1313%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="5"/><text x="0.8801%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt; (5 samples, 0.13%)</title><rect x="0.6301%" y="693" width="0.1313%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="5"/><text x="0.8801%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (5 samples, 0.13%)</title><rect x="0.6301%" y="677" width="0.1313%" height="15" fill="rgb(206,188,39)" fg:x="24" fg:w="5"/><text x="0.8801%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (5 samples, 0.13%)</title><rect x="0.6301%" y="661" width="0.1313%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="5"/><text x="0.8801%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.13%)</title><rect x="0.6301%" y="645" width="0.1313%" height="15" fill="rgb(231,73,38)" fg:x="24" fg:w="5"/><text x="0.8801%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.13%)</title><rect x="0.6301%" y="629" width="0.1313%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="5"/><text x="0.8801%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.13%)</title><rect x="0.6301%" y="613" width="0.1313%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="5"/><text x="0.8801%" y="623.50"></text></g><g><title>__rust_dealloc (5 samples, 0.13%)</title><rect x="0.6301%" y="597" width="0.1313%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="5"/><text x="0.8801%" y="607.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (5 samples, 0.13%)</title><rect x="0.6301%" y="581" width="0.1313%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="5"/><text x="0.8801%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.16%)</title><rect x="0.7614%" y="789" width="0.1575%" height="15" fill="rgb(249,33,26)" fg:x="29" fg:w="6"/><text x="1.0114%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 0.16%)</title><rect x="0.7614%" y="773" width="0.1575%" height="15" fill="rgb(235,183,28)" fg:x="29" fg:w="6"/><text x="1.0114%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.16%)</title><rect x="0.7614%" y="757" width="0.1575%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="6"/><text x="1.0114%" y="767.50"></text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (6 samples, 0.16%)</title><rect x="0.7614%" y="741" width="0.1575%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="6"/><text x="1.0114%" y="751.50"></text></g><g><title>entity_centered::vector::Vector3d::get_random_unitary (6 samples, 0.16%)</title><rect x="0.7614%" y="725" width="0.1575%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="6"/><text x="1.0114%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.26%)</title><rect x="0.7614%" y="805" width="0.2625%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="10"/><text x="1.0114%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.11%)</title><rect x="0.9189%" y="789" width="0.1050%" height="15" fill="rgb(225,111,53)" fg:x="35" fg:w="4"/><text x="1.1689%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.11%)</title><rect x="0.9189%" y="773" width="0.1050%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="4"/><text x="1.1689%" y="783.50"></text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (4 samples, 0.11%)</title><rect x="0.9189%" y="757" width="0.1050%" height="15" fill="rgb(214,148,48)" fg:x="35" fg:w="4"/><text x="1.1689%" y="767.50"></text></g><g><title>entity_centered::vector::Vector3d::into_vectorint (4 samples, 0.11%)</title><rect x="0.9189%" y="741" width="0.1050%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="4"/><text x="1.1689%" y="751.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::floor (4 samples, 0.11%)</title><rect x="0.9189%" y="725" width="0.1050%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="4"/><text x="1.1689%" y="735.50"></text></g><g><title>entity_centered::simulation::run (23 samples, 0.60%)</title><rect x="0.6301%" y="853" width="0.6038%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="23"/><text x="0.8801%" y="863.50"></text></g><g><title>entity_centered::simulation::simulation (23 samples, 0.60%)</title><rect x="0.6301%" y="837" width="0.6038%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="23"/><text x="0.8801%" y="847.50"></text></g><g><title>entity_centered::simulation::group (18 samples, 0.47%)</title><rect x="0.7614%" y="821" width="0.4726%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="18"/><text x="1.0114%" y="831.50"></text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (8 samples, 0.21%)</title><rect x="1.0239%" y="805" width="0.2100%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="8"/><text x="1.2739%" y="815.50"></text></g><g><title>entity_centered::simulation::group::_{{closure}} (8 samples, 0.21%)</title><rect x="1.0239%" y="789" width="0.2100%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="8"/><text x="1.2739%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.21%)</title><rect x="1.0239%" y="773" width="0.2100%" height="15" fill="rgb(226,3,54)" fg:x="39" fg:w="8"/><text x="1.2739%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.21%)</title><rect x="1.0239%" y="757" width="0.2100%" height="15" fill="rgb(245,192,40)" fg:x="39" fg:w="8"/><text x="1.2739%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.21%)</title><rect x="1.0239%" y="741" width="0.2100%" height="15" fill="rgb(238,167,29)" fg:x="39" fg:w="8"/><text x="1.2739%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.21%)</title><rect x="1.0239%" y="725" width="0.2100%" height="15" fill="rgb(232,182,51)" fg:x="39" fg:w="8"/><text x="1.2739%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.21%)</title><rect x="1.0239%" y="709" width="0.2100%" height="15" fill="rgb(231,60,39)" fg:x="39" fg:w="8"/><text x="1.2739%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.21%)</title><rect x="1.0239%" y="693" width="0.2100%" height="15" fill="rgb(208,69,12)" fg:x="39" fg:w="8"/><text x="1.2739%" y="703.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.21%)</title><rect x="1.0239%" y="677" width="0.2100%" height="15" fill="rgb(235,93,37)" fg:x="39" fg:w="8"/><text x="1.2739%" y="687.50"></text></g><g><title>__rust_alloc (8 samples, 0.21%)</title><rect x="1.0239%" y="661" width="0.2100%" height="15" fill="rgb(213,116,39)" fg:x="39" fg:w="8"/><text x="1.2739%" y="671.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (8 samples, 0.21%)</title><rect x="1.0239%" y="645" width="0.2100%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="8"/><text x="1.2739%" y="655.50"></text></g><g><title>[[stack]] (48 samples, 1.26%)</title><rect x="0.0000%" y="869" width="1.2602%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="48"/><text x="0.2500%" y="879.50"></text></g><g><title>mi_option_get (1 samples, 0.03%)</title><rect x="1.2339%" y="853" width="0.0263%" height="15" fill="rgb(218,138,4)" fg:x="47" fg:w="1"/><text x="1.4839%" y="863.50"></text></g><g><title>console::unix_term::terminal_size (2 samples, 0.05%)</title><rect x="1.2602%" y="853" width="0.0525%" height="15" fill="rgb(250,191,14)" fg:x="48" fg:w="2"/><text x="1.5102%" y="863.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (28 samples, 0.74%)</title><rect x="1.3127%" y="853" width="0.7351%" height="15" fill="rgb(239,60,40)" fg:x="50" fg:w="28"/><text x="1.5627%" y="863.50"></text></g><g><title>fastrand::global_rng::f32 (19 samples, 0.50%)</title><rect x="2.0478%" y="853" width="0.4988%" height="15" fill="rgb(206,27,48)" fg:x="78" fg:w="19"/><text x="2.2978%" y="863.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::drawable (1 samples, 0.03%)</title><rect x="2.5466%" y="853" width="0.0263%" height="15" fill="rgb(225,35,8)" fg:x="97" fg:w="1"/><text x="2.7966%" y="863.50"></text></g><g><title>[anon] (51 samples, 1.34%)</title><rect x="1.2602%" y="869" width="1.3389%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="51"/><text x="1.5102%" y="879.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (1 samples, 0.03%)</title><rect x="2.5729%" y="853" width="0.0263%" height="15" fill="rgb(247,123,22)" fg:x="98" fg:w="1"/><text x="2.8229%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="2.5991%" y="853" width="0.0263%" height="15" fill="rgb(231,138,38)" fg:x="99" fg:w="1"/><text x="2.8491%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.32%)</title><rect x="2.6516%" y="725" width="0.3150%" height="15" fill="rgb(231,145,46)" fg:x="101" fg:w="12"/><text x="2.9016%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (12 samples, 0.32%)</title><rect x="2.6516%" y="709" width="0.3150%" height="15" fill="rgb(251,118,11)" fg:x="101" fg:w="12"/><text x="2.9016%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.32%)</title><rect x="2.6516%" y="693" width="0.3150%" height="15" fill="rgb(217,147,25)" fg:x="101" fg:w="12"/><text x="2.9016%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (12 samples, 0.32%)</title><rect x="2.6516%" y="677" width="0.3150%" height="15" fill="rgb(247,81,37)" fg:x="101" fg:w="12"/><text x="2.9016%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (12 samples, 0.32%)</title><rect x="2.6516%" y="661" width="0.3150%" height="15" fill="rgb(209,12,38)" fg:x="101" fg:w="12"/><text x="2.9016%" y="671.50"></text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}} (12 samples, 0.32%)</title><rect x="2.6516%" y="645" width="0.3150%" height="15" fill="rgb(227,1,9)" fg:x="101" fg:w="12"/><text x="2.9016%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (12 samples, 0.32%)</title><rect x="2.6516%" y="629" width="0.3150%" height="15" fill="rgb(248,47,43)" fg:x="101" fg:w="12"/><text x="2.9016%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.32%)</title><rect x="2.6516%" y="613" width="0.3150%" height="15" fill="rgb(221,10,30)" fg:x="101" fg:w="12"/><text x="2.9016%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.32%)</title><rect x="2.6516%" y="597" width="0.3150%" height="15" fill="rgb(210,229,1)" fg:x="101" fg:w="12"/><text x="2.9016%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.32%)</title><rect x="2.6516%" y="581" width="0.3150%" height="15" fill="rgb(222,148,37)" fg:x="101" fg:w="12"/><text x="2.9016%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.32%)</title><rect x="2.6516%" y="565" width="0.3150%" height="15" fill="rgb(234,67,33)" fg:x="101" fg:w="12"/><text x="2.9016%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.32%)</title><rect x="2.6516%" y="549" width="0.3150%" height="15" fill="rgb(247,98,35)" fg:x="101" fg:w="12"/><text x="2.9016%" y="559.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.32%)</title><rect x="2.6516%" y="533" width="0.3150%" height="15" fill="rgb(247,138,52)" fg:x="101" fg:w="12"/><text x="2.9016%" y="543.50"></text></g><g><title>__rust_alloc (12 samples, 0.32%)</title><rect x="2.6516%" y="517" width="0.3150%" height="15" fill="rgb(213,79,30)" fg:x="101" fg:w="12"/><text x="2.9016%" y="527.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.32%)</title><rect x="2.6516%" y="501" width="0.3150%" height="15" fill="rgb(246,177,23)" fg:x="101" fg:w="12"/><text x="2.9016%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="2.9667%" y="709" width="0.0263%" height="15" fill="rgb(230,62,27)" fg:x="113" fg:w="1"/><text x="3.2167%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="2.9667%" y="693" width="0.0263%" height="15" fill="rgb(216,154,8)" fg:x="113" fg:w="1"/><text x="3.2167%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (1 samples, 0.03%)</title><rect x="2.9667%" y="677" width="0.0263%" height="15" fill="rgb(244,35,45)" fg:x="113" fg:w="1"/><text x="3.2167%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="2.9667%" y="661" width="0.0263%" height="15" fill="rgb(251,115,12)" fg:x="113" fg:w="1"/><text x="3.2167%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.03%)</title><rect x="2.9667%" y="645" width="0.0263%" height="15" fill="rgb(240,54,50)" fg:x="113" fg:w="1"/><text x="3.2167%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.03%)</title><rect x="2.9667%" y="629" width="0.0263%" height="15" fill="rgb(233,84,52)" fg:x="113" fg:w="1"/><text x="3.2167%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (1 samples, 0.03%)</title><rect x="2.9667%" y="613" width="0.0263%" height="15" fill="rgb(207,117,47)" fg:x="113" fg:w="1"/><text x="3.2167%" y="623.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.03%)</title><rect x="2.9667%" y="597" width="0.0263%" height="15" fill="rgb(249,43,39)" fg:x="113" fg:w="1"/><text x="3.2167%" y="607.50"></text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}}::_{{closure}} (1 samples, 0.03%)</title><rect x="2.9667%" y="581" width="0.0263%" height="15" fill="rgb(209,38,44)" fg:x="113" fg:w="1"/><text x="3.2167%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.45%)</title><rect x="2.6516%" y="789" width="0.4463%" height="15" fill="rgb(236,212,23)" fg:x="101" fg:w="17"/><text x="2.9016%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (17 samples, 0.45%)</title><rect x="2.6516%" y="773" width="0.4463%" height="15" fill="rgb(242,79,21)" fg:x="101" fg:w="17"/><text x="2.9016%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.45%)</title><rect x="2.6516%" y="757" width="0.4463%" height="15" fill="rgb(211,96,35)" fg:x="101" fg:w="17"/><text x="2.9016%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.45%)</title><rect x="2.6516%" y="741" width="0.4463%" height="15" fill="rgb(253,215,40)" fg:x="101" fg:w="17"/><text x="2.9016%" y="751.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (5 samples, 0.13%)</title><rect x="2.9667%" y="725" width="0.1313%" height="15" fill="rgb(211,81,21)" fg:x="113" fg:w="5"/><text x="3.2167%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (4 samples, 0.11%)</title><rect x="2.9929%" y="709" width="0.1050%" height="15" fill="rgb(208,190,38)" fg:x="114" fg:w="4"/><text x="3.2429%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt; (4 samples, 0.11%)</title><rect x="2.9929%" y="693" width="0.1050%" height="15" fill="rgb(235,213,38)" fg:x="114" fg:w="4"/><text x="3.2429%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt; (4 samples, 0.11%)</title><rect x="2.9929%" y="677" width="0.1050%" height="15" fill="rgb(237,122,38)" fg:x="114" fg:w="4"/><text x="3.2429%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (4 samples, 0.11%)</title><rect x="2.9929%" y="661" width="0.1050%" height="15" fill="rgb(244,218,35)" fg:x="114" fg:w="4"/><text x="3.2429%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (4 samples, 0.11%)</title><rect x="2.9929%" y="645" width="0.1050%" height="15" fill="rgb(240,68,47)" fg:x="114" fg:w="4"/><text x="3.2429%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="2.9929%" y="629" width="0.1050%" height="15" fill="rgb(210,16,53)" fg:x="114" fg:w="4"/><text x="3.2429%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.11%)</title><rect x="2.9929%" y="613" width="0.1050%" height="15" fill="rgb(235,124,12)" fg:x="114" fg:w="4"/><text x="3.2429%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="2.9929%" y="597" width="0.1050%" height="15" fill="rgb(224,169,11)" fg:x="114" fg:w="4"/><text x="3.2429%" y="607.50"></text></g><g><title>__rust_dealloc (4 samples, 0.11%)</title><rect x="2.9929%" y="581" width="0.1050%" height="15" fill="rgb(250,166,2)" fg:x="114" fg:w="4"/><text x="3.2429%" y="591.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (4 samples, 0.11%)</title><rect x="2.9929%" y="565" width="0.1050%" height="15" fill="rgb(242,216,29)" fg:x="114" fg:w="4"/><text x="3.2429%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.55%)</title><rect x="2.6254%" y="853" width="0.5513%" height="15" fill="rgb(230,116,27)" fg:x="100" fg:w="21"/><text x="2.8754%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (20 samples, 0.53%)</title><rect x="2.6516%" y="837" width="0.5251%" height="15" fill="rgb(228,99,48)" fg:x="101" fg:w="20"/><text x="2.9016%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.53%)</title><rect x="2.6516%" y="821" width="0.5251%" height="15" fill="rgb(253,11,6)" fg:x="101" fg:w="20"/><text x="2.9016%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.53%)</title><rect x="2.6516%" y="805" width="0.5251%" height="15" fill="rgb(247,143,39)" fg:x="101" fg:w="20"/><text x="2.9016%" y="815.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (3 samples, 0.08%)</title><rect x="3.0979%" y="789" width="0.0788%" height="15" fill="rgb(236,97,10)" fg:x="118" fg:w="3"/><text x="3.3479%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (3 samples, 0.08%)</title><rect x="3.0979%" y="773" width="0.0788%" height="15" fill="rgb(233,208,19)" fg:x="118" fg:w="3"/><text x="3.3479%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt; (3 samples, 0.08%)</title><rect x="3.0979%" y="757" width="0.0788%" height="15" fill="rgb(216,164,2)" fg:x="118" fg:w="3"/><text x="3.3479%" y="767.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="3.0979%" y="741" width="0.0788%" height="15" fill="rgb(220,129,5)" fg:x="118" fg:w="3"/><text x="3.3479%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;entity_centered::molecule::Molecule,alloc::alloc::Global&gt;&gt; (3 samples, 0.08%)</title><rect x="3.0979%" y="725" width="0.0788%" height="15" fill="rgb(242,17,10)" fg:x="118" fg:w="3"/><text x="3.3479%" y="735.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="3.0979%" y="709" width="0.0788%" height="15" fill="rgb(242,107,0)" fg:x="118" fg:w="3"/><text x="3.3479%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::molecule::Molecule&gt;&gt; (3 samples, 0.08%)</title><rect x="3.0979%" y="693" width="0.0788%" height="15" fill="rgb(251,28,31)" fg:x="118" fg:w="3"/><text x="3.3479%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="3.0979%" y="677" width="0.0788%" height="15" fill="rgb(233,223,10)" fg:x="118" fg:w="3"/><text x="3.3479%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.08%)</title><rect x="3.0979%" y="661" width="0.0788%" height="15" fill="rgb(215,21,27)" fg:x="118" fg:w="3"/><text x="3.3479%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.08%)</title><rect x="3.0979%" y="645" width="0.0788%" height="15" fill="rgb(232,23,21)" fg:x="118" fg:w="3"/><text x="3.3479%" y="655.50"></text></g><g><title>__rust_dealloc (3 samples, 0.08%)</title><rect x="3.0979%" y="629" width="0.0788%" height="15" fill="rgb(244,5,23)" fg:x="118" fg:w="3"/><text x="3.3479%" y="639.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (3 samples, 0.08%)</title><rect x="3.0979%" y="613" width="0.0788%" height="15" fill="rgb(226,81,46)" fg:x="118" fg:w="3"/><text x="3.3479%" y="623.50"></text></g><g><title>entity_centered::moved_molecule::MovedMolecule::process_collisions (17 samples, 0.45%)</title><rect x="3.1767%" y="853" width="0.4463%" height="15" fill="rgb(247,70,30)" fg:x="121" fg:w="17"/><text x="3.4267%" y="863.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (1 samples, 0.03%)</title><rect x="3.6230%" y="853" width="0.0263%" height="15" fill="rgb(212,68,19)" fg:x="138" fg:w="1"/><text x="3.8730%" y="863.50"></text></g><g><title>fastrand::global_rng::f64 (9 samples, 0.24%)</title><rect x="3.6493%" y="853" width="0.2363%" height="15" fill="rgb(240,187,13)" fg:x="139" fg:w="9"/><text x="3.8993%" y="863.50"></text></g><g><title>[unknown] (50 samples, 1.31%)</title><rect x="2.5991%" y="869" width="1.3127%" height="15" fill="rgb(223,113,26)" fg:x="99" fg:w="50"/><text x="2.8491%" y="879.50"></text></g><g><title>indicatif::draw_target::RateLimiter::allow (1 samples, 0.03%)</title><rect x="3.8855%" y="853" width="0.0263%" height="15" fill="rgb(206,192,2)" fg:x="148" fg:w="1"/><text x="4.1355%" y="863.50"></text></g><g><title>__GI___ioctl (1 samples, 0.03%)</title><rect x="3.9118%" y="869" width="0.0263%" height="15" fill="rgb(241,108,4)" fg:x="149" fg:w="1"/><text x="4.1618%" y="879.50"></text></g><g><title>core::ptr::read (37 samples, 0.97%)</title><rect x="4.0693%" y="485" width="0.9714%" height="15" fill="rgb(247,173,49)" fg:x="155" fg:w="37"/><text x="4.3193%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (46 samples, 1.21%)</title><rect x="4.0693%" y="581" width="1.2077%" height="15" fill="rgb(224,114,35)" fg:x="155" fg:w="46"/><text x="4.3193%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (46 samples, 1.21%)</title><rect x="4.0693%" y="565" width="1.2077%" height="15" fill="rgb(245,159,27)" fg:x="155" fg:w="46"/><text x="4.3193%" y="575.50"></text></g><g><title>core::mem::swap (46 samples, 1.21%)</title><rect x="4.0693%" y="549" width="1.2077%" height="15" fill="rgb(245,172,44)" fg:x="155" fg:w="46"/><text x="4.3193%" y="559.50"></text></g><g><title>core::ptr::swap_nonoverlapping (46 samples, 1.21%)</title><rect x="4.0693%" y="533" width="1.2077%" height="15" fill="rgb(236,23,11)" fg:x="155" fg:w="46"/><text x="4.3193%" y="543.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (46 samples, 1.21%)</title><rect x="4.0693%" y="517" width="1.2077%" height="15" fill="rgb(205,117,38)" fg:x="155" fg:w="46"/><text x="4.3193%" y="527.50"></text></g><g><title>core::mem::swap_simple (46 samples, 1.21%)</title><rect x="4.0693%" y="501" width="1.2077%" height="15" fill="rgb(237,72,25)" fg:x="155" fg:w="46"/><text x="4.3193%" y="511.50"></text></g><g><title>core::ptr::write (9 samples, 0.24%)</title><rect x="5.0407%" y="485" width="0.2363%" height="15" fill="rgb(244,70,9)" fg:x="192" fg:w="9"/><text x="5.2907%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="5.8808%" y="469" width="0.0263%" height="15" fill="rgb(217,125,39)" fg:x="224" fg:w="1"/><text x="6.1308%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="5.8808%" y="453" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="224" fg:w="1"/><text x="6.1308%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.16%)</title><rect x="7.2197%" y="277" width="0.1575%" height="15" fill="rgb(251,123,47)" fg:x="275" fg:w="6"/><text x="7.4697%" y="287.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (3 samples, 0.08%)</title><rect x="7.2985%" y="261" width="0.0788%" height="15" fill="rgb(221,13,13)" fg:x="278" fg:w="3"/><text x="7.5485%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.32%)</title><rect x="7.1935%" y="293" width="0.3150%" height="15" fill="rgb(238,131,9)" fg:x="274" fg:w="12"/><text x="7.4435%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (5 samples, 0.13%)</title><rect x="7.3773%" y="277" width="0.1313%" height="15" fill="rgb(211,50,8)" fg:x="281" fg:w="5"/><text x="7.6273%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="7.5085%" y="293" width="0.0263%" height="15" fill="rgb(245,182,24)" fg:x="286" fg:w="1"/><text x="7.7585%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (6 samples, 0.16%)</title><rect x="7.5348%" y="293" width="0.1575%" height="15" fill="rgb(242,14,37)" fg:x="287" fg:w="6"/><text x="7.7848%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.16%)</title><rect x="7.5348%" y="277" width="0.1575%" height="15" fill="rgb(246,228,12)" fg:x="287" fg:w="6"/><text x="7.7848%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.11%)</title><rect x="7.5873%" y="261" width="0.1050%" height="15" fill="rgb(213,55,15)" fg:x="289" fg:w="4"/><text x="7.8373%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (4 samples, 0.11%)</title><rect x="7.6923%" y="293" width="0.1050%" height="15" fill="rgb(209,9,3)" fg:x="293" fg:w="4"/><text x="7.9423%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (4 samples, 0.11%)</title><rect x="7.6923%" y="277" width="0.1050%" height="15" fill="rgb(230,59,30)" fg:x="293" fg:w="4"/><text x="7.9423%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.87%)</title><rect x="6.9572%" y="357" width="0.8664%" height="15" fill="rgb(209,121,21)" fg:x="265" fg:w="33"/><text x="7.2072%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.87%)</title><rect x="6.9572%" y="341" width="0.8664%" height="15" fill="rgb(220,109,13)" fg:x="265" fg:w="33"/><text x="7.2072%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.87%)</title><rect x="6.9572%" y="325" width="0.8664%" height="15" fill="rgb(232,18,1)" fg:x="265" fg:w="33"/><text x="7.2072%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (26 samples, 0.68%)</title><rect x="7.1410%" y="309" width="0.6826%" height="15" fill="rgb(215,41,42)" fg:x="272" fg:w="26"/><text x="7.3910%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.03%)</title><rect x="7.7973%" y="293" width="0.0263%" height="15" fill="rgb(224,123,36)" fg:x="297" fg:w="1"/><text x="8.0473%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="7.7973%" y="277" width="0.0263%" height="15" fill="rgb(240,125,3)" fg:x="297" fg:w="1"/><text x="8.0473%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="7.7973%" y="261" width="0.0263%" height="15" fill="rgb(205,98,50)" fg:x="297" fg:w="1"/><text x="8.0473%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (30 samples, 0.79%)</title><rect x="8.0861%" y="309" width="0.7876%" height="15" fill="rgb(205,185,37)" fg:x="308" fg:w="30"/><text x="8.3361%" y="319.50"></text></g><g><title>_mi_heap_delayed_free_partial (1 samples, 0.03%)</title><rect x="9.4250%" y="149" width="0.0263%" height="15" fill="rgb(238,207,15)" fg:x="359" fg:w="1"/><text x="9.6750%" y="159.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.05%)</title><rect x="9.4250%" y="165" width="0.0525%" height="15" fill="rgb(213,199,42)" fg:x="359" fg:w="2"/><text x="9.6750%" y="175.50"></text></g><g><title>mi_find_page (1 samples, 0.03%)</title><rect x="9.4513%" y="149" width="0.0263%" height="15" fill="rgb(235,201,11)" fg:x="360" fg:w="1"/><text x="9.7013%" y="159.50"></text></g><g><title>mi_find_free_page (1 samples, 0.03%)</title><rect x="9.4513%" y="133" width="0.0263%" height="15" fill="rgb(207,46,11)" fg:x="360" fg:w="1"/><text x="9.7013%" y="143.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.03%)</title><rect x="9.4513%" y="117" width="0.0263%" height="15" fill="rgb(241,35,35)" fg:x="360" fg:w="1"/><text x="9.7013%" y="127.50"></text></g><g><title>mi_page_thread_free (1 samples, 0.03%)</title><rect x="9.4513%" y="101" width="0.0263%" height="15" fill="rgb(243,32,47)" fg:x="360" fg:w="1"/><text x="9.7013%" y="111.50"></text></g><g><title>_mi_is_power_of_two (3 samples, 0.08%)</title><rect x="9.6876%" y="149" width="0.0788%" height="15" fill="rgb(247,202,23)" fg:x="369" fg:w="3"/><text x="9.9376%" y="159.50"></text></g><g><title>_mi_heap_get_free_small_page (16 samples, 0.42%)</title><rect x="9.7663%" y="117" width="0.4201%" height="15" fill="rgb(219,102,11)" fg:x="372" fg:w="16"/><text x="10.0163%" y="127.50"></text></g><g><title>_mi_wsize_from_size (7 samples, 0.18%)</title><rect x="10.0026%" y="101" width="0.1838%" height="15" fill="rgb(243,110,44)" fg:x="381" fg:w="7"/><text x="10.2526%" y="111.50"></text></g><g><title>mi_heap_malloc_aligned (73 samples, 1.92%)</title><rect x="9.4776%" y="165" width="1.9165%" height="15" fill="rgb(222,74,54)" fg:x="361" fg:w="73"/><text x="9.7276%" y="175.50">m..</text></g><g><title>mi_heap_malloc_small (62 samples, 1.63%)</title><rect x="9.7663%" y="149" width="1.6277%" height="15" fill="rgb(216,99,12)" fg:x="372" fg:w="62"/><text x="10.0163%" y="159.50"></text></g><g><title>mi_heap_malloc_small_zero (62 samples, 1.63%)</title><rect x="9.7663%" y="133" width="1.6277%" height="15" fill="rgb(226,22,26)" fg:x="372" fg:w="62"/><text x="10.0163%" y="143.50"></text></g><g><title>_mi_page_malloc (46 samples, 1.21%)</title><rect x="10.1864%" y="117" width="1.2077%" height="15" fill="rgb(217,163,10)" fg:x="388" fg:w="46"/><text x="10.4364%" y="127.50"></text></g><g><title>mi_malloc_aligned (23 samples, 0.60%)</title><rect x="11.3941%" y="165" width="0.6038%" height="15" fill="rgb(213,25,53)" fg:x="434" fg:w="23"/><text x="11.6441%" y="175.50"></text></g><g><title>mi_prim_get_default_heap (7 samples, 0.18%)</title><rect x="11.8141%" y="149" width="0.1838%" height="15" fill="rgb(252,105,26)" fg:x="450" fg:w="7"/><text x="12.0641%" y="159.50"></text></g><g><title>__rust_alloc (104 samples, 2.73%)</title><rect x="9.2938%" y="197" width="2.7304%" height="15" fill="rgb(220,39,43)" fg:x="354" fg:w="104"/><text x="9.5438%" y="207.50">__..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 2.73%)</title><rect x="9.2938%" y="181" width="2.7304%" height="15" fill="rgb(229,68,48)" fg:x="354" fg:w="104"/><text x="9.5438%" y="191.50">&lt;m..</text></g><g><title>thread_count (1 samples, 0.03%)</title><rect x="11.9979%" y="165" width="0.0263%" height="15" fill="rgb(252,8,32)" fg:x="457" fg:w="1"/><text x="12.2479%" y="175.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.03%)</title><rect x="11.9979%" y="149" width="0.0263%" height="15" fill="rgb(223,20,43)" fg:x="457" fg:w="1"/><text x="12.2479%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 2.84%)</title><rect x="9.2938%" y="245" width="2.8354%" height="15" fill="rgb(229,81,49)" fg:x="354" fg:w="108"/><text x="9.5438%" y="255.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 2.84%)</title><rect x="9.2938%" y="229" width="2.8354%" height="15" fill="rgb(236,28,36)" fg:x="354" fg:w="108"/><text x="9.5438%" y="239.50">al..</text></g><g><title>alloc::alloc::alloc (108 samples, 2.84%)</title><rect x="9.2938%" y="213" width="2.8354%" height="15" fill="rgb(249,185,26)" fg:x="354" fg:w="108"/><text x="9.5438%" y="223.50">al..</text></g><g><title>core::ptr::read_volatile (4 samples, 0.11%)</title><rect x="12.0242%" y="197" width="0.1050%" height="15" fill="rgb(249,174,33)" fg:x="458" fg:w="4"/><text x="12.2742%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 5.25%)</title><rect x="6.9572%" y="373" width="5.2507%" height="15" fill="rgb(233,201,37)" fg:x="265" fg:w="200"/><text x="7.2072%" y="383.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (167 samples, 4.38%)</title><rect x="7.8236%" y="357" width="4.3844%" height="15" fill="rgb(221,78,26)" fg:x="298" fg:w="167"/><text x="8.0736%" y="367.50">core:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (164 samples, 4.31%)</title><rect x="7.9023%" y="341" width="4.3056%" height="15" fill="rgb(250,127,30)" fg:x="301" fg:w="164"/><text x="8.1523%" y="351.50">core:..</text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}} (163 samples, 4.28%)</title><rect x="7.9286%" y="325" width="4.2793%" height="15" fill="rgb(230,49,44)" fg:x="302" fg:w="163"/><text x="8.1786%" y="335.50">entit..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (127 samples, 3.33%)</title><rect x="8.8737%" y="309" width="3.3342%" height="15" fill="rgb(229,67,23)" fg:x="338" fg:w="127"/><text x="9.1237%" y="319.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (127 samples, 3.33%)</title><rect x="8.8737%" y="293" width="3.3342%" height="15" fill="rgb(249,83,47)" fg:x="338" fg:w="127"/><text x="9.1237%" y="303.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (127 samples, 3.33%)</title><rect x="8.8737%" y="277" width="3.3342%" height="15" fill="rgb(215,43,3)" fg:x="338" fg:w="127"/><text x="9.1237%" y="287.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (127 samples, 3.33%)</title><rect x="8.8737%" y="261" width="3.3342%" height="15" fill="rgb(238,154,13)" fg:x="338" fg:w="127"/><text x="9.1237%" y="271.50">all..</text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.08%)</title><rect x="12.1292%" y="245" width="0.0788%" height="15" fill="rgb(219,56,2)" fg:x="462" fg:w="3"/><text x="12.3792%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.08%)</title><rect x="12.1292%" y="229" width="0.0788%" height="15" fill="rgb(233,0,4)" fg:x="462" fg:w="3"/><text x="12.3792%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (211 samples, 5.54%)</title><rect x="6.8784%" y="405" width="5.5395%" height="15" fill="rgb(235,30,7)" fg:x="262" fg:w="211"/><text x="7.1284%" y="415.50">&lt;core::..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (211 samples, 5.54%)</title><rect x="6.8784%" y="389" width="5.5395%" height="15" fill="rgb(250,79,13)" fg:x="262" fg:w="211"/><text x="7.1284%" y="399.50">&lt;core::..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (8 samples, 0.21%)</title><rect x="12.2079%" y="373" width="0.2100%" height="15" fill="rgb(211,146,34)" fg:x="465" fg:w="8"/><text x="12.4579%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="14.7545%" y="245" width="0.0525%" height="15" fill="rgb(228,22,38)" fg:x="562" fg:w="2"/><text x="15.0045%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.05%)</title><rect x="14.7545%" y="229" width="0.0525%" height="15" fill="rgb(235,168,5)" fg:x="562" fg:w="2"/><text x="15.0045%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.05%)</title><rect x="14.7545%" y="213" width="0.0525%" height="15" fill="rgb(221,155,16)" fg:x="562" fg:w="2"/><text x="15.0045%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.11%)</title><rect x="14.8070%" y="245" width="0.1050%" height="15" fill="rgb(215,215,53)" fg:x="564" fg:w="4"/><text x="15.0570%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.11%)</title><rect x="14.8070%" y="229" width="0.1050%" height="15" fill="rgb(223,4,10)" fg:x="564" fg:w="4"/><text x="15.0570%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::skip (14 samples, 0.37%)</title><rect x="14.9121%" y="245" width="0.3676%" height="15" fill="rgb(234,103,6)" fg:x="568" fg:w="14"/><text x="15.1621%" y="255.50"></text></g><g><title>core::iter::adapters::skip::Skip&lt;I&gt;::new (14 samples, 0.37%)</title><rect x="14.9121%" y="229" width="0.3676%" height="15" fill="rgb(227,97,0)" fg:x="568" fg:w="14"/><text x="15.1621%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (6 samples, 0.16%)</title><rect x="15.2796%" y="245" width="0.1575%" height="15" fill="rgb(234,150,53)" fg:x="582" fg:w="6"/><text x="15.5296%" y="255.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (6 samples, 0.16%)</title><rect x="15.2796%" y="229" width="0.1575%" height="15" fill="rgb(228,201,54)" fg:x="582" fg:w="6"/><text x="15.5296%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (6 samples, 0.16%)</title><rect x="15.2796%" y="213" width="0.1575%" height="15" fill="rgb(222,22,37)" fg:x="582" fg:w="6"/><text x="15.5296%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (11 samples, 0.29%)</title><rect x="15.4371%" y="245" width="0.2888%" height="15" fill="rgb(237,53,32)" fg:x="588" fg:w="11"/><text x="15.6871%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (11 samples, 0.29%)</title><rect x="15.4371%" y="229" width="0.2888%" height="15" fill="rgb(233,25,53)" fg:x="588" fg:w="11"/><text x="15.6871%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (11 samples, 0.29%)</title><rect x="15.4371%" y="213" width="0.2888%" height="15" fill="rgb(210,40,34)" fg:x="588" fg:w="11"/><text x="15.6871%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.74%)</title><rect x="22.8144%" y="229" width="0.7351%" height="15" fill="rgb(241,220,44)" fg:x="869" fg:w="28"/><text x="23.0644%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (20 samples, 0.53%)</title><rect x="23.0244%" y="213" width="0.5251%" height="15" fill="rgb(235,28,35)" fg:x="877" fg:w="20"/><text x="23.2744%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::nth (15 samples, 0.39%)</title><rect x="23.1557%" y="197" width="0.3938%" height="15" fill="rgb(210,56,17)" fg:x="882" fg:w="15"/><text x="23.4057%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (15 samples, 0.39%)</title><rect x="23.1557%" y="181" width="0.3938%" height="15" fill="rgb(224,130,29)" fg:x="882" fg:w="15"/><text x="23.4057%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (15 samples, 0.39%)</title><rect x="23.1557%" y="165" width="0.3938%" height="15" fill="rgb(235,212,8)" fg:x="882" fg:w="15"/><text x="23.4057%" y="175.50"></text></g><g><title>entity_centered::collided_molecule::CollidedMolecules::get_elements (4 samples, 0.11%)</title><rect x="23.9695%" y="213" width="0.1050%" height="15" fill="rgb(223,33,50)" fg:x="913" fg:w="4"/><text x="24.2195%" y="223.50"></text></g><g><title>_mi_deferred_free (2 samples, 0.05%)</title><rect x="26.8574%" y="85" width="0.0525%" height="15" fill="rgb(219,149,13)" fg:x="1023" fg:w="2"/><text x="27.1074%" y="95.50"></text></g><g><title>_mi_heap_delayed_free_partial (1 samples, 0.03%)</title><rect x="26.9100%" y="85" width="0.0263%" height="15" fill="rgb(250,156,29)" fg:x="1025" fg:w="1"/><text x="27.1600%" y="95.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.03%)</title><rect x="26.9362%" y="85" width="0.0263%" height="15" fill="rgb(216,193,19)" fg:x="1026" fg:w="1"/><text x="27.1862%" y="95.50"></text></g><g><title>_mi_malloc_generic (7 samples, 0.18%)</title><rect x="26.8574%" y="101" width="0.1838%" height="15" fill="rgb(216,135,14)" fg:x="1023" fg:w="7"/><text x="27.1074%" y="111.50"></text></g><g><title>mi_find_page (3 samples, 0.08%)</title><rect x="26.9625%" y="85" width="0.0788%" height="15" fill="rgb(241,47,5)" fg:x="1027" fg:w="3"/><text x="27.2125%" y="95.50"></text></g><g><title>mi_find_free_page (3 samples, 0.08%)</title><rect x="26.9625%" y="69" width="0.0788%" height="15" fill="rgb(233,42,35)" fg:x="1027" fg:w="3"/><text x="27.2125%" y="79.50"></text></g><g><title>mi_page_queue (2 samples, 0.05%)</title><rect x="26.9887%" y="53" width="0.0525%" height="15" fill="rgb(231,13,6)" fg:x="1028" fg:w="2"/><text x="27.2387%" y="63.50"></text></g><g><title>_mi_is_power_of_two (1 samples, 0.03%)</title><rect x="27.5925%" y="85" width="0.0263%" height="15" fill="rgb(207,181,40)" fg:x="1051" fg:w="1"/><text x="27.8425%" y="95.50"></text></g><g><title>_mi_heap_get_free_small_page (7 samples, 0.18%)</title><rect x="27.6188%" y="53" width="0.1838%" height="15" fill="rgb(254,173,49)" fg:x="1052" fg:w="7"/><text x="27.8688%" y="63.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.03%)</title><rect x="27.7763%" y="37" width="0.0263%" height="15" fill="rgb(221,1,38)" fg:x="1058" fg:w="1"/><text x="28.0263%" y="47.50"></text></g><g><title>mi_heap_malloc_aligned (99 samples, 2.60%)</title><rect x="27.0412%" y="101" width="2.5991%" height="15" fill="rgb(206,124,46)" fg:x="1030" fg:w="99"/><text x="27.2912%" y="111.50">mi..</text></g><g><title>mi_heap_malloc_small (77 samples, 2.02%)</title><rect x="27.6188%" y="85" width="2.0215%" height="15" fill="rgb(249,21,11)" fg:x="1052" fg:w="77"/><text x="27.8688%" y="95.50">m..</text></g><g><title>mi_heap_malloc_small_zero (77 samples, 2.02%)</title><rect x="27.6188%" y="69" width="2.0215%" height="15" fill="rgb(222,201,40)" fg:x="1052" fg:w="77"/><text x="27.8688%" y="79.50">m..</text></g><g><title>_mi_page_malloc (70 samples, 1.84%)</title><rect x="27.8026%" y="53" width="1.8378%" height="15" fill="rgb(235,61,29)" fg:x="1059" fg:w="70"/><text x="28.0526%" y="63.50">_..</text></g><g><title>_mi_page_malloc (1 samples, 0.03%)</title><rect x="29.6141%" y="37" width="0.0263%" height="15" fill="rgb(219,207,3)" fg:x="1128" fg:w="1"/><text x="29.8641%" y="47.50"></text></g><g><title>__rust_alloc (148 samples, 3.89%)</title><rect x="26.6474%" y="133" width="3.8855%" height="15" fill="rgb(222,56,46)" fg:x="1015" fg:w="148"/><text x="26.8974%" y="143.50">__ru..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (148 samples, 3.89%)</title><rect x="26.6474%" y="117" width="3.8855%" height="15" fill="rgb(239,76,54)" fg:x="1015" fg:w="148"/><text x="26.8974%" y="127.50">&lt;mim..</text></g><g><title>mi_malloc_aligned (34 samples, 0.89%)</title><rect x="29.6403%" y="101" width="0.8926%" height="15" fill="rgb(231,124,27)" fg:x="1129" fg:w="34"/><text x="29.8903%" y="111.50"></text></g><g><title>mi_prim_get_default_heap (16 samples, 0.42%)</title><rect x="30.1129%" y="85" width="0.4201%" height="15" fill="rgb(249,195,6)" fg:x="1147" fg:w="16"/><text x="30.3629%" y="95.50"></text></g><g><title>entity_centered::collided_molecule::CollidedMolecules::roll_back (247 samples, 6.48%)</title><rect x="24.0746%" y="213" width="6.4846%" height="15" fill="rgb(237,174,47)" fg:x="917" fg:w="247"/><text x="24.3246%" y="223.50">entity_c..</text></g><g><title>alloc::alloc::exchange_malloc (154 samples, 4.04%)</title><rect x="26.5161%" y="197" width="4.0431%" height="15" fill="rgb(206,201,31)" fg:x="1010" fg:w="154"/><text x="26.7661%" y="207.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 3.91%)</title><rect x="26.6474%" y="181" width="3.9118%" height="15" fill="rgb(231,57,52)" fg:x="1015" fg:w="149"/><text x="26.8974%" y="191.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (149 samples, 3.91%)</title><rect x="26.6474%" y="165" width="3.9118%" height="15" fill="rgb(248,177,22)" fg:x="1015" fg:w="149"/><text x="26.8974%" y="175.50">allo..</text></g><g><title>alloc::alloc::alloc (149 samples, 3.91%)</title><rect x="26.6474%" y="149" width="3.9118%" height="15" fill="rgb(215,211,37)" fg:x="1015" fg:w="149"/><text x="26.8974%" y="159.50">allo..</text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="30.5329%" y="133" width="0.0263%" height="15" fill="rgb(241,128,51)" fg:x="1163" fg:w="1"/><text x="30.7829%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.05%)</title><rect x="30.9530%" y="149" width="0.0525%" height="15" fill="rgb(227,165,31)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.05%)</title><rect x="30.9530%" y="133" width="0.0525%" height="15" fill="rgb(228,167,24)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="30.9530%" y="117" width="0.0525%" height="15" fill="rgb(228,143,12)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="127.50"></text></g><g><title>&lt;entity_centered::reaction_registry::CollidedElements as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="30.9530%" y="101" width="0.0525%" height="15" fill="rgb(249,149,8)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="111.50"></text></g><g><title>&lt;entity_centered::element::Element as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="30.9530%" y="85" width="0.0525%" height="15" fill="rgb(243,35,44)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.05%)</title><rect x="30.9530%" y="69" width="0.0525%" height="15" fill="rgb(246,89,9)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="79.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u64 (2 samples, 0.05%)</title><rect x="30.9530%" y="53" width="0.0525%" height="15" fill="rgb(233,213,13)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="63.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (2 samples, 0.05%)</title><rect x="30.9530%" y="37" width="0.0525%" height="15" fill="rgb(233,141,41)" fg:x="1179" fg:w="2"/><text x="31.2030%" y="47.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.39%)</title><rect x="31.3206%" y="101" width="0.3938%" height="15" fill="rgb(239,167,4)" fg:x="1193" fg:w="15"/><text x="31.5706%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.34%)</title><rect x="31.7144%" y="101" width="0.3413%" height="15" fill="rgb(209,217,16)" fg:x="1208" fg:w="13"/><text x="31.9644%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.34%)</title><rect x="31.7144%" y="85" width="0.3413%" height="15" fill="rgb(219,88,35)" fg:x="1208" fg:w="13"/><text x="31.9644%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.34%)</title><rect x="31.7144%" y="69" width="0.3413%" height="15" fill="rgb(220,193,23)" fg:x="1208" fg:w="13"/><text x="31.9644%" y="79.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13 samples, 0.34%)</title><rect x="32.0557%" y="101" width="0.3413%" height="15" fill="rgb(230,90,52)" fg:x="1221" fg:w="13"/><text x="32.3057%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.34%)</title><rect x="32.0557%" y="85" width="0.3413%" height="15" fill="rgb(252,106,19)" fg:x="1221" fg:w="13"/><text x="32.3057%" y="95.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::get (79 samples, 2.07%)</title><rect x="30.5592%" y="213" width="2.0740%" height="15" fill="rgb(206,74,20)" fg:x="1164" fg:w="79"/><text x="30.8092%" y="223.50">e..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (79 samples, 2.07%)</title><rect x="30.5592%" y="197" width="2.0740%" height="15" fill="rgb(230,138,44)" fg:x="1164" fg:w="79"/><text x="30.8092%" y="207.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (79 samples, 2.07%)</title><rect x="30.5592%" y="181" width="2.0740%" height="15" fill="rgb(235,182,43)" fg:x="1164" fg:w="79"/><text x="30.8092%" y="191.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (79 samples, 2.07%)</title><rect x="30.5592%" y="165" width="2.0740%" height="15" fill="rgb(242,16,51)" fg:x="1164" fg:w="79"/><text x="30.8092%" y="175.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (62 samples, 1.63%)</title><rect x="31.0055%" y="149" width="1.6277%" height="15" fill="rgb(248,9,4)" fg:x="1181" fg:w="62"/><text x="31.2555%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (62 samples, 1.63%)</title><rect x="31.0055%" y="133" width="1.6277%" height="15" fill="rgb(210,31,22)" fg:x="1181" fg:w="62"/><text x="31.2555%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (62 samples, 1.63%)</title><rect x="31.0055%" y="117" width="1.6277%" height="15" fill="rgb(239,54,39)" fg:x="1181" fg:w="62"/><text x="31.2555%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (9 samples, 0.24%)</title><rect x="32.3970%" y="101" width="0.2363%" height="15" fill="rgb(230,99,41)" fg:x="1234" fg:w="9"/><text x="32.6470%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.24%)</title><rect x="32.3970%" y="85" width="0.2363%" height="15" fill="rgb(253,106,12)" fg:x="1234" fg:w="9"/><text x="32.6470%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.24%)</title><rect x="32.3970%" y="69" width="0.2363%" height="15" fill="rgb(213,46,41)" fg:x="1234" fg:w="9"/><text x="32.6470%" y="79.50"></text></g><g><title>fastrand::global_rng::RNG::__getit (25 samples, 0.66%)</title><rect x="32.7383%" y="149" width="0.6563%" height="15" fill="rgb(215,133,35)" fg:x="1247" fg:w="25"/><text x="32.9883%" y="159.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (25 samples, 0.66%)</title><rect x="32.7383%" y="133" width="0.6563%" height="15" fill="rgb(213,28,5)" fg:x="1247" fg:w="25"/><text x="32.9883%" y="143.50"></text></g><g><title>std::sys::pal::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (20 samples, 0.53%)</title><rect x="32.8695%" y="117" width="0.5251%" height="15" fill="rgb(215,77,49)" fg:x="1252" fg:w="20"/><text x="33.1195%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (20 samples, 0.53%)</title><rect x="32.8695%" y="101" width="0.5251%" height="15" fill="rgb(248,100,22)" fg:x="1252" fg:w="20"/><text x="33.1195%" y="111.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits (3 samples, 0.08%)</title><rect x="34.0509%" y="101" width="0.0788%" height="15" fill="rgb(208,67,9)" fg:x="1297" fg:w="3"/><text x="34.3009%" y="111.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::from_bits::rt_u64_to_f64 (3 samples, 0.08%)</title><rect x="34.0509%" y="85" width="0.0788%" height="15" fill="rgb(219,133,21)" fg:x="1297" fg:w="3"/><text x="34.3009%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (814 samples, 21.37%)</title><rect x="13.4156%" y="309" width="21.3704%" height="15" fill="rgb(246,46,29)" fg:x="511" fg:w="814"/><text x="13.6656%" y="319.50">&lt;core::iter::adapters::enumerate::..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (800 samples, 21.00%)</title><rect x="13.7831%" y="293" width="21.0029%" height="15" fill="rgb(246,185,52)" fg:x="525" fg:w="800"/><text x="14.0331%" y="303.50">core::iter::traits::iterator::Ite..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (794 samples, 20.85%)</title><rect x="13.9407%" y="277" width="20.8454%" height="15" fill="rgb(252,136,11)" fg:x="531" fg:w="794"/><text x="14.1907%" y="287.50">core::ops::function::impls::&lt;impl..</text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}}::_{{closure}} (794 samples, 20.85%)</title><rect x="13.9407%" y="261" width="20.8454%" height="15" fill="rgb(219,138,53)" fg:x="531" fg:w="794"/><text x="14.1907%" y="271.50">entity_centered::simulation::dete..</text></g><g><title>entity_centered::moved_molecule::MovedMolecule::process_collisions (726 samples, 19.06%)</title><rect x="15.7259%" y="245" width="19.0601%" height="15" fill="rgb(211,51,23)" fg:x="599" fg:w="726"/><text x="15.9759%" y="255.50">entity_centered::moved_molecul..</text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (428 samples, 11.24%)</title><rect x="23.5495%" y="229" width="11.2365%" height="15" fill="rgb(247,221,28)" fg:x="897" fg:w="428"/><text x="23.7995%" y="239.50">entity_centered::..</text></g><g><title>fastrand::global_rng::f64 (82 samples, 2.15%)</title><rect x="32.6332%" y="213" width="2.1528%" height="15" fill="rgb(251,222,45)" fg:x="1243" fg:w="82"/><text x="32.8832%" y="223.50">f..</text></g><g><title>fastrand::global_rng::with_rng (82 samples, 2.15%)</title><rect x="32.6332%" y="197" width="2.1528%" height="15" fill="rgb(217,162,53)" fg:x="1243" fg:w="82"/><text x="32.8832%" y="207.50">f..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (82 samples, 2.15%)</title><rect x="32.6332%" y="181" width="2.1528%" height="15" fill="rgb(229,93,14)" fg:x="1243" fg:w="82"/><text x="32.8832%" y="191.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (82 samples, 2.15%)</title><rect x="32.6332%" y="165" width="2.1528%" height="15" fill="rgb(209,67,49)" fg:x="1243" fg:w="82"/><text x="32.8832%" y="175.50">s..</text></g><g><title>fastrand::global_rng::with_rng::_{{closure}} (53 samples, 1.39%)</title><rect x="33.3946%" y="149" width="1.3914%" height="15" fill="rgb(213,87,29)" fg:x="1272" fg:w="53"/><text x="33.6446%" y="159.50"></text></g><g><title>fastrand::global_rng::f64::_{{closure}} (53 samples, 1.39%)</title><rect x="33.3946%" y="133" width="1.3914%" height="15" fill="rgb(205,151,52)" fg:x="1272" fg:w="53"/><text x="33.6446%" y="143.50"></text></g><g><title>fastrand::Rng::f64 (53 samples, 1.39%)</title><rect x="33.3946%" y="117" width="1.3914%" height="15" fill="rgb(253,215,39)" fg:x="1272" fg:w="53"/><text x="33.6446%" y="127.50"></text></g><g><title>fastrand::Rng::u64 (25 samples, 0.66%)</title><rect x="34.1297%" y="101" width="0.6563%" height="15" fill="rgb(221,220,41)" fg:x="1300" fg:w="25"/><text x="34.3797%" y="111.50"></text></g><g><title>fastrand::Rng::gen_u64 (25 samples, 0.66%)</title><rect x="34.1297%" y="85" width="0.6563%" height="15" fill="rgb(218,133,21)" fg:x="1300" fg:w="25"/><text x="34.3797%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.18%)</title><rect x="34.6023%" y="69" width="0.1838%" height="15" fill="rgb(221,193,43)" fg:x="1318" fg:w="7"/><text x="34.8523%" y="79.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.16%)</title><rect x="34.7860%" y="293" width="0.1575%" height="15" fill="rgb(240,128,52)" fg:x="1325" fg:w="6"/><text x="35.0360%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (830 samples, 21.79%)</title><rect x="13.4156%" y="389" width="21.7905%" height="15" fill="rgb(253,114,12)" fg:x="511" fg:w="830"/><text x="13.6656%" y="399.50">core::ops::function::FnOnce::call_..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (830 samples, 21.79%)</title><rect x="13.4156%" y="373" width="21.7905%" height="15" fill="rgb(215,223,47)" fg:x="511" fg:w="830"/><text x="13.6656%" y="383.50">&lt;core::iter::adapters::filter_map:..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (830 samples, 21.79%)</title><rect x="13.4156%" y="357" width="21.7905%" height="15" fill="rgb(248,225,23)" fg:x="511" fg:w="830"/><text x="13.6656%" y="367.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (830 samples, 21.79%)</title><rect x="13.4156%" y="341" width="21.7905%" height="15" fill="rgb(250,108,0)" fg:x="511" fg:w="830"/><text x="13.6656%" y="351.50">&lt;core::iter::adapters::enumerate::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (830 samples, 21.79%)</title><rect x="13.4156%" y="325" width="21.7905%" height="15" fill="rgb(228,208,7)" fg:x="511" fg:w="830"/><text x="13.6656%" y="335.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.42%)</title><rect x="34.7860%" y="309" width="0.4201%" height="15" fill="rgb(244,45,10)" fg:x="1325" fg:w="16"/><text x="35.0360%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (10 samples, 0.26%)</title><rect x="34.9436%" y="293" width="0.2625%" height="15" fill="rgb(207,125,25)" fg:x="1331" fg:w="10"/><text x="35.1936%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (7 samples, 0.18%)</title><rect x="35.0223%" y="277" width="0.1838%" height="15" fill="rgb(210,195,18)" fg:x="1334" fg:w="7"/><text x="35.2723%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (6 samples, 0.16%)</title><rect x="35.2061%" y="389" width="0.1575%" height="15" fill="rgb(249,80,12)" fg:x="1341" fg:w="6"/><text x="35.4561%" y="399.50"></text></g><g><title>_mi_prim_thread_id (9 samples, 0.24%)</title><rect x="36.9913%" y="213" width="0.2363%" height="15" fill="rgb(221,65,9)" fg:x="1409" fg:w="9"/><text x="37.2413%" y="223.50"></text></g><g><title>mi_prim_tls_slot (9 samples, 0.24%)</title><rect x="36.9913%" y="197" width="0.2363%" height="15" fill="rgb(235,49,36)" fg:x="1409" fg:w="9"/><text x="37.2413%" y="207.50"></text></g><g><title>_mi_segment_page_of (17 samples, 0.45%)</title><rect x="37.2276%" y="213" width="0.4463%" height="15" fill="rgb(225,32,20)" fg:x="1418" fg:w="17"/><text x="37.4776%" y="223.50"></text></g><g><title>mi_slice_first (9 samples, 0.24%)</title><rect x="37.4376%" y="197" width="0.2363%" height="15" fill="rgb(215,141,46)" fg:x="1426" fg:w="9"/><text x="37.6876%" y="207.50"></text></g><g><title>mi_block_set_next (10 samples, 0.26%)</title><rect x="37.6739%" y="213" width="0.2625%" height="15" fill="rgb(250,160,47)" fg:x="1435" fg:w="10"/><text x="37.9239%" y="223.50"></text></g><g><title>mi_block_set_nextx (10 samples, 0.26%)</title><rect x="37.6739%" y="197" width="0.2625%" height="15" fill="rgb(216,222,40)" fg:x="1435" fg:w="10"/><text x="37.9239%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (96 samples, 2.52%)</title><rect x="35.5474%" y="293" width="2.5203%" height="15" fill="rgb(234,217,39)" fg:x="1354" fg:w="96"/><text x="35.7974%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (96 samples, 2.52%)</title><rect x="35.5474%" y="277" width="2.5203%" height="15" fill="rgb(207,178,40)" fg:x="1354" fg:w="96"/><text x="35.7974%" y="287.50">al..</text></g><g><title>__rust_dealloc (96 samples, 2.52%)</title><rect x="35.5474%" y="261" width="2.5203%" height="15" fill="rgb(221,136,13)" fg:x="1354" fg:w="96"/><text x="35.7974%" y="271.50">__..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (96 samples, 2.52%)</title><rect x="35.5474%" y="245" width="2.5203%" height="15" fill="rgb(249,199,10)" fg:x="1354" fg:w="96"/><text x="35.7974%" y="255.50">&lt;m..</text></g><g><title>mi_free (94 samples, 2.47%)</title><rect x="35.5999%" y="229" width="2.4678%" height="15" fill="rgb(249,222,13)" fg:x="1356" fg:w="94"/><text x="35.8499%" y="239.50">mi..</text></g><g><title>mi_checked_ptr_segment (5 samples, 0.13%)</title><rect x="37.9365%" y="213" width="0.1313%" height="15" fill="rgb(244,185,38)" fg:x="1445" fg:w="5"/><text x="38.1865%" y="223.50"></text></g><g><title>_mi_ptr_segment (5 samples, 0.13%)</title><rect x="37.9365%" y="197" width="0.1313%" height="15" fill="rgb(236,202,9)" fg:x="1445" fg:w="5"/><text x="38.1865%" y="207.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (982 samples, 25.78%)</title><rect x="12.4180%" y="405" width="25.7810%" height="15" fill="rgb(250,229,37)" fg:x="473" fg:w="982"/><text x="12.6680%" y="415.50">core::iter::adapters::flatten::and_then_o..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (108 samples, 2.84%)</title><rect x="35.3636%" y="389" width="2.8354%" height="15" fill="rgb(206,174,23)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt; (108 samples, 2.84%)</title><rect x="35.3636%" y="373" width="2.8354%" height="15" fill="rgb(211,33,43)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt; (108 samples, 2.84%)</title><rect x="35.3636%" y="357" width="2.8354%" height="15" fill="rgb(245,58,50)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="367.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (108 samples, 2.84%)</title><rect x="35.3636%" y="341" width="2.8354%" height="15" fill="rgb(244,68,36)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="351.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (108 samples, 2.84%)</title><rect x="35.3636%" y="325" width="2.8354%" height="15" fill="rgb(232,229,15)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="335.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 2.84%)</title><rect x="35.3636%" y="309" width="2.8354%" height="15" fill="rgb(254,30,23)" fg:x="1347" fg:w="108"/><text x="35.6136%" y="319.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.13%)</title><rect x="38.0677%" y="293" width="0.1313%" height="15" fill="rgb(235,160,14)" fg:x="1450" fg:w="5"/><text x="38.3177%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,238 samples, 32.50%)</title><rect x="5.9071%" y="437" width="32.5020%" height="15" fill="rgb(212,155,44)" fg:x="225" fg:w="1238"/><text x="6.1571%" y="447.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as cor..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,238 samples, 32.50%)</title><rect x="5.9071%" y="421" width="32.5020%" height="15" fill="rgb(226,2,50)" fg:x="225" fg:w="1238"/><text x="6.1571%" y="431.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (8 samples, 0.21%)</title><rect x="38.1990%" y="405" width="0.2100%" height="15" fill="rgb(234,177,6)" fg:x="1455" fg:w="8"/><text x="38.4490%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="38.4090%" y="437" width="0.0263%" height="15" fill="rgb(217,24,9)" fg:x="1463" fg:w="1"/><text x="38.6590%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,246 samples, 32.71%)</title><rect x="5.9071%" y="469" width="32.7120%" height="15" fill="rgb(220,13,46)" fg:x="225" fg:w="1246"/><text x="6.1571%" y="479.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::t..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1,246 samples, 32.71%)</title><rect x="5.9071%" y="453" width="32.7120%" height="15" fill="rgb(239,221,27)" fg:x="225" fg:w="1246"/><text x="6.1571%" y="463.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::a..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (7 samples, 0.18%)</title><rect x="38.4353%" y="437" width="0.1838%" height="15" fill="rgb(222,198,25)" fg:x="1464" fg:w="7"/><text x="38.6853%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="39.0916%" y="421" width="0.0525%" height="15" fill="rgb(211,99,13)" fg:x="1489" fg:w="2"/><text x="39.3416%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.03%)</title><rect x="39.1441%" y="421" width="0.0263%" height="15" fill="rgb(232,111,31)" fg:x="1491" fg:w="1"/><text x="39.3941%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (53 samples, 1.39%)</title><rect x="38.7766%" y="453" width="1.3914%" height="15" fill="rgb(245,82,37)" fg:x="1477" fg:w="53"/><text x="39.0266%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (53 samples, 1.39%)</title><rect x="38.7766%" y="437" width="1.3914%" height="15" fill="rgb(227,149,46)" fg:x="1477" fg:w="53"/><text x="39.0266%" y="447.50"></text></g><g><title>core::ptr::read (38 samples, 1.00%)</title><rect x="39.1704%" y="421" width="0.9976%" height="15" fill="rgb(218,36,50)" fg:x="1492" fg:w="38"/><text x="39.4204%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (9 samples, 0.24%)</title><rect x="40.1680%" y="453" width="0.2363%" height="15" fill="rgb(226,80,48)" fg:x="1530" fg:w="9"/><text x="40.4180%" y="463.50"></text></g><g><title>_mi_prim_thread_id (4 samples, 0.11%)</title><rect x="42.4258%" y="261" width="0.1050%" height="15" fill="rgb(238,224,15)" fg:x="1616" fg:w="4"/><text x="42.6758%" y="271.50"></text></g><g><title>mi_prim_tls_slot (4 samples, 0.11%)</title><rect x="42.4258%" y="245" width="0.1050%" height="15" fill="rgb(241,136,10)" fg:x="1616" fg:w="4"/><text x="42.6758%" y="255.50"></text></g><g><title>_mi_segment_page_of (14 samples, 0.37%)</title><rect x="42.5308%" y="261" width="0.3676%" height="15" fill="rgb(208,32,45)" fg:x="1620" fg:w="14"/><text x="42.7808%" y="271.50"></text></g><g><title>mi_slice_first (11 samples, 0.29%)</title><rect x="42.6096%" y="245" width="0.2888%" height="15" fill="rgb(207,135,9)" fg:x="1623" fg:w="11"/><text x="42.8596%" y="255.50"></text></g><g><title>mi_block_set_next (1 samples, 0.03%)</title><rect x="42.8984%" y="261" width="0.0263%" height="15" fill="rgb(206,86,44)" fg:x="1634" fg:w="1"/><text x="43.1484%" y="271.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.03%)</title><rect x="42.8984%" y="245" width="0.0263%" height="15" fill="rgb(245,177,15)" fg:x="1634" fg:w="1"/><text x="43.1484%" y="255.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (169 samples, 4.44%)</title><rect x="38.6191%" y="469" width="4.4369%" height="15" fill="rgb(206,64,50)" fg:x="1471" fg:w="169"/><text x="38.8691%" y="479.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (101 samples, 2.65%)</title><rect x="40.4043%" y="453" width="2.6516%" height="15" fill="rgb(234,36,40)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt; (101 samples, 2.65%)</title><rect x="40.4043%" y="437" width="2.6516%" height="15" fill="rgb(213,64,8)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="447.50">co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 2.65%)</title><rect x="40.4043%" y="421" width="2.6516%" height="15" fill="rgb(210,75,36)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="431.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;entity_centered::molecule::Molecule,alloc::alloc::Global&gt;&gt; (101 samples, 2.65%)</title><rect x="40.4043%" y="405" width="2.6516%" height="15" fill="rgb(229,88,21)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="415.50">co..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 2.65%)</title><rect x="40.4043%" y="389" width="2.6516%" height="15" fill="rgb(252,204,47)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="399.50">&lt;&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::molecule::Molecule&gt;&gt; (101 samples, 2.65%)</title><rect x="40.4043%" y="373" width="2.6516%" height="15" fill="rgb(208,77,27)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="383.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 2.65%)</title><rect x="40.4043%" y="357" width="2.6516%" height="15" fill="rgb(221,76,26)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (101 samples, 2.65%)</title><rect x="40.4043%" y="341" width="2.6516%" height="15" fill="rgb(225,139,18)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="351.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (101 samples, 2.65%)</title><rect x="40.4043%" y="325" width="2.6516%" height="15" fill="rgb(230,137,11)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="335.50">al..</text></g><g><title>__rust_dealloc (101 samples, 2.65%)</title><rect x="40.4043%" y="309" width="2.6516%" height="15" fill="rgb(212,28,1)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="319.50">__..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (101 samples, 2.65%)</title><rect x="40.4043%" y="293" width="2.6516%" height="15" fill="rgb(248,164,17)" fg:x="1539" fg:w="101"/><text x="40.6543%" y="303.50">&lt;m..</text></g><g><title>mi_free (92 samples, 2.42%)</title><rect x="40.6406%" y="277" width="2.4153%" height="15" fill="rgb(222,171,42)" fg:x="1548" fg:w="92"/><text x="40.8906%" y="287.50">mi..</text></g><g><title>mi_checked_ptr_segment (5 samples, 0.13%)</title><rect x="42.9247%" y="261" width="0.1313%" height="15" fill="rgb(243,84,45)" fg:x="1635" fg:w="5"/><text x="43.1747%" y="271.50"></text></g><g><title>_mi_ptr_segment (5 samples, 0.13%)</title><rect x="42.9247%" y="245" width="0.1313%" height="15" fill="rgb(252,49,23)" fg:x="1635" fg:w="5"/><text x="43.1747%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,448 samples, 38.02%)</title><rect x="5.2770%" y="501" width="38.0152%" height="15" fill="rgb(215,19,7)" fg:x="201" fg:w="1448"/><text x="5.5270%" y="511.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::trai..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,448 samples, 38.02%)</title><rect x="5.2770%" y="485" width="38.0152%" height="15" fill="rgb(238,81,41)" fg:x="201" fg:w="1448"/><text x="5.5270%" y="495.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::it..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (9 samples, 0.24%)</title><rect x="43.0559%" y="469" width="0.2363%" height="15" fill="rgb(210,199,37)" fg:x="1640" fg:w="9"/><text x="43.3059%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.13%)</title><rect x="43.2922%" y="501" width="0.1313%" height="15" fill="rgb(244,192,49)" fg:x="1649" fg:w="5"/><text x="43.5422%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.13%)</title><rect x="43.2922%" y="485" width="0.1313%" height="15" fill="rgb(226,211,11)" fg:x="1649" fg:w="5"/><text x="43.5422%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="43.4235%" y="501" width="0.0263%" height="15" fill="rgb(236,162,54)" fg:x="1654" fg:w="1"/><text x="43.6735%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,487 samples, 39.04%)</title><rect x="5.2770%" y="549" width="39.0391%" height="15" fill="rgb(220,229,9)" fg:x="201" fg:w="1487"/><text x="5.5270%" y="559.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,487 samples, 39.04%)</title><rect x="5.2770%" y="533" width="39.0391%" height="15" fill="rgb(250,87,22)" fg:x="201" fg:w="1487"/><text x="5.5270%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,487 samples, 39.04%)</title><rect x="5.2770%" y="517" width="39.0391%" height="15" fill="rgb(239,43,17)" fg:x="201" fg:w="1487"/><text x="5.5270%" y="527.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (33 samples, 0.87%)</title><rect x="43.4497%" y="501" width="0.8664%" height="15" fill="rgb(231,177,25)" fg:x="1655" fg:w="33"/><text x="43.6997%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="44.5524%" y="437" width="0.0525%" height="15" fill="rgb(219,179,1)" fg:x="1697" fg:w="2"/><text x="44.8024%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="44.5524%" y="421" width="0.0525%" height="15" fill="rgb(238,219,53)" fg:x="1697" fg:w="2"/><text x="44.8024%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.03%)</title><rect x="44.5786%" y="405" width="0.0263%" height="15" fill="rgb(232,167,36)" fg:x="1698" fg:w="1"/><text x="44.8286%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.18%)</title><rect x="44.6049%" y="437" width="0.1838%" height="15" fill="rgb(244,19,51)" fg:x="1699" fg:w="7"/><text x="44.8549%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.18%)</title><rect x="44.6049%" y="421" width="0.1838%" height="15" fill="rgb(224,6,22)" fg:x="1699" fg:w="7"/><text x="44.8549%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="44.7624%" y="405" width="0.0263%" height="15" fill="rgb(224,145,5)" fg:x="1705" fg:w="1"/><text x="45.0124%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (8 samples, 0.21%)</title><rect x="44.7887%" y="437" width="0.2100%" height="15" fill="rgb(234,130,49)" fg:x="1706" fg:w="8"/><text x="45.0387%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (8 samples, 0.21%)</title><rect x="44.7887%" y="421" width="0.2100%" height="15" fill="rgb(254,6,2)" fg:x="1706" fg:w="8"/><text x="45.0387%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.05%)</title><rect x="44.9987%" y="421" width="0.0525%" height="15" fill="rgb(208,96,46)" fg:x="1714" fg:w="2"/><text x="45.2487%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.76%)</title><rect x="44.3161%" y="469" width="0.7614%" height="15" fill="rgb(239,3,39)" fg:x="1688" fg:w="29"/><text x="44.5661%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (20 samples, 0.53%)</title><rect x="44.5524%" y="453" width="0.5251%" height="15" fill="rgb(233,210,1)" fg:x="1697" fg:w="20"/><text x="44.8024%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.08%)</title><rect x="44.9987%" y="437" width="0.0788%" height="15" fill="rgb(244,137,37)" fg:x="1714" fg:w="3"/><text x="45.2487%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="45.0512%" y="421" width="0.0263%" height="15" fill="rgb(240,136,2)" fg:x="1716" fg:w="1"/><text x="45.3012%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="45.0512%" y="405" width="0.0263%" height="15" fill="rgb(239,18,37)" fg:x="1716" fg:w="1"/><text x="45.3012%" y="415.50"></text></g><g><title>_mi_free_generic (1 samples, 0.03%)</title><rect x="45.5500%" y="309" width="0.0263%" height="15" fill="rgb(218,185,22)" fg:x="1735" fg:w="1"/><text x="45.8000%" y="319.50"></text></g><g><title>_mi_free_block (1 samples, 0.03%)</title><rect x="45.5500%" y="293" width="0.0263%" height="15" fill="rgb(225,218,4)" fg:x="1735" fg:w="1"/><text x="45.8000%" y="303.50"></text></g><g><title>mi_page_queue_of (1 samples, 0.03%)</title><rect x="45.5763%" y="293" width="0.0263%" height="15" fill="rgb(230,182,32)" fg:x="1736" fg:w="1"/><text x="45.8263%" y="303.50"></text></g><g><title>mi_bin (1 samples, 0.03%)</title><rect x="45.5763%" y="277" width="0.0263%" height="15" fill="rgb(242,56,43)" fg:x="1736" fg:w="1"/><text x="45.8263%" y="287.50"></text></g><g><title>_mi_page_retire (2 samples, 0.05%)</title><rect x="45.5763%" y="309" width="0.0525%" height="15" fill="rgb(233,99,24)" fg:x="1736" fg:w="2"/><text x="45.8263%" y="319.50"></text></g><g><title>mi_page_set_has_aligned (1 samples, 0.03%)</title><rect x="45.6025%" y="293" width="0.0263%" height="15" fill="rgb(234,209,42)" fg:x="1737" fg:w="1"/><text x="45.8525%" y="303.50"></text></g><g><title>_mi_stat_decrease (2 samples, 0.05%)</title><rect x="45.6288%" y="277" width="0.0525%" height="15" fill="rgb(227,7,12)" fg:x="1738" fg:w="2"/><text x="45.8788%" y="287.50"></text></g><g><title>mi_stat_update (2 samples, 0.05%)</title><rect x="45.6288%" y="261" width="0.0525%" height="15" fill="rgb(245,203,43)" fg:x="1738" fg:w="2"/><text x="45.8788%" y="271.50"></text></g><g><title>_mi_segment_page_free (5 samples, 0.13%)</title><rect x="45.6288%" y="309" width="0.1313%" height="15" fill="rgb(238,205,33)" fg:x="1738" fg:w="5"/><text x="45.8788%" y="319.50"></text></g><g><title>mi_segment_page_clear (5 samples, 0.13%)</title><rect x="45.6288%" y="293" width="0.1313%" height="15" fill="rgb(231,56,7)" fg:x="1738" fg:w="5"/><text x="45.8788%" y="303.50"></text></g><g><title>mi_segment_span_free_coalesce (3 samples, 0.08%)</title><rect x="45.6813%" y="277" width="0.0788%" height="15" fill="rgb(244,186,29)" fg:x="1740" fg:w="3"/><text x="45.9313%" y="287.50"></text></g><g><title>mi_segment_span_free (3 samples, 0.08%)</title><rect x="45.6813%" y="261" width="0.0788%" height="15" fill="rgb(234,111,31)" fg:x="1740" fg:w="3"/><text x="45.9313%" y="271.50"></text></g><g><title>mi_segment_schedule_purge (2 samples, 0.05%)</title><rect x="45.7075%" y="245" width="0.0525%" height="15" fill="rgb(241,149,10)" fg:x="1741" fg:w="2"/><text x="45.9575%" y="255.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.05%)</title><rect x="45.7075%" y="229" width="0.0525%" height="15" fill="rgb(249,206,44)" fg:x="1741" fg:w="2"/><text x="45.9575%" y="239.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (2 samples, 0.05%)</title><rect x="45.7075%" y="213" width="0.0525%" height="15" fill="rgb(251,153,30)" fg:x="1741" fg:w="2"/><text x="45.9575%" y="223.50"></text></g><g><title>_mi_prim_thread_id (2 samples, 0.05%)</title><rect x="47.6503%" y="293" width="0.0525%" height="15" fill="rgb(239,152,38)" fg:x="1815" fg:w="2"/><text x="47.9003%" y="303.50"></text></g><g><title>mi_prim_tls_slot (2 samples, 0.05%)</title><rect x="47.6503%" y="277" width="0.0525%" height="15" fill="rgb(249,139,47)" fg:x="1815" fg:w="2"/><text x="47.9003%" y="287.50"></text></g><g><title>_mi_segment_page_of (55 samples, 1.44%)</title><rect x="47.7028%" y="293" width="1.4439%" height="15" fill="rgb(244,64,35)" fg:x="1817" fg:w="55"/><text x="47.9528%" y="303.50"></text></g><g><title>mi_slice_first (44 samples, 1.16%)</title><rect x="47.9916%" y="277" width="1.1552%" height="15" fill="rgb(216,46,15)" fg:x="1828" fg:w="44"/><text x="48.2416%" y="287.50"></text></g><g><title>mi_block_set_next (4 samples, 0.11%)</title><rect x="49.1468%" y="293" width="0.1050%" height="15" fill="rgb(250,74,19)" fg:x="1872" fg:w="4"/><text x="49.3968%" y="303.50"></text></g><g><title>mi_block_set_nextx (4 samples, 0.11%)</title><rect x="49.1468%" y="277" width="0.1050%" height="15" fill="rgb(249,42,33)" fg:x="1872" fg:w="4"/><text x="49.3968%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (158 samples, 4.15%)</title><rect x="45.1825%" y="373" width="4.1481%" height="15" fill="rgb(242,149,17)" fg:x="1721" fg:w="158"/><text x="45.4325%" y="383.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (158 samples, 4.15%)</title><rect x="45.1825%" y="357" width="4.1481%" height="15" fill="rgb(244,29,21)" fg:x="1721" fg:w="158"/><text x="45.4325%" y="367.50">alloc..</text></g><g><title>__rust_dealloc (158 samples, 4.15%)</title><rect x="45.1825%" y="341" width="4.1481%" height="15" fill="rgb(220,130,37)" fg:x="1721" fg:w="158"/><text x="45.4325%" y="351.50">__rus..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (158 samples, 4.15%)</title><rect x="45.1825%" y="325" width="4.1481%" height="15" fill="rgb(211,67,2)" fg:x="1721" fg:w="158"/><text x="45.4325%" y="335.50">&lt;mima..</text></g><g><title>mi_free (136 samples, 3.57%)</title><rect x="45.7600%" y="309" width="3.5705%" height="15" fill="rgb(235,68,52)" fg:x="1743" fg:w="136"/><text x="46.0100%" y="319.50">mi_f..</text></g><g><title>mi_checked_ptr_segment (3 samples, 0.08%)</title><rect x="49.2518%" y="293" width="0.0788%" height="15" fill="rgb(246,142,3)" fg:x="1876" fg:w="3"/><text x="49.5018%" y="303.50"></text></g><g><title>_mi_ptr_segment (3 samples, 0.08%)</title><rect x="49.2518%" y="277" width="0.0788%" height="15" fill="rgb(241,25,7)" fg:x="1876" fg:w="3"/><text x="49.5018%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (233 samples, 6.12%)</title><rect x="44.3161%" y="485" width="6.1171%" height="15" fill="rgb(242,119,39)" fg:x="1688" fg:w="233"/><text x="44.5661%" y="495.50">hashbrow..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (204 samples, 5.36%)</title><rect x="45.0774%" y="469" width="5.3557%" height="15" fill="rgb(241,98,45)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="479.50">hashbro..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (204 samples, 5.36%)</title><rect x="45.0774%" y="453" width="5.3557%" height="15" fill="rgb(254,28,30)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="463.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt; (204 samples, 5.36%)</title><rect x="45.0774%" y="437" width="5.3557%" height="15" fill="rgb(241,142,54)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (204 samples, 5.36%)</title><rect x="45.0774%" y="421" width="5.3557%" height="15" fill="rgb(222,85,15)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (204 samples, 5.36%)</title><rect x="45.0774%" y="405" width="5.3557%" height="15" fill="rgb(210,85,47)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="415.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (204 samples, 5.36%)</title><rect x="45.0774%" y="389" width="5.3557%" height="15" fill="rgb(224,206,25)" fg:x="1717" fg:w="204"/><text x="45.3274%" y="399.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (42 samples, 1.10%)</title><rect x="49.3305%" y="373" width="1.1027%" height="15" fill="rgb(243,201,19)" fg:x="1879" fg:w="42"/><text x="49.5805%" y="383.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.03%)</title><rect x="50.4857%" y="357" width="0.0263%" height="15" fill="rgb(236,59,4)" fg:x="1923" fg:w="1"/><text x="50.7357%" y="367.50"></text></g><g><title>mi_segment_schedule_purge (1 samples, 0.03%)</title><rect x="50.4857%" y="341" width="0.0263%" height="15" fill="rgb(254,179,45)" fg:x="1923" fg:w="1"/><text x="50.7357%" y="351.50"></text></g><g><title>mi_commit_mask_create_intersect (1 samples, 0.03%)</title><rect x="50.4857%" y="325" width="0.0263%" height="15" fill="rgb(226,14,10)" fg:x="1923" fg:w="1"/><text x="50.7357%" y="335.50"></text></g><g><title>_mi_segment_page_free (3 samples, 0.08%)</title><rect x="50.4594%" y="405" width="0.0788%" height="15" fill="rgb(244,27,41)" fg:x="1922" fg:w="3"/><text x="50.7094%" y="415.50"></text></g><g><title>mi_segment_page_clear (3 samples, 0.08%)</title><rect x="50.4594%" y="389" width="0.0788%" height="15" fill="rgb(235,35,32)" fg:x="1922" fg:w="3"/><text x="50.7094%" y="399.50"></text></g><g><title>mi_segment_span_free_coalesce (3 samples, 0.08%)</title><rect x="50.4594%" y="373" width="0.0788%" height="15" fill="rgb(218,68,31)" fg:x="1922" fg:w="3"/><text x="50.7094%" y="383.50"></text></g><g><title>mi_segment_span_remove_from_queue (1 samples, 0.03%)</title><rect x="50.5119%" y="357" width="0.0263%" height="15" fill="rgb(207,120,37)" fg:x="1924" fg:w="1"/><text x="50.7619%" y="367.50"></text></g><g><title>mi_span_queue_delete (1 samples, 0.03%)</title><rect x="50.5119%" y="341" width="0.0263%" height="15" fill="rgb(227,98,0)" fg:x="1924" fg:w="1"/><text x="50.7619%" y="351.50"></text></g><g><title>entity_centered::simulation::detect_collision (1,725 samples, 45.29%)</title><rect x="5.2770%" y="565" width="45.2875%" height="15" fill="rgb(207,7,3)" fg:x="201" fg:w="1725"/><text x="5.5270%" y="575.50">entity_centered::simulation::detect_collision</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;&gt; (238 samples, 6.25%)</title><rect x="44.3161%" y="549" width="6.2484%" height="15" fill="rgb(206,98,19)" fg:x="1688" fg:w="238"/><text x="44.5661%" y="559.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt;&gt; (238 samples, 6.25%)</title><rect x="44.3161%" y="533" width="6.2484%" height="15" fill="rgb(217,5,26)" fg:x="1688" fg:w="238"/><text x="44.5661%" y="543.50">core::pt..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (238 samples, 6.25%)</title><rect x="44.3161%" y="517" width="6.2484%" height="15" fill="rgb(235,190,38)" fg:x="1688" fg:w="238"/><text x="44.5661%" y="527.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (238 samples, 6.25%)</title><rect x="44.3161%" y="501" width="6.2484%" height="15" fill="rgb(247,86,24)" fg:x="1688" fg:w="238"/><text x="44.5661%" y="511.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (5 samples, 0.13%)</title><rect x="50.4332%" y="485" width="0.1313%" height="15" fill="rgb(205,101,16)" fg:x="1921" fg:w="5"/><text x="50.6832%" y="495.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::deallocate (5 samples, 0.13%)</title><rect x="50.4332%" y="469" width="0.1313%" height="15" fill="rgb(246,168,33)" fg:x="1921" fg:w="5"/><text x="50.6832%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="50.4594%" y="453" width="0.1050%" height="15" fill="rgb(231,114,1)" fg:x="1922" fg:w="4"/><text x="50.7094%" y="463.50"></text></g><g><title>__rust_dealloc (4 samples, 0.11%)</title><rect x="50.4594%" y="437" width="0.1050%" height="15" fill="rgb(207,184,53)" fg:x="1922" fg:w="4"/><text x="50.7094%" y="447.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (4 samples, 0.11%)</title><rect x="50.4594%" y="421" width="0.1050%" height="15" fill="rgb(224,95,51)" fg:x="1922" fg:w="4"/><text x="50.7094%" y="431.50"></text></g><g><title>mi_free (1 samples, 0.03%)</title><rect x="50.5382%" y="405" width="0.0263%" height="15" fill="rgb(212,188,45)" fg:x="1925" fg:w="1"/><text x="50.7882%" y="415.50"></text></g><g><title>_mi_segment_page_of (1 samples, 0.03%)</title><rect x="50.5382%" y="389" width="0.0263%" height="15" fill="rgb(223,154,38)" fg:x="1925" fg:w="1"/><text x="50.7882%" y="399.50"></text></g><g><title>mi_slice_first (1 samples, 0.03%)</title><rect x="50.5382%" y="373" width="0.0263%" height="15" fill="rgb(251,22,52)" fg:x="1925" fg:w="1"/><text x="50.7882%" y="383.50"></text></g><g><title>&lt;entity_centered::vector::Vector3d as core::ops::arith::Add&gt;::add (21 samples, 0.55%)</title><rect x="54.3712%" y="453" width="0.5513%" height="15" fill="rgb(229,209,22)" fg:x="2071" fg:w="21"/><text x="54.6212%" y="463.50"></text></g><g><title>&lt;entity_centered::vector::Vector3d as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (38 samples, 1.00%)</title><rect x="54.9226%" y="453" width="0.9976%" height="15" fill="rgb(234,138,34)" fg:x="2092" fg:w="38"/><text x="55.1726%" y="463.50"></text></g><g><title>entity_centered::vector::Vector3d::distance_pow2 (101 samples, 2.65%)</title><rect x="55.9202%" y="437" width="2.6516%" height="15" fill="rgb(212,95,11)" fg:x="2130" fg:w="101"/><text x="56.1702%" y="447.50">en..</text></g><g><title>entity_centered::vector::Vector3d::dot (101 samples, 2.65%)</title><rect x="55.9202%" y="421" width="2.6516%" height="15" fill="rgb(240,179,47)" fg:x="2130" fg:w="101"/><text x="56.1702%" y="431.50">en..</text></g><g><title>entity_centered::molecule::Molecule::apply_movement (300 samples, 7.88%)</title><rect x="52.9010%" y="469" width="7.8761%" height="15" fill="rgb(240,163,11)" fg:x="2015" fg:w="300"/><text x="53.1510%" y="479.50">entity_cent..</text></g><g><title>entity_centered::vector::Vector3d::distance (185 samples, 4.86%)</title><rect x="55.9202%" y="453" width="4.8569%" height="15" fill="rgb(236,37,12)" fg:x="2130" fg:w="185"/><text x="56.1702%" y="463.50">entity..</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (84 samples, 2.21%)</title><rect x="58.5718%" y="437" width="2.2053%" height="15" fill="rgb(232,164,16)" fg:x="2231" fg:w="84"/><text x="58.8218%" y="447.50">s..</text></g><g><title>entity_centered::vector::&lt;impl core::ops::arith::Mul&lt;entity_centered::vector::Vector3d&gt; for f32&gt;::mul (41 samples, 1.08%)</title><rect x="64.7939%" y="453" width="1.0764%" height="15" fill="rgb(244,205,15)" fg:x="2468" fg:w="41"/><text x="65.0439%" y="463.50"></text></g><g><title>entity_centered::vector::Vector3d::dot (45 samples, 1.18%)</title><rect x="65.8703%" y="453" width="1.1814%" height="15" fill="rgb(223,117,47)" fg:x="2509" fg:w="45"/><text x="66.1203%" y="463.50"></text></g><g><title>fastrand::global_rng::RNG::__getit (54 samples, 1.42%)</title><rect x="67.2880%" y="389" width="1.4177%" height="15" fill="rgb(244,107,35)" fg:x="2563" fg:w="54"/><text x="67.5380%" y="399.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (54 samples, 1.42%)</title><rect x="67.2880%" y="373" width="1.4177%" height="15" fill="rgb(205,140,8)" fg:x="2563" fg:w="54"/><text x="67.5380%" y="383.50"></text></g><g><title>std::sys::pal::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (34 samples, 0.89%)</title><rect x="67.8131%" y="357" width="0.8926%" height="15" fill="rgb(228,84,46)" fg:x="2583" fg:w="34"/><text x="68.0631%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (34 samples, 0.89%)</title><rect x="67.8131%" y="341" width="0.8926%" height="15" fill="rgb(254,188,9)" fg:x="2583" fg:w="34"/><text x="68.0631%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastrand::global_rng::RestoreOnDrop&gt; (10 samples, 0.26%)</title><rect x="68.7057%" y="373" width="0.2625%" height="15" fill="rgb(206,112,54)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="383.50"></text></g><g><title>&lt;fastrand::global_rng::RestoreOnDrop as core::ops::drop::Drop&gt;::drop (10 samples, 0.26%)</title><rect x="68.7057%" y="357" width="0.2625%" height="15" fill="rgb(216,84,49)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (10 samples, 0.26%)</title><rect x="68.7057%" y="341" width="0.2625%" height="15" fill="rgb(214,194,35)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (10 samples, 0.26%)</title><rect x="68.7057%" y="325" width="0.2625%" height="15" fill="rgb(249,28,3)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="335.50"></text></g><g><title>core::mem::replace (10 samples, 0.26%)</title><rect x="68.7057%" y="309" width="0.2625%" height="15" fill="rgb(222,56,52)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="319.50"></text></g><g><title>core::ptr::write (10 samples, 0.26%)</title><rect x="68.7057%" y="293" width="0.2625%" height="15" fill="rgb(245,217,50)" fg:x="2617" fg:w="10"/><text x="68.9557%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits (8 samples, 0.21%)</title><rect x="69.9134%" y="341" width="0.2100%" height="15" fill="rgb(213,201,24)" fg:x="2663" fg:w="8"/><text x="70.1634%" y="351.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits::rt_u32_to_f32 (8 samples, 0.21%)</title><rect x="69.9134%" y="325" width="0.2100%" height="15" fill="rgb(248,116,28)" fg:x="2663" fg:w="8"/><text x="70.1634%" y="335.50"></text></g><g><title>fastrand::global_rng::f32 (176 samples, 4.62%)</title><rect x="67.0517%" y="453" width="4.6206%" height="15" fill="rgb(219,72,43)" fg:x="2554" fg:w="176"/><text x="67.3017%" y="463.50">fastr..</text></g><g><title>fastrand::global_rng::with_rng (176 samples, 4.62%)</title><rect x="67.0517%" y="437" width="4.6206%" height="15" fill="rgb(209,138,14)" fg:x="2554" fg:w="176"/><text x="67.3017%" y="447.50">fastr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (176 samples, 4.62%)</title><rect x="67.0517%" y="421" width="4.6206%" height="15" fill="rgb(222,18,33)" fg:x="2554" fg:w="176"/><text x="67.3017%" y="431.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (176 samples, 4.62%)</title><rect x="67.0517%" y="405" width="4.6206%" height="15" fill="rgb(213,199,7)" fg:x="2554" fg:w="176"/><text x="67.3017%" y="415.50">std::..</text></g><g><title>fastrand::global_rng::with_rng::_{{closure}} (113 samples, 2.97%)</title><rect x="68.7057%" y="389" width="2.9667%" height="15" fill="rgb(250,110,10)" fg:x="2617" fg:w="113"/><text x="68.9557%" y="399.50">fas..</text></g><g><title>fastrand::global_rng::f32::_{{closure}} (103 samples, 2.70%)</title><rect x="68.9682%" y="373" width="2.7041%" height="15" fill="rgb(248,123,6)" fg:x="2627" fg:w="103"/><text x="69.2182%" y="383.50">fa..</text></g><g><title>fastrand::Rng::f32 (103 samples, 2.70%)</title><rect x="68.9682%" y="357" width="2.7041%" height="15" fill="rgb(206,91,31)" fg:x="2627" fg:w="103"/><text x="69.2182%" y="367.50">fa..</text></g><g><title>fastrand::Rng::u32 (59 samples, 1.55%)</title><rect x="70.1234%" y="341" width="1.5490%" height="15" fill="rgb(211,154,13)" fg:x="2671" fg:w="59"/><text x="70.3734%" y="351.50"></text></g><g><title>fastrand::Rng::gen_u32 (59 samples, 1.55%)</title><rect x="70.1234%" y="325" width="1.5490%" height="15" fill="rgb(225,148,7)" fg:x="2671" fg:w="59"/><text x="70.3734%" y="335.50"></text></g><g><title>fastrand::Rng::gen_u64 (59 samples, 1.55%)</title><rect x="70.1234%" y="309" width="1.5490%" height="15" fill="rgb(220,160,43)" fg:x="2671" fg:w="59"/><text x="70.3734%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.26%)</title><rect x="71.4098%" y="293" width="0.2625%" height="15" fill="rgb(213,52,39)" fg:x="2720" fg:w="10"/><text x="71.6598%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (818 samples, 21.48%)</title><rect x="52.9010%" y="533" width="21.4755%" height="15" fill="rgb(243,137,7)" fg:x="2015" fg:w="818"/><text x="53.1510%" y="543.50">&lt;core::iter::adapters::map::Map&lt;I,..</text></g><g><title>core::option::Option&lt;T&gt;::map (818 samples, 21.48%)</title><rect x="52.9010%" y="517" width="21.4755%" height="15" fill="rgb(230,79,13)" fg:x="2015" fg:w="818"/><text x="53.1510%" y="527.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (818 samples, 21.48%)</title><rect x="52.9010%" y="501" width="21.4755%" height="15" fill="rgb(247,105,23)" fg:x="2015" fg:w="818"/><text x="53.1510%" y="511.50">core::ops::function::impls::&lt;impl ..</text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (818 samples, 21.48%)</title><rect x="52.9010%" y="485" width="21.4755%" height="15" fill="rgb(223,179,41)" fg:x="2015" fg:w="818"/><text x="53.1510%" y="495.50">entity_centered::simulation::simul..</text></g><g><title>entity_centered::vector::Vector3d::get_random_unitary (518 samples, 13.60%)</title><rect x="60.7771%" y="469" width="13.5994%" height="15" fill="rgb(218,9,34)" fg:x="2315" fg:w="518"/><text x="61.0271%" y="479.50">entity_centered::vect..</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (103 samples, 2.70%)</title><rect x="71.6724%" y="453" width="2.7041%" height="15" fill="rgb(222,106,8)" fg:x="2730" fg:w="103"/><text x="71.9224%" y="463.50">st..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,315 samples, 34.52%)</title><rect x="50.6432%" y="549" width="34.5235%" height="15" fill="rgb(211,220,0)" fg:x="1929" fg:w="1315"/><text x="50.8932%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::trai..</text></g><g><title>core::option::Option&lt;T&gt;::map (411 samples, 10.79%)</title><rect x="74.3765%" y="533" width="10.7902%" height="15" fill="rgb(229,52,16)" fg:x="2833" fg:w="411"/><text x="74.6265%" y="543.50">core::option::Op..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (224 samples, 5.88%)</title><rect x="79.2859%" y="517" width="5.8808%" height="15" fill="rgb(212,155,18)" fg:x="3020" fg:w="224"/><text x="79.5359%" y="527.50">core::o..</text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (224 samples, 5.88%)</title><rect x="79.2859%" y="501" width="5.8808%" height="15" fill="rgb(242,21,14)" fg:x="3020" fg:w="224"/><text x="79.5359%" y="511.50">entity_..</text></g><g><title>entity_centered::vector::Vector3d::into_vectorint (212 samples, 5.57%)</title><rect x="79.6009%" y="485" width="5.5658%" height="15" fill="rgb(222,19,48)" fg:x="3032" fg:w="212"/><text x="79.8509%" y="495.50">entity_..</text></g><g><title>std::f32::&lt;impl f32&gt;::floor (69 samples, 1.81%)</title><rect x="83.3552%" y="469" width="1.8115%" height="15" fill="rgb(232,45,27)" fg:x="3175" fg:w="69"/><text x="83.6052%" y="479.50">s..</text></g><g><title>__floorf_sse41 (69 samples, 1.81%)</title><rect x="83.3552%" y="453" width="1.8115%" height="15" fill="rgb(249,103,42)" fg:x="3175" fg:w="69"/><text x="83.6052%" y="463.50">_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="85.8493%" y="533" width="0.0263%" height="15" fill="rgb(246,81,33)" fg:x="3270" fg:w="1"/><text x="86.0993%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="85.8493%" y="517" width="0.0263%" height="15" fill="rgb(252,33,42)" fg:x="3270" fg:w="1"/><text x="86.0993%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.11%)</title><rect x="85.8756%" y="533" width="0.1050%" height="15" fill="rgb(209,212,41)" fg:x="3271" fg:w="4"/><text x="86.1256%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (99 samples, 2.60%)</title><rect x="85.1667%" y="549" width="2.5991%" height="15" fill="rgb(207,154,6)" fg:x="3244" fg:w="99"/><text x="85.4167%" y="559.50">al..</text></g><g><title>core::ptr::write (68 samples, 1.79%)</title><rect x="85.9806%" y="533" width="1.7852%" height="15" fill="rgb(223,64,47)" fg:x="3275" fg:w="68"/><text x="86.2306%" y="543.50">c..</text></g><g><title>_mi_page_free_collect (1 samples, 0.03%)</title><rect x="87.9496%" y="325" width="0.0263%" height="15" fill="rgb(211,161,38)" fg:x="3350" fg:w="1"/><text x="88.1996%" y="335.50"></text></g><g><title>_mi_heap_collect_retired (1 samples, 0.03%)</title><rect x="88.0021%" y="309" width="0.0263%" height="15" fill="rgb(219,138,40)" fg:x="3352" fg:w="1"/><text x="88.2521%" y="319.50"></text></g><g><title>mi_page_extend_free (7 samples, 0.18%)</title><rect x="88.0284%" y="309" width="0.1838%" height="15" fill="rgb(241,228,46)" fg:x="3353" fg:w="7"/><text x="88.2784%" y="319.50"></text></g><g><title>mi_page_extend_free (7 samples, 0.18%)</title><rect x="88.0284%" y="293" width="0.1838%" height="15" fill="rgb(223,209,38)" fg:x="3353" fg:w="7"/><text x="88.2784%" y="303.50"></text></g><g><title>mi_page_free_list_extend (6 samples, 0.16%)</title><rect x="88.0546%" y="277" width="0.1575%" height="15" fill="rgb(236,164,45)" fg:x="3354" fg:w="6"/><text x="88.3046%" y="287.50"></text></g><g><title>mi_block_set_next (6 samples, 0.16%)</title><rect x="88.0546%" y="261" width="0.1575%" height="15" fill="rgb(231,15,5)" fg:x="3354" fg:w="6"/><text x="88.3046%" y="271.50"></text></g><g><title>mi_block_set_nextx (6 samples, 0.16%)</title><rect x="88.0546%" y="245" width="0.1575%" height="15" fill="rgb(252,35,15)" fg:x="3354" fg:w="6"/><text x="88.3046%" y="255.50"></text></g><g><title>_mi_arena_memid_is_suitable (1 samples, 0.03%)</title><rect x="88.2646%" y="229" width="0.0263%" height="15" fill="rgb(248,181,18)" fg:x="3362" fg:w="1"/><text x="88.5146%" y="239.50"></text></g><g><title>mi_arena_id_is_suitable (1 samples, 0.03%)</title><rect x="88.2646%" y="213" width="0.0263%" height="15" fill="rgb(233,39,42)" fg:x="3362" fg:w="1"/><text x="88.5146%" y="223.50"></text></g><g><title>_mi_arena_id_none (1 samples, 0.03%)</title><rect x="88.2646%" y="197" width="0.0263%" height="15" fill="rgb(238,110,33)" fg:x="3362" fg:w="1"/><text x="88.5146%" y="207.50"></text></g><g><title>_mi_segment_page_alloc (4 samples, 0.11%)</title><rect x="88.2121%" y="277" width="0.1050%" height="15" fill="rgb(233,195,10)" fg:x="3360" fg:w="4"/><text x="88.4621%" y="287.50"></text></g><g><title>mi_segments_page_alloc (4 samples, 0.11%)</title><rect x="88.2121%" y="261" width="0.1050%" height="15" fill="rgb(254,105,3)" fg:x="3360" fg:w="4"/><text x="88.4621%" y="271.50"></text></g><g><title>mi_segments_page_find_and_allocate (4 samples, 0.11%)</title><rect x="88.2121%" y="245" width="0.1050%" height="15" fill="rgb(221,225,9)" fg:x="3360" fg:w="4"/><text x="88.4621%" y="255.50"></text></g><g><title>mi_segment_span_allocate (1 samples, 0.03%)</title><rect x="88.2909%" y="229" width="0.0263%" height="15" fill="rgb(224,227,45)" fg:x="3363" fg:w="1"/><text x="88.5409%" y="239.50"></text></g><g><title>mi_segment_ensure_committed (1 samples, 0.03%)</title><rect x="88.2909%" y="213" width="0.0263%" height="15" fill="rgb(229,198,43)" fg:x="3363" fg:w="1"/><text x="88.5409%" y="223.50"></text></g><g><title>mi_segment_commit (1 samples, 0.03%)</title><rect x="88.2909%" y="197" width="0.0263%" height="15" fill="rgb(206,209,35)" fg:x="3363" fg:w="1"/><text x="88.5409%" y="207.50"></text></g><g><title>_mi_segment_page_start (1 samples, 0.03%)</title><rect x="88.3171%" y="277" width="0.0263%" height="15" fill="rgb(245,195,53)" fg:x="3364" fg:w="1"/><text x="88.5671%" y="287.50"></text></g><g><title>_mi_segment_page_start_from_slice (1 samples, 0.03%)</title><rect x="88.3171%" y="261" width="0.0263%" height="15" fill="rgb(240,92,26)" fg:x="3364" fg:w="1"/><text x="88.5671%" y="271.50"></text></g><g><title>mi_page_fresh (7 samples, 0.18%)</title><rect x="88.2121%" y="309" width="0.1838%" height="15" fill="rgb(207,40,23)" fg:x="3360" fg:w="7"/><text x="88.4621%" y="319.50"></text></g><g><title>mi_page_fresh_alloc (7 samples, 0.18%)</title><rect x="88.2121%" y="293" width="0.1838%" height="15" fill="rgb(223,111,35)" fg:x="3360" fg:w="7"/><text x="88.4621%" y="303.50"></text></g><g><title>mi_page_queue_push (2 samples, 0.05%)</title><rect x="88.3434%" y="277" width="0.0525%" height="15" fill="rgb(229,147,28)" fg:x="3365" fg:w="2"/><text x="88.5934%" y="287.50"></text></g><g><title>mi_heap_queue_first_update (2 samples, 0.05%)</title><rect x="88.3434%" y="261" width="0.0525%" height="15" fill="rgb(211,29,28)" fg:x="3365" fg:w="2"/><text x="88.5934%" y="271.50"></text></g><g><title>mi_bin (1 samples, 0.03%)</title><rect x="88.3697%" y="245" width="0.0263%" height="15" fill="rgb(228,72,33)" fg:x="3366" fg:w="1"/><text x="88.6197%" y="255.50"></text></g><g><title>_mi_wsize_from_size (1 samples, 0.03%)</title><rect x="88.3697%" y="229" width="0.0263%" height="15" fill="rgb(205,214,31)" fg:x="3366" fg:w="1"/><text x="88.6197%" y="239.50"></text></g><g><title>_mi_malloc_generic (19 samples, 0.50%)</title><rect x="87.9496%" y="373" width="0.4988%" height="15" fill="rgb(224,111,15)" fg:x="3350" fg:w="19"/><text x="88.1996%" y="383.50"></text></g><g><title>mi_find_page (19 samples, 0.50%)</title><rect x="87.9496%" y="357" width="0.4988%" height="15" fill="rgb(253,21,26)" fg:x="3350" fg:w="19"/><text x="88.1996%" y="367.50"></text></g><g><title>mi_find_free_page (19 samples, 0.50%)</title><rect x="87.9496%" y="341" width="0.4988%" height="15" fill="rgb(245,139,43)" fg:x="3350" fg:w="19"/><text x="88.1996%" y="351.50"></text></g><g><title>mi_page_queue_find_free_ex (18 samples, 0.47%)</title><rect x="87.9758%" y="325" width="0.4726%" height="15" fill="rgb(252,170,7)" fg:x="3351" fg:w="18"/><text x="88.2258%" y="335.50"></text></g><g><title>mi_page_to_full (2 samples, 0.05%)</title><rect x="88.3959%" y="309" width="0.0525%" height="15" fill="rgb(231,118,14)" fg:x="3367" fg:w="2"/><text x="88.6459%" y="319.50"></text></g><g><title>mi_page_queue_enqueue_from (2 samples, 0.05%)</title><rect x="88.3959%" y="293" width="0.0525%" height="15" fill="rgb(238,83,0)" fg:x="3367" fg:w="2"/><text x="88.6459%" y="303.50"></text></g><g><title>mi_heap_queue_first_update (2 samples, 0.05%)</title><rect x="88.3959%" y="277" width="0.0525%" height="15" fill="rgb(221,39,39)" fg:x="3367" fg:w="2"/><text x="88.6459%" y="287.50"></text></g><g><title>mi_heap_malloc_aligned (18 samples, 0.47%)</title><rect x="88.4484%" y="373" width="0.4726%" height="15" fill="rgb(222,119,46)" fg:x="3369" fg:w="18"/><text x="88.6984%" y="383.50"></text></g><g><title>_mi_is_power_of_two (2 samples, 0.05%)</title><rect x="88.8685%" y="357" width="0.0525%" height="15" fill="rgb(222,165,49)" fg:x="3385" fg:w="2"/><text x="89.1185%" y="367.50"></text></g><g><title>_mi_heap_get_free_small_page (13 samples, 0.34%)</title><rect x="89.6823%" y="341" width="0.3413%" height="15" fill="rgb(219,113,52)" fg:x="3416" fg:w="13"/><text x="89.9323%" y="351.50"></text></g><g><title>_mi_wsize_from_size (10 samples, 0.26%)</title><rect x="89.7611%" y="325" width="0.2625%" height="15" fill="rgb(214,7,15)" fg:x="3419" fg:w="10"/><text x="90.0111%" y="335.50"></text></g><g><title>mi_heap_malloc_aligned_at (90 samples, 2.36%)</title><rect x="88.9210%" y="373" width="2.3628%" height="15" fill="rgb(235,32,4)" fg:x="3387" fg:w="90"/><text x="89.1710%" y="383.50">mi..</text></g><g><title>mi_heap_malloc_zero_aligned_at (90 samples, 2.36%)</title><rect x="88.9210%" y="357" width="2.3628%" height="15" fill="rgb(238,90,54)" fg:x="3387" fg:w="90"/><text x="89.1710%" y="367.50">mi..</text></g><g><title>_mi_page_malloc (48 samples, 1.26%)</title><rect x="90.0236%" y="341" width="1.2602%" height="15" fill="rgb(213,208,19)" fg:x="3429" fg:w="48"/><text x="90.2736%" y="351.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_fallback (1 samples, 0.03%)</title><rect x="91.2838%" y="373" width="0.0263%" height="15" fill="rgb(233,156,4)" fg:x="3477" fg:w="1"/><text x="91.5338%" y="383.50"></text></g><g><title>__rust_alloc (144 samples, 3.78%)</title><rect x="87.9233%" y="405" width="3.7805%" height="15" fill="rgb(207,194,5)" fg:x="3349" fg:w="144"/><text x="88.1733%" y="415.50">__ru..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (144 samples, 3.78%)</title><rect x="87.9233%" y="389" width="3.7805%" height="15" fill="rgb(206,111,30)" fg:x="3349" fg:w="144"/><text x="88.1733%" y="399.50">&lt;mim..</text></g><g><title>mi_malloc_aligned (15 samples, 0.39%)</title><rect x="91.3101%" y="373" width="0.3938%" height="15" fill="rgb(243,70,54)" fg:x="3478" fg:w="15"/><text x="91.5601%" y="383.50"></text></g><g><title>mi_prim_get_default_heap (4 samples, 0.11%)</title><rect x="91.5988%" y="357" width="0.1050%" height="15" fill="rgb(242,28,8)" fg:x="3489" fg:w="4"/><text x="91.8488%" y="367.50"></text></g><g><title>entity_centered::simulation::group::_{{closure}} (150 samples, 3.94%)</title><rect x="87.8708%" y="533" width="3.9380%" height="15" fill="rgb(219,106,18)" fg:x="3347" fg:w="150"/><text x="88.1208%" y="543.50">enti..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (150 samples, 3.94%)</title><rect x="87.8708%" y="517" width="3.9380%" height="15" fill="rgb(244,222,10)" fg:x="3347" fg:w="150"/><text x="88.1208%" y="527.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (150 samples, 3.94%)</title><rect x="87.8708%" y="501" width="3.9380%" height="15" fill="rgb(236,179,52)" fg:x="3347" fg:w="150"/><text x="88.1208%" y="511.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (150 samples, 3.94%)</title><rect x="87.8708%" y="485" width="3.9380%" height="15" fill="rgb(213,23,39)" fg:x="3347" fg:w="150"/><text x="88.1208%" y="495.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (150 samples, 3.94%)</title><rect x="87.8708%" y="469" width="3.9380%" height="15" fill="rgb(238,48,10)" fg:x="3347" fg:w="150"/><text x="88.1208%" y="479.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (148 samples, 3.89%)</title><rect x="87.9233%" y="453" width="3.8855%" height="15" fill="rgb(251,196,23)" fg:x="3349" fg:w="148"/><text x="88.1733%" y="463.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (148 samples, 3.89%)</title><rect x="87.9233%" y="437" width="3.8855%" height="15" fill="rgb(250,152,24)" fg:x="3349" fg:w="148"/><text x="88.1733%" y="447.50">allo..</text></g><g><title>alloc::alloc::alloc (148 samples, 3.89%)</title><rect x="87.9233%" y="421" width="3.8855%" height="15" fill="rgb(209,150,17)" fg:x="3349" fg:w="148"/><text x="88.1733%" y="431.50">allo..</text></g><g><title>core::ptr::read_volatile (4 samples, 0.11%)</title><rect x="91.7039%" y="405" width="0.1050%" height="15" fill="rgb(234,202,34)" fg:x="3493" fg:w="4"/><text x="91.9539%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (34 samples, 0.89%)</title><rect x="92.2027%" y="469" width="0.8926%" height="15" fill="rgb(253,148,53)" fg:x="3512" fg:w="34"/><text x="92.4527%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (34 samples, 0.89%)</title><rect x="92.2027%" y="453" width="0.8926%" height="15" fill="rgb(218,129,16)" fg:x="3512" fg:w="34"/><text x="92.4527%" y="463.50"></text></g><g><title>core::ptr::write (34 samples, 0.89%)</title><rect x="92.2027%" y="437" width="0.8926%" height="15" fill="rgb(216,85,19)" fg:x="3512" fg:w="34"/><text x="92.4527%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (12 samples, 0.32%)</title><rect x="93.0953%" y="469" width="0.3150%" height="15" fill="rgb(235,228,7)" fg:x="3546" fg:w="12"/><text x="93.3453%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (12 samples, 0.32%)</title><rect x="93.0953%" y="453" width="0.3150%" height="15" fill="rgb(245,175,0)" fg:x="3546" fg:w="12"/><text x="93.3453%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.32%)</title><rect x="93.0953%" y="437" width="0.3150%" height="15" fill="rgb(208,168,36)" fg:x="3546" fg:w="12"/><text x="93.3453%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.13%)</title><rect x="93.2791%" y="421" width="0.1313%" height="15" fill="rgb(246,171,24)" fg:x="3553" fg:w="5"/><text x="93.5291%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (70 samples, 1.84%)</title><rect x="92.2027%" y="485" width="1.8378%" height="15" fill="rgb(215,142,24)" fg:x="3512" fg:w="70"/><text x="92.4527%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (24 samples, 0.63%)</title><rect x="93.4103%" y="469" width="0.6301%" height="15" fill="rgb(250,187,7)" fg:x="3558" fg:w="24"/><text x="93.6603%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (14 samples, 0.37%)</title><rect x="93.6729%" y="453" width="0.3676%" height="15" fill="rgb(228,66,33)" fg:x="3568" fg:w="14"/><text x="93.9229%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (14 samples, 0.37%)</title><rect x="93.6729%" y="437" width="0.3676%" height="15" fill="rgb(234,215,21)" fg:x="3568" fg:w="14"/><text x="93.9229%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="94.3030%" y="453" width="0.0263%" height="15" fill="rgb(222,191,20)" fg:x="3592" fg:w="1"/><text x="94.5530%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (16 samples, 0.42%)</title><rect x="94.2242%" y="469" width="0.4201%" height="15" fill="rgb(245,79,54)" fg:x="3589" fg:w="16"/><text x="94.4742%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.32%)</title><rect x="94.3292%" y="453" width="0.3150%" height="15" fill="rgb(240,10,37)" fg:x="3593" fg:w="12"/><text x="94.5792%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.32%)</title><rect x="94.3292%" y="437" width="0.3150%" height="15" fill="rgb(214,192,32)" fg:x="3593" fg:w="12"/><text x="94.5792%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (16 samples, 0.42%)</title><rect x="94.6443%" y="469" width="0.4201%" height="15" fill="rgb(209,36,54)" fg:x="3605" fg:w="16"/><text x="94.8943%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (4 samples, 0.11%)</title><rect x="95.0643%" y="469" width="0.1050%" height="15" fill="rgb(220,10,11)" fg:x="3621" fg:w="4"/><text x="95.3143%" y="479.50"></text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert_with (291 samples, 7.64%)</title><rect x="87.7658%" y="549" width="7.6398%" height="15" fill="rgb(221,106,17)" fg:x="3343" fg:w="291"/><text x="88.0158%" y="559.50">hashbrown:..</text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (137 samples, 3.60%)</title><rect x="91.8089%" y="533" width="3.5967%" height="15" fill="rgb(251,142,44)" fg:x="3497" fg:w="137"/><text x="92.0589%" y="543.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_entry (137 samples, 3.60%)</title><rect x="91.8089%" y="517" width="3.5967%" height="15" fill="rgb(238,13,15)" fg:x="3497" fg:w="137"/><text x="92.0589%" y="527.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (137 samples, 3.60%)</title><rect x="91.8089%" y="501" width="3.5967%" height="15" fill="rgb(208,107,27)" fg:x="3497" fg:w="137"/><text x="92.0589%" y="511.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (52 samples, 1.37%)</title><rect x="94.0404%" y="485" width="1.3652%" height="15" fill="rgb(205,136,37)" fg:x="3582" fg:w="52"/><text x="94.2904%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.24%)</title><rect x="95.1693%" y="469" width="0.2363%" height="15" fill="rgb(250,205,27)" fg:x="3625" fg:w="9"/><text x="95.4193%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.24%)</title><rect x="95.1693%" y="453" width="0.2363%" height="15" fill="rgb(210,80,43)" fg:x="3625" fg:w="9"/><text x="95.4193%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.24%)</title><rect x="95.1693%" y="437" width="0.2363%" height="15" fill="rgb(247,160,36)" fg:x="3625" fg:w="9"/><text x="95.4193%" y="447.50"></text></g><g><title>ahash::operations::folded_multiply (7 samples, 0.18%)</title><rect x="95.4056%" y="501" width="0.1838%" height="15" fill="rgb(234,13,49)" fg:x="3634" fg:w="7"/><text x="95.6556%" y="511.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (7 samples, 0.18%)</title><rect x="95.4056%" y="485" width="0.1838%" height="15" fill="rgb(234,122,0)" fg:x="3634" fg:w="7"/><text x="95.6556%" y="495.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (16 samples, 0.42%)</title><rect x="95.4056%" y="517" width="0.4201%" height="15" fill="rgb(207,146,38)" fg:x="3634" fg:w="16"/><text x="95.6556%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (9 samples, 0.24%)</title><rect x="95.5894%" y="501" width="0.2363%" height="15" fill="rgb(207,177,25)" fg:x="3641" fg:w="9"/><text x="95.8394%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (46 samples, 1.21%)</title><rect x="95.4056%" y="533" width="1.2077%" height="15" fill="rgb(211,178,42)" fg:x="3634" fg:w="46"/><text x="95.6556%" y="543.50"></text></g><g><title>&lt;entity_centered::vector::VectorInt3d as core::hash::Hash&gt;::hash (30 samples, 0.79%)</title><rect x="95.8257%" y="517" width="0.7876%" height="15" fill="rgb(230,69,54)" fg:x="3650" fg:w="30"/><text x="96.0757%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (30 samples, 0.79%)</title><rect x="95.8257%" y="501" width="0.7876%" height="15" fill="rgb(214,135,41)" fg:x="3650" fg:w="30"/><text x="96.0757%" y="511.50"></text></g><g><title>core::hash::Hasher::write_i32 (30 samples, 0.79%)</title><rect x="95.8257%" y="485" width="0.7876%" height="15" fill="rgb(237,67,25)" fg:x="3650" fg:w="30"/><text x="96.0757%" y="495.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u32 (30 samples, 0.79%)</title><rect x="95.8257%" y="469" width="0.7876%" height="15" fill="rgb(222,189,50)" fg:x="3650" fg:w="30"/><text x="96.0757%" y="479.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (30 samples, 0.79%)</title><rect x="95.8257%" y="453" width="0.7876%" height="15" fill="rgb(245,148,34)" fg:x="3650" fg:w="30"/><text x="96.0757%" y="463.50"></text></g><g><title>ahash::operations::folded_multiply (17 samples, 0.45%)</title><rect x="96.1670%" y="437" width="0.4463%" height="15" fill="rgb(222,29,6)" fg:x="3663" fg:w="17"/><text x="96.4170%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (7 samples, 0.18%)</title><rect x="96.4295%" y="421" width="0.1838%" height="15" fill="rgb(221,189,43)" fg:x="3673" fg:w="7"/><text x="96.6795%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.18%)</title><rect x="96.7708%" y="501" width="0.1838%" height="15" fill="rgb(207,36,27)" fg:x="3686" fg:w="7"/><text x="97.0208%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.18%)</title><rect x="96.7708%" y="485" width="0.1838%" height="15" fill="rgb(217,90,24)" fg:x="3686" fg:w="7"/><text x="97.0208%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (6 samples, 0.16%)</title><rect x="96.9546%" y="501" width="0.1575%" height="15" fill="rgb(224,66,35)" fg:x="3693" fg:w="6"/><text x="97.2046%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (6 samples, 0.16%)</title><rect x="96.9546%" y="485" width="0.1575%" height="15" fill="rgb(221,13,50)" fg:x="3693" fg:w="6"/><text x="97.2046%" y="495.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.16%)</title><rect x="96.9546%" y="469" width="0.1575%" height="15" fill="rgb(236,68,49)" fg:x="3693" fg:w="6"/><text x="97.2046%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.16%)</title><rect x="96.9546%" y="453" width="0.1575%" height="15" fill="rgb(229,146,28)" fg:x="3693" fg:w="6"/><text x="97.2046%" y="463.50"></text></g><g><title>&lt;entity_centered::vector::VectorInt3d as core::cmp::PartialEq&gt;::eq (6 samples, 0.16%)</title><rect x="96.9546%" y="437" width="0.1575%" height="15" fill="rgb(225,31,38)" fg:x="3693" fg:w="6"/><text x="97.2046%" y="447.50"></text></g><g><title>hashbrown::raw::h2 (29 samples, 0.76%)</title><rect x="97.1121%" y="501" width="0.7614%" height="15" fill="rgb(250,208,3)" fg:x="3699" fg:w="29"/><text x="97.3621%" y="511.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (17 samples, 0.45%)</title><rect x="97.8735%" y="501" width="0.4463%" height="15" fill="rgb(246,54,23)" fg:x="3728" fg:w="17"/><text x="98.1235%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17 samples, 0.45%)</title><rect x="97.8735%" y="485" width="0.4463%" height="15" fill="rgb(243,76,11)" fg:x="3728" fg:w="17"/><text x="98.1235%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.45%)</title><rect x="97.8735%" y="469" width="0.4463%" height="15" fill="rgb(245,21,50)" fg:x="3728" fg:w="17"/><text x="98.1235%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (26 samples, 0.68%)</title><rect x="98.3198%" y="501" width="0.6826%" height="15" fill="rgb(228,9,43)" fg:x="3745" fg:w="26"/><text x="98.5698%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.68%)</title><rect x="98.3198%" y="485" width="0.6826%" height="15" fill="rgb(208,100,47)" fg:x="3745" fg:w="26"/><text x="98.5698%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (144 samples, 3.78%)</title><rect x="95.4056%" y="549" width="3.7805%" height="15" fill="rgb(232,26,8)" fg:x="3634" fg:w="144"/><text x="95.6556%" y="559.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (98 samples, 2.57%)</title><rect x="96.6133%" y="533" width="2.5729%" height="15" fill="rgb(216,166,38)" fg:x="3680" fg:w="98"/><text x="96.8633%" y="543.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (96 samples, 2.52%)</title><rect x="96.6658%" y="517" width="2.5203%" height="15" fill="rgb(251,202,51)" fg:x="3682" fg:w="96"/><text x="96.9158%" y="527.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (7 samples, 0.18%)</title><rect x="99.0024%" y="501" width="0.1838%" height="15" fill="rgb(254,216,34)" fg:x="3771" fg:w="7"/><text x="99.2524%" y="511.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.18%)</title><rect x="99.0024%" y="485" width="0.1838%" height="15" fill="rgb(251,32,27)" fg:x="3771" fg:w="7"/><text x="99.2524%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.18%)</title><rect x="99.0024%" y="469" width="0.1838%" height="15" fill="rgb(208,127,28)" fg:x="3771" fg:w="7"/><text x="99.2524%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.08%)</title><rect x="99.1861%" y="437" width="0.0788%" height="15" fill="rgb(224,137,22)" fg:x="3778" fg:w="3"/><text x="99.4361%" y="447.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.08%)</title><rect x="99.1861%" y="421" width="0.0788%" height="15" fill="rgb(254,70,32)" fg:x="3778" fg:w="3"/><text x="99.4361%" y="431.50"></text></g><g><title>__memset_avx2_unaligned_erms (3 samples, 0.08%)</title><rect x="99.1861%" y="405" width="0.0788%" height="15" fill="rgb(229,75,37)" fg:x="3778" fg:w="3"/><text x="99.4361%" y="415.50"></text></g><g><title>mi_segment_try_purge (1 samples, 0.03%)</title><rect x="99.2912%" y="165" width="0.0263%" height="15" fill="rgb(252,64,23)" fg:x="3782" fg:w="1"/><text x="99.5412%" y="175.50"></text></g><g><title>_mi_prim_clock_now (1 samples, 0.03%)</title><rect x="99.2912%" y="149" width="0.0263%" height="15" fill="rgb(232,162,48)" fg:x="3782" fg:w="1"/><text x="99.5412%" y="159.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (1 samples, 0.03%)</title><rect x="99.2912%" y="133" width="0.0263%" height="15" fill="rgb(246,160,12)" fg:x="3782" fg:w="1"/><text x="99.5412%" y="143.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.03%)</title><rect x="99.2912%" y="117" width="0.0263%" height="15" fill="rgb(247,166,0)" fg:x="3782" fg:w="1"/><text x="99.5412%" y="127.50"></text></g><g><title>_mi_segment_page_alloc (3 samples, 0.08%)</title><rect x="99.2649%" y="213" width="0.0788%" height="15" fill="rgb(249,219,21)" fg:x="3781" fg:w="3"/><text x="99.5149%" y="223.50"></text></g><g><title>_mi_segment_page_alloc (3 samples, 0.08%)</title><rect x="99.2649%" y="197" width="0.0788%" height="15" fill="rgb(205,209,3)" fg:x="3781" fg:w="3"/><text x="99.5149%" y="207.50"></text></g><g><title>mi_segments_page_alloc (2 samples, 0.05%)</title><rect x="99.2912%" y="181" width="0.0525%" height="15" fill="rgb(243,44,1)" fg:x="3782" fg:w="2"/><text x="99.5412%" y="191.50"></text></g><g><title>mi_segments_page_find_and_allocate (1 samples, 0.03%)</title><rect x="99.3174%" y="165" width="0.0263%" height="15" fill="rgb(206,159,16)" fg:x="3783" fg:w="1"/><text x="99.5674%" y="175.50"></text></g><g><title>mi_span_queue_delete (1 samples, 0.03%)</title><rect x="99.3174%" y="149" width="0.0263%" height="15" fill="rgb(244,77,30)" fg:x="3783" fg:w="1"/><text x="99.5674%" y="159.50"></text></g><g><title>entity_centered::simulation::simulation (3,584 samples, 94.09%)</title><rect x="5.2770%" y="581" width="94.0929%" height="15" fill="rgb(218,69,12)" fg:x="201" fg:w="3584"/><text x="5.5270%" y="591.50">entity_centered::simulation::simulation</text></g><g><title>entity_centered::simulation::group (1,859 samples, 48.81%)</title><rect x="50.5645%" y="565" width="48.8055%" height="15" fill="rgb(212,87,7)" fg:x="1926" fg:w="1859"/><text x="50.8145%" y="575.50">entity_centered::simulation::group</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (7 samples, 0.18%)</title><rect x="99.1861%" y="549" width="0.1838%" height="15" fill="rgb(245,114,25)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7 samples, 0.18%)</title><rect x="99.1861%" y="533" width="0.1838%" height="15" fill="rgb(210,61,42)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.18%)</title><rect x="99.1861%" y="517" width="0.1838%" height="15" fill="rgb(211,52,33)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (7 samples, 0.18%)</title><rect x="99.1861%" y="501" width="0.1838%" height="15" fill="rgb(234,58,33)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (7 samples, 0.18%)</title><rect x="99.1861%" y="485" width="0.1838%" height="15" fill="rgb(220,115,36)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (7 samples, 0.18%)</title><rect x="99.1861%" y="469" width="0.1838%" height="15" fill="rgb(243,153,54)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (7 samples, 0.18%)</title><rect x="99.1861%" y="453" width="0.1838%" height="15" fill="rgb(251,47,18)" fg:x="3778" fg:w="7"/><text x="99.4361%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (4 samples, 0.11%)</title><rect x="99.2649%" y="437" width="0.1050%" height="15" fill="rgb(242,102,42)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="447.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="421" width="0.1050%" height="15" fill="rgb(234,31,38)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="431.50"></text></g><g><title>&lt;allocator_api2::stable::alloc::global::Global as allocator_api2::stable::alloc::Allocator&gt;::allocate (4 samples, 0.11%)</title><rect x="99.2649%" y="405" width="0.1050%" height="15" fill="rgb(221,117,51)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="415.50"></text></g><g><title>allocator_api2::stable::alloc::global::Global::alloc_impl (4 samples, 0.11%)</title><rect x="99.2649%" y="389" width="0.1050%" height="15" fill="rgb(212,20,18)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="399.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="373" width="0.1050%" height="15" fill="rgb(245,133,36)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="383.50"></text></g><g><title>__rust_alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="357" width="0.1050%" height="15" fill="rgb(212,6,19)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="367.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="341" width="0.1050%" height="15" fill="rgb(218,1,36)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="351.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_fallback (4 samples, 0.11%)</title><rect x="99.2649%" y="325" width="0.1050%" height="15" fill="rgb(246,84,54)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="335.50"></text></g><g><title>_mi_heap_malloc_zero (4 samples, 0.11%)</title><rect x="99.2649%" y="309" width="0.1050%" height="15" fill="rgb(242,110,6)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="319.50"></text></g><g><title>_mi_heap_malloc_zero_ex (4 samples, 0.11%)</title><rect x="99.2649%" y="293" width="0.1050%" height="15" fill="rgb(214,47,5)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="303.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.11%)</title><rect x="99.2649%" y="277" width="0.1050%" height="15" fill="rgb(218,159,25)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="287.50"></text></g><g><title>mi_find_page (4 samples, 0.11%)</title><rect x="99.2649%" y="261" width="0.1050%" height="15" fill="rgb(215,211,28)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="271.50"></text></g><g><title>mi_large_huge_page_alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="245" width="0.1050%" height="15" fill="rgb(238,59,32)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="255.50"></text></g><g><title>mi_page_fresh_alloc (4 samples, 0.11%)</title><rect x="99.2649%" y="229" width="0.1050%" height="15" fill="rgb(226,82,3)" fg:x="3781" fg:w="4"/><text x="99.5149%" y="239.50"></text></g><g><title>mi_page_queue_push (1 samples, 0.03%)</title><rect x="99.3437%" y="213" width="0.0263%" height="15" fill="rgb(240,164,32)" fg:x="3784" fg:w="1"/><text x="99.5937%" y="223.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry (1 samples, 0.03%)</title><rect x="99.3699%" y="581" width="0.0263%" height="15" fill="rgb(232,46,7)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="99.3699%" y="565" width="0.0263%" height="15" fill="rgb(229,129,53)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="99.3699%" y="549" width="0.0263%" height="15" fill="rgb(234,188,29)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="99.3699%" y="533" width="0.0263%" height="15" fill="rgb(246,141,4)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="99.3699%" y="517" width="0.0263%" height="15" fill="rgb(229,23,39)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="99.3699%" y="501" width="0.0263%" height="15" fill="rgb(206,12,3)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.03%)</title><rect x="99.3699%" y="485" width="0.0263%" height="15" fill="rgb(252,226,20)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="99.3699%" y="469" width="0.0263%" height="15" fill="rgb(216,123,35)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="99.3699%" y="453" width="0.0263%" height="15" fill="rgb(212,68,40)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="99.3699%" y="437" width="0.0263%" height="15" fill="rgb(254,125,32)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="99.3699%" y="421" width="0.0263%" height="15" fill="rgb(253,97,22)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="431.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry::_{{closure}} (1 samples, 0.03%)</title><rect x="99.3699%" y="405" width="0.0263%" height="15" fill="rgb(241,101,14)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.03%)</title><rect x="99.3699%" y="389" width="0.0263%" height="15" fill="rgb(238,103,29)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.03%)</title><rect x="99.3699%" y="373" width="0.0263%" height="15" fill="rgb(233,195,47)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.03%)</title><rect x="99.3699%" y="357" width="0.0263%" height="15" fill="rgb(246,218,30)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="99.3699%" y="341" width="0.0263%" height="15" fill="rgb(219,145,47)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="99.3699%" y="325" width="0.0263%" height="15" fill="rgb(243,12,26)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="99.3699%" y="309" width="0.0263%" height="15" fill="rgb(214,87,16)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (1 samples, 0.03%)</title><rect x="99.3699%" y="293" width="0.0263%" height="15" fill="rgb(208,99,42)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="303.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry::_{{closure}}::_{{closure}} (1 samples, 0.03%)</title><rect x="99.3699%" y="277" width="0.0263%" height="15" fill="rgb(253,99,2)" fg:x="3785" fg:w="1"/><text x="99.6199%" y="287.50"></text></g><g><title>indicatif::state::AtomicPosition::allow (1 samples, 0.03%)</title><rect x="99.3962%" y="565" width="0.0263%" height="15" fill="rgb(220,168,23)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.03%)</title><rect x="99.3962%" y="549" width="0.0263%" height="15" fill="rgb(242,38,24)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.03%)</title><rect x="99.3962%" y="533" width="0.0263%" height="15" fill="rgb(225,182,9)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.03%)</title><rect x="99.3962%" y="517" width="0.0263%" height="15" fill="rgb(243,178,37)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="527.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.03%)</title><rect x="99.3962%" y="501" width="0.0263%" height="15" fill="rgb(232,139,19)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="511.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.03%)</title><rect x="99.3962%" y="485" width="0.0263%" height="15" fill="rgb(225,201,24)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.03%)</title><rect x="99.3962%" y="469" width="0.0263%" height="15" fill="rgb(221,47,46)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.03%)</title><rect x="99.3962%" y="453" width="0.0263%" height="15" fill="rgb(249,23,13)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="463.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="99.3962%" y="437" width="0.0263%" height="15" fill="rgb(219,9,5)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="99.3962%" y="421" width="0.0263%" height="15" fill="rgb(254,171,16)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (1 samples, 0.03%)</title><rect x="99.3962%" y="405" width="0.0263%" height="15" fill="rgb(230,171,20)" fg:x="3786" fg:w="1"/><text x="99.6462%" y="415.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (2 samples, 0.05%)</title><rect x="99.3962%" y="581" width="0.0525%" height="15" fill="rgb(210,71,41)" fg:x="3786" fg:w="2"/><text x="99.6462%" y="591.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.03%)</title><rect x="99.4224%" y="565" width="0.0263%" height="15" fill="rgb(206,173,20)" fg:x="3787" fg:w="1"/><text x="99.6724%" y="575.50"></text></g><g><title>std::sys::pal::unix::time::Instant::now (1 samples, 0.03%)</title><rect x="99.4224%" y="549" width="0.0263%" height="15" fill="rgb(233,88,34)" fg:x="3787" fg:w="1"/><text x="99.6724%" y="559.50"></text></g><g><title>__GI___ioctl (1 samples, 0.03%)</title><rect x="99.4487%" y="453" width="0.0263%" height="15" fill="rgb(223,209,46)" fg:x="3788" fg:w="1"/><text x="99.6987%" y="463.50"></text></g><g><title>indicatif::state::BarState::draw (2 samples, 0.05%)</title><rect x="99.4487%" y="533" width="0.0525%" height="15" fill="rgb(250,43,18)" fg:x="3788" fg:w="2"/><text x="99.6987%" y="543.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (2 samples, 0.05%)</title><rect x="99.4487%" y="517" width="0.0525%" height="15" fill="rgb(208,13,10)" fg:x="3788" fg:w="2"/><text x="99.6987%" y="527.50"></text></g><g><title>console::term::Term::size (2 samples, 0.05%)</title><rect x="99.4487%" y="501" width="0.0525%" height="15" fill="rgb(212,200,36)" fg:x="3788" fg:w="2"/><text x="99.6987%" y="511.50"></text></g><g><title>console::term::Term::size_checked (2 samples, 0.05%)</title><rect x="99.4487%" y="485" width="0.0525%" height="15" fill="rgb(225,90,30)" fg:x="3788" fg:w="2"/><text x="99.6987%" y="495.50"></text></g><g><title>console::unix_term::terminal_size (2 samples, 0.05%)</title><rect x="99.4487%" y="469" width="0.0525%" height="15" fill="rgb(236,182,39)" fg:x="3788" fg:w="2"/><text x="99.6987%" y="479.50"></text></g><g><title>__isatty (1 samples, 0.03%)</title><rect x="99.4749%" y="453" width="0.0263%" height="15" fill="rgb(212,144,35)" fg:x="3789" fg:w="1"/><text x="99.7249%" y="463.50"></text></g><g><title>std::panic::catch_unwind (3,637 samples, 95.48%)</title><rect x="4.0693%" y="725" width="95.4844%" height="15" fill="rgb(228,63,44)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,637 samples, 95.48%)</title><rect x="4.0693%" y="709" width="95.4844%" height="15" fill="rgb(228,109,6)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,637 samples, 95.48%)</title><rect x="4.0693%" y="693" width="95.4844%" height="15" fill="rgb(238,117,24)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,637 samples, 95.48%)</title><rect x="4.0693%" y="677" width="95.4844%" height="15" fill="rgb(242,26,26)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,637 samples, 95.48%)</title><rect x="4.0693%" y="661" width="95.4844%" height="15" fill="rgb(221,92,48)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="671.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,637 samples, 95.48%)</title><rect x="4.0693%" y="645" width="95.4844%" height="15" fill="rgb(209,209,32)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,637 samples, 95.48%)</title><rect x="4.0693%" y="629" width="95.4844%" height="15" fill="rgb(221,70,22)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>entity_centered::main (3,637 samples, 95.48%)</title><rect x="4.0693%" y="613" width="95.4844%" height="15" fill="rgb(248,145,5)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="623.50">entity_centered::main</text></g><g><title>entity_centered::simulation::run (3,637 samples, 95.48%)</title><rect x="4.0693%" y="597" width="95.4844%" height="15" fill="rgb(226,116,26)" fg:x="155" fg:w="3637"/><text x="4.3193%" y="607.50">entity_centered::simulation::run</text></g><g><title>indicatif::progress_bar::ProgressBar::tick_inner (4 samples, 0.11%)</title><rect x="99.4487%" y="581" width="0.1050%" height="15" fill="rgb(244,5,17)" fg:x="3788" fg:w="4"/><text x="99.6987%" y="591.50"></text></g><g><title>indicatif::state::BarState::tick (4 samples, 0.11%)</title><rect x="99.4487%" y="565" width="0.1050%" height="15" fill="rgb(252,159,33)" fg:x="3788" fg:w="4"/><text x="99.6987%" y="575.50"></text></g><g><title>indicatif::state::BarState::update_estimate_and_draw (4 samples, 0.11%)</title><rect x="99.4487%" y="549" width="0.1050%" height="15" fill="rgb(206,71,0)" fg:x="3788" fg:w="4"/><text x="99.6987%" y="559.50"></text></g><g><title>indicatif::state::Estimator::record (2 samples, 0.05%)</title><rect x="99.5012%" y="533" width="0.0525%" height="15" fill="rgb(233,118,54)" fg:x="3790" fg:w="2"/><text x="99.7512%" y="543.50"></text></g><g><title>indicatif::state::estimator_weight (2 samples, 0.05%)</title><rect x="99.5012%" y="517" width="0.0525%" height="15" fill="rgb(234,83,48)" fg:x="3790" fg:w="2"/><text x="99.7512%" y="527.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (2 samples, 0.05%)</title><rect x="99.5012%" y="501" width="0.0525%" height="15" fill="rgb(228,3,54)" fg:x="3790" fg:w="2"/><text x="99.7512%" y="511.50"></text></g><g><title>pow@@GLIBC_2.29 (2 samples, 0.05%)</title><rect x="99.5012%" y="485" width="0.0525%" height="15" fill="rgb(226,155,13)" fg:x="3790" fg:w="2"/><text x="99.7512%" y="495.50"></text></g><g><title>__pow_finite@GLIBC_2.15@plt (1 samples, 0.03%)</title><rect x="99.5274%" y="469" width="0.0263%" height="15" fill="rgb(241,28,37)" fg:x="3791" fg:w="1"/><text x="99.7774%" y="479.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (3,638 samples, 95.51%)</title><rect x="4.0693%" y="853" width="95.5106%" height="15" fill="rgb(233,93,10)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="863.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (3,638 samples, 95.51%)</title><rect x="4.0693%" y="837" width="95.5106%" height="15" fill="rgb(225,113,19)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="847.50">__libc_start_call_main</text></g><g><title>main (3,638 samples, 95.51%)</title><rect x="4.0693%" y="821" width="95.5106%" height="15" fill="rgb(241,2,18)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (3,638 samples, 95.51%)</title><rect x="4.0693%" y="805" width="95.5106%" height="15" fill="rgb(228,207,21)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,638 samples, 95.51%)</title><rect x="4.0693%" y="789" width="95.5106%" height="15" fill="rgb(213,211,35)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,638 samples, 95.51%)</title><rect x="4.0693%" y="773" width="95.5106%" height="15" fill="rgb(209,83,10)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,638 samples, 95.51%)</title><rect x="4.0693%" y="757" width="95.5106%" height="15" fill="rgb(209,164,1)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,638 samples, 95.51%)</title><rect x="4.0693%" y="741" width="95.5106%" height="15" fill="rgb(213,184,43)" fg:x="155" fg:w="3638"/><text x="4.3193%" y="751.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.03%)</title><rect x="99.5537%" y="725" width="0.0263%" height="15" fill="rgb(231,61,34)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="735.50"></text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.03%)</title><rect x="99.5537%" y="709" width="0.0263%" height="15" fill="rgb(235,75,3)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="719.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="99.5537%" y="693" width="0.0263%" height="15" fill="rgb(220,106,47)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="99.5537%" y="677" width="0.0263%" height="15" fill="rgb(210,196,33)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="687.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.03%)</title><rect x="99.5537%" y="661" width="0.0263%" height="15" fill="rgb(229,154,42)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="671.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::register_dtor (1 samples, 0.03%)</title><rect x="99.5537%" y="645" width="0.0263%" height="15" fill="rgb(228,114,26)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="655.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.03%)</title><rect x="99.5537%" y="629" width="0.0263%" height="15" fill="rgb(208,144,1)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="639.50"></text></g><g><title>pthread_mutex_lock@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="99.5537%" y="613" width="0.0263%" height="15" fill="rgb(239,112,37)" fg:x="3792" fg:w="1"/><text x="99.8037%" y="623.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.03%)</title><rect x="99.5799%" y="837" width="0.0263%" height="15" fill="rgb(210,96,50)" fg:x="3793" fg:w="1"/><text x="99.8299%" y="847.50"></text></g><g><title>_start (3,645 samples, 95.69%)</title><rect x="3.9380%" y="869" width="95.6944%" height="15" fill="rgb(222,178,2)" fg:x="150" fg:w="3645"/><text x="4.1880%" y="879.50">_start</text></g><g><title>_dl_start (2 samples, 0.05%)</title><rect x="99.5799%" y="853" width="0.0525%" height="15" fill="rgb(226,74,18)" fg:x="3793" fg:w="2"/><text x="99.8299%" y="863.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.6062%" y="837" width="0.0263%" height="15" fill="rgb(225,67,54)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="847.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.6062%" y="821" width="0.0263%" height="15" fill="rgb(251,92,32)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="831.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.6062%" y="805" width="0.0263%" height="15" fill="rgb(228,149,22)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="815.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.6062%" y="789" width="0.0263%" height="15" fill="rgb(243,54,13)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="799.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.6062%" y="773" width="0.0263%" height="15" fill="rgb(243,180,28)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="783.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.6062%" y="757" width="0.0263%" height="15" fill="rgb(208,167,24)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="767.50"></text></g><g><title>open_path (1 samples, 0.03%)</title><rect x="99.6062%" y="741" width="0.0263%" height="15" fill="rgb(245,73,45)" fg:x="3794" fg:w="1"/><text x="99.8562%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::result::Result&lt;(),std::io::error::Error&gt;&gt; (1 samples, 0.03%)</title><rect x="99.6324%" y="869" width="0.0263%" height="15" fill="rgb(237,203,48)" fg:x="3795" fg:w="1"/><text x="99.8824%" y="879.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (12 samples, 0.32%)</title><rect x="99.6587%" y="869" width="0.3150%" height="15" fill="rgb(211,197,16)" fg:x="3796" fg:w="12"/><text x="99.9087%" y="879.50"></text></g><g><title>all (3,809 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(243,99,51)" fg:x="0" fg:w="3809"/><text x="0.2500%" y="911.50"></text></g><g><title>entity_centered (3,809 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(215,123,29)" fg:x="0" fg:w="3809"/><text x="0.2500%" y="895.50">entity_centered</text></g><g><title>thread_count (1 samples, 0.03%)</title><rect x="99.9737%" y="869" width="0.0263%" height="15" fill="rgb(239,186,37)" fg:x="3808" fg:w="1"/><text x="100.2237%" y="879.50"></text></g><g><title>mi_page_free_list_extend (1 samples, 0.03%)</title><rect x="99.9737%" y="853" width="0.0263%" height="15" fill="rgb(252,136,39)" fg:x="3808" fg:w="1"/><text x="100.2237%" y="863.50"></text></g></svg></svg>