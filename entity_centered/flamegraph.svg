<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="4063"><g><title>&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="0.0000%" y="869" width="0.0246%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="879.50"></text></g><g><title>[[stack]] (1 samples, 0.02%)</title><rect x="0.0246%" y="869" width="0.0246%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2746%" y="879.50"></text></g><g><title>_mi_arena_memid_is_suitable (1 samples, 0.02%)</title><rect x="0.0246%" y="853" width="0.0246%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2746%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.0492%" y="853" width="0.0246%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2992%" y="863.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (2 samples, 0.05%)</title><rect x="0.0738%" y="853" width="0.0492%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="2"/><text x="0.3238%" y="863.50"></text></g><g><title>[anon] (23 samples, 0.57%)</title><rect x="0.0492%" y="869" width="0.5661%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="23"/><text x="0.2992%" y="879.50"></text></g><g><title>fastrand::global_rng::f32 (20 samples, 0.49%)</title><rect x="0.1231%" y="853" width="0.4922%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="20"/><text x="0.3731%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.15%)</title><rect x="0.6153%" y="725" width="0.1477%" height="15" fill="rgb(228,23,34)" fg:x="25" fg:w="6"/><text x="0.8653%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (6 samples, 0.15%)</title><rect x="0.6153%" y="709" width="0.1477%" height="15" fill="rgb(218,30,26)" fg:x="25" fg:w="6"/><text x="0.8653%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.15%)</title><rect x="0.6153%" y="693" width="0.1477%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="6"/><text x="0.8653%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (6 samples, 0.15%)</title><rect x="0.6153%" y="677" width="0.1477%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="6"/><text x="0.8653%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.15%)</title><rect x="0.6153%" y="661" width="0.1477%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="6"/><text x="0.8653%" y="671.50"></text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}} (6 samples, 0.15%)</title><rect x="0.6153%" y="645" width="0.1477%" height="15" fill="rgb(216,20,37)" fg:x="25" fg:w="6"/><text x="0.8653%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.15%)</title><rect x="0.6153%" y="629" width="0.1477%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="6"/><text x="0.8653%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.15%)</title><rect x="0.6153%" y="613" width="0.1477%" height="15" fill="rgb(217,207,13)" fg:x="25" fg:w="6"/><text x="0.8653%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.15%)</title><rect x="0.6153%" y="597" width="0.1477%" height="15" fill="rgb(231,73,38)" fg:x="25" fg:w="6"/><text x="0.8653%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.15%)</title><rect x="0.6153%" y="581" width="0.1477%" height="15" fill="rgb(225,20,46)" fg:x="25" fg:w="6"/><text x="0.8653%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.15%)</title><rect x="0.6153%" y="565" width="0.1477%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="6"/><text x="0.8653%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.15%)</title><rect x="0.6153%" y="549" width="0.1477%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="6"/><text x="0.8653%" y="559.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.15%)</title><rect x="0.6153%" y="533" width="0.1477%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="6"/><text x="0.8653%" y="543.50"></text></g><g><title>__rust_alloc (6 samples, 0.15%)</title><rect x="0.6153%" y="517" width="0.1477%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="6"/><text x="0.8653%" y="527.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (6 samples, 0.15%)</title><rect x="0.6153%" y="501" width="0.1477%" height="15" fill="rgb(235,183,28)" fg:x="25" fg:w="6"/><text x="0.8653%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.10%)</title><rect x="0.7630%" y="709" width="0.0984%" height="15" fill="rgb(221,5,38)" fg:x="31" fg:w="4"/><text x="1.0130%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="0.7630%" y="693" width="0.0984%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="4"/><text x="1.0130%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (4 samples, 0.10%)</title><rect x="0.7630%" y="677" width="0.0984%" height="15" fill="rgb(241,131,45)" fg:x="31" fg:w="4"/><text x="1.0130%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.10%)</title><rect x="0.7630%" y="661" width="0.0984%" height="15" fill="rgb(249,31,29)" fg:x="31" fg:w="4"/><text x="1.0130%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.10%)</title><rect x="0.7630%" y="645" width="0.0984%" height="15" fill="rgb(225,111,53)" fg:x="31" fg:w="4"/><text x="1.0130%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (4 samples, 0.10%)</title><rect x="0.7630%" y="629" width="0.0984%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="4"/><text x="1.0130%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (4 samples, 0.10%)</title><rect x="0.7630%" y="613" width="0.0984%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="4"/><text x="1.0130%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.44%)</title><rect x="0.6153%" y="789" width="0.4430%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="18"/><text x="0.8653%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (18 samples, 0.44%)</title><rect x="0.6153%" y="773" width="0.4430%" height="15" fill="rgb(209,103,24)" fg:x="25" fg:w="18"/><text x="0.8653%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.44%)</title><rect x="0.6153%" y="757" width="0.4430%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="18"/><text x="0.8653%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.44%)</title><rect x="0.6153%" y="741" width="0.4430%" height="15" fill="rgb(213,181,19)" fg:x="25" fg:w="18"/><text x="0.8653%" y="751.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (12 samples, 0.30%)</title><rect x="0.7630%" y="725" width="0.2953%" height="15" fill="rgb(254,191,54)" fg:x="31" fg:w="12"/><text x="1.0130%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (8 samples, 0.20%)</title><rect x="0.8614%" y="709" width="0.1969%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="8"/><text x="1.1114%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt; (8 samples, 0.20%)</title><rect x="0.8614%" y="693" width="0.1969%" height="15" fill="rgb(233,36,39)" fg:x="35" fg:w="8"/><text x="1.1114%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt; (8 samples, 0.20%)</title><rect x="0.8614%" y="677" width="0.1969%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="8"/><text x="1.1114%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (8 samples, 0.20%)</title><rect x="0.8614%" y="661" width="0.1969%" height="15" fill="rgb(245,192,40)" fg:x="35" fg:w="8"/><text x="1.1114%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (8 samples, 0.20%)</title><rect x="0.8614%" y="645" width="0.1969%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="8"/><text x="1.1114%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.20%)</title><rect x="0.8614%" y="629" width="0.1969%" height="15" fill="rgb(232,182,51)" fg:x="35" fg:w="8"/><text x="1.1114%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.20%)</title><rect x="0.8614%" y="613" width="0.1969%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="8"/><text x="1.1114%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.20%)</title><rect x="0.8614%" y="597" width="0.1969%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="8"/><text x="1.1114%" y="607.50"></text></g><g><title>__rust_dealloc (8 samples, 0.20%)</title><rect x="0.8614%" y="581" width="0.1969%" height="15" fill="rgb(235,93,37)" fg:x="35" fg:w="8"/><text x="1.1114%" y="591.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (8 samples, 0.20%)</title><rect x="0.8614%" y="565" width="0.1969%" height="15" fill="rgb(213,116,39)" fg:x="35" fg:w="8"/><text x="1.1114%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (31 samples, 0.76%)</title><rect x="0.6153%" y="853" width="0.7630%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="31"/><text x="0.8653%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (31 samples, 0.76%)</title><rect x="0.6153%" y="837" width="0.7630%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="31"/><text x="0.8653%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.76%)</title><rect x="0.6153%" y="821" width="0.7630%" height="15" fill="rgb(218,138,4)" fg:x="25" fg:w="31"/><text x="0.8653%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.76%)</title><rect x="0.6153%" y="805" width="0.7630%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="31"/><text x="0.8653%" y="815.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (13 samples, 0.32%)</title><rect x="1.0583%" y="789" width="0.3200%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="13"/><text x="1.3083%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (13 samples, 0.32%)</title><rect x="1.0583%" y="773" width="0.3200%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="13"/><text x="1.3083%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt; (13 samples, 0.32%)</title><rect x="1.0583%" y="757" width="0.3200%" height="15" fill="rgb(225,35,8)" fg:x="43" fg:w="13"/><text x="1.3083%" y="767.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.32%)</title><rect x="1.0583%" y="741" width="0.3200%" height="15" fill="rgb(250,213,24)" fg:x="43" fg:w="13"/><text x="1.3083%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;entity_centered::molecule::Molecule,alloc::alloc::Global&gt;&gt; (13 samples, 0.32%)</title><rect x="1.0583%" y="725" width="0.3200%" height="15" fill="rgb(247,123,22)" fg:x="43" fg:w="13"/><text x="1.3083%" y="735.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.32%)</title><rect x="1.0583%" y="709" width="0.3200%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="13"/><text x="1.3083%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::molecule::Molecule&gt;&gt; (13 samples, 0.32%)</title><rect x="1.0583%" y="693" width="0.3200%" height="15" fill="rgb(231,145,46)" fg:x="43" fg:w="13"/><text x="1.3083%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.32%)</title><rect x="1.0583%" y="677" width="0.3200%" height="15" fill="rgb(251,118,11)" fg:x="43" fg:w="13"/><text x="1.3083%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.32%)</title><rect x="1.0583%" y="661" width="0.3200%" height="15" fill="rgb(217,147,25)" fg:x="43" fg:w="13"/><text x="1.3083%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.32%)</title><rect x="1.0583%" y="645" width="0.3200%" height="15" fill="rgb(247,81,37)" fg:x="43" fg:w="13"/><text x="1.3083%" y="655.50"></text></g><g><title>__rust_dealloc (13 samples, 0.32%)</title><rect x="1.0583%" y="629" width="0.3200%" height="15" fill="rgb(209,12,38)" fg:x="43" fg:w="13"/><text x="1.3083%" y="639.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.32%)</title><rect x="1.0583%" y="613" width="0.3200%" height="15" fill="rgb(227,1,9)" fg:x="43" fg:w="13"/><text x="1.3083%" y="623.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="1.3783%" y="853" width="0.0246%" height="15" fill="rgb(248,47,43)" fg:x="56" fg:w="1"/><text x="1.6283%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="1.4029%" y="853" width="0.0246%" height="15" fill="rgb(221,10,30)" fg:x="57" fg:w="1"/><text x="1.6529%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="1.4029%" y="837" width="0.0246%" height="15" fill="rgb(210,229,1)" fg:x="57" fg:w="1"/><text x="1.6529%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="1.4029%" y="821" width="0.0246%" height="15" fill="rgb(222,148,37)" fg:x="57" fg:w="1"/><text x="1.6529%" y="831.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="1.4029%" y="805" width="0.0246%" height="15" fill="rgb(234,67,33)" fg:x="57" fg:w="1"/><text x="1.6529%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (14 samples, 0.34%)</title><rect x="1.4275%" y="853" width="0.3446%" height="15" fill="rgb(247,98,35)" fg:x="58" fg:w="14"/><text x="1.6775%" y="863.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (1 samples, 0.02%)</title><rect x="1.7721%" y="853" width="0.0246%" height="15" fill="rgb(247,138,52)" fg:x="72" fg:w="1"/><text x="2.0221%" y="863.50"></text></g><g><title>entity_centered::simulation::detect_collision (17 samples, 0.42%)</title><rect x="1.7967%" y="821" width="0.4184%" height="15" fill="rgb(213,79,30)" fg:x="73" fg:w="17"/><text x="2.0467%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="805" width="0.4184%" height="15" fill="rgb(246,177,23)" fg:x="73" fg:w="17"/><text x="2.0467%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="789" width="0.4184%" height="15" fill="rgb(230,62,27)" fg:x="73" fg:w="17"/><text x="2.0467%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt;&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="773" width="0.4184%" height="15" fill="rgb(216,154,8)" fg:x="73" fg:w="17"/><text x="2.0467%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.42%)</title><rect x="1.7967%" y="757" width="0.4184%" height="15" fill="rgb(244,35,45)" fg:x="73" fg:w="17"/><text x="2.0467%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (17 samples, 0.42%)</title><rect x="1.7967%" y="741" width="0.4184%" height="15" fill="rgb(251,115,12)" fg:x="73" fg:w="17"/><text x="2.0467%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (17 samples, 0.42%)</title><rect x="1.7967%" y="725" width="0.4184%" height="15" fill="rgb(240,54,50)" fg:x="73" fg:w="17"/><text x="2.0467%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (17 samples, 0.42%)</title><rect x="1.7967%" y="709" width="0.4184%" height="15" fill="rgb(233,84,52)" fg:x="73" fg:w="17"/><text x="2.0467%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (17 samples, 0.42%)</title><rect x="1.7967%" y="693" width="0.4184%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="17"/><text x="2.0467%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="677" width="0.4184%" height="15" fill="rgb(249,43,39)" fg:x="73" fg:w="17"/><text x="2.0467%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="661" width="0.4184%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="17"/><text x="2.0467%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (17 samples, 0.42%)</title><rect x="1.7967%" y="645" width="0.4184%" height="15" fill="rgb(236,212,23)" fg:x="73" fg:w="17"/><text x="2.0467%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.42%)</title><rect x="1.7967%" y="629" width="0.4184%" height="15" fill="rgb(242,79,21)" fg:x="73" fg:w="17"/><text x="2.0467%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.42%)</title><rect x="1.7967%" y="613" width="0.4184%" height="15" fill="rgb(211,96,35)" fg:x="73" fg:w="17"/><text x="2.0467%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.42%)</title><rect x="1.7967%" y="597" width="0.4184%" height="15" fill="rgb(253,215,40)" fg:x="73" fg:w="17"/><text x="2.0467%" y="607.50"></text></g><g><title>__rust_dealloc (17 samples, 0.42%)</title><rect x="1.7967%" y="581" width="0.4184%" height="15" fill="rgb(211,81,21)" fg:x="73" fg:w="17"/><text x="2.0467%" y="591.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.42%)</title><rect x="1.7967%" y="565" width="0.4184%" height="15" fill="rgb(208,190,38)" fg:x="73" fg:w="17"/><text x="2.0467%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.52%)</title><rect x="2.2151%" y="789" width="0.5169%" height="15" fill="rgb(235,213,38)" fg:x="90" fg:w="21"/><text x="2.4651%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.52%)</title><rect x="2.2151%" y="773" width="0.5169%" height="15" fill="rgb(237,122,38)" fg:x="90" fg:w="21"/><text x="2.4651%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (21 samples, 0.52%)</title><rect x="2.2151%" y="757" width="0.5169%" height="15" fill="rgb(244,218,35)" fg:x="90" fg:w="21"/><text x="2.4651%" y="767.50"></text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (21 samples, 0.52%)</title><rect x="2.2151%" y="741" width="0.5169%" height="15" fill="rgb(240,68,47)" fg:x="90" fg:w="21"/><text x="2.4651%" y="751.50"></text></g><g><title>entity_centered::vector::Vector3d::get_random_unitary (21 samples, 0.52%)</title><rect x="2.2151%" y="725" width="0.5169%" height="15" fill="rgb(210,16,53)" fg:x="90" fg:w="21"/><text x="2.4651%" y="735.50"></text></g><g><title>[unknown] (105 samples, 2.58%)</title><rect x="0.6153%" y="869" width="2.5843%" height="15" fill="rgb(235,124,12)" fg:x="25" fg:w="105"/><text x="0.8653%" y="879.50">[u..</text></g><g><title>entity_centered::simulation::run (57 samples, 1.40%)</title><rect x="1.7967%" y="853" width="1.4029%" height="15" fill="rgb(224,169,11)" fg:x="73" fg:w="57"/><text x="2.0467%" y="863.50"></text></g><g><title>entity_centered::simulation::simulation (57 samples, 1.40%)</title><rect x="1.7967%" y="837" width="1.4029%" height="15" fill="rgb(250,166,2)" fg:x="73" fg:w="57"/><text x="2.0467%" y="847.50"></text></g><g><title>entity_centered::simulation::group (40 samples, 0.98%)</title><rect x="2.2151%" y="821" width="0.9845%" height="15" fill="rgb(242,216,29)" fg:x="90" fg:w="40"/><text x="2.4651%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.98%)</title><rect x="2.2151%" y="805" width="0.9845%" height="15" fill="rgb(230,116,27)" fg:x="90" fg:w="40"/><text x="2.4651%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.47%)</title><rect x="2.7320%" y="789" width="0.4676%" height="15" fill="rgb(228,99,48)" fg:x="111" fg:w="19"/><text x="2.9820%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (19 samples, 0.47%)</title><rect x="2.7320%" y="773" width="0.4676%" height="15" fill="rgb(253,11,6)" fg:x="111" fg:w="19"/><text x="2.9820%" y="783.50"></text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (19 samples, 0.47%)</title><rect x="2.7320%" y="757" width="0.4676%" height="15" fill="rgb(247,143,39)" fg:x="111" fg:w="19"/><text x="2.9820%" y="767.50"></text></g><g><title>entity_centered::vector::Vector3d::into_vectorint (19 samples, 0.47%)</title><rect x="2.7320%" y="741" width="0.4676%" height="15" fill="rgb(236,97,10)" fg:x="111" fg:w="19"/><text x="2.9820%" y="751.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::floor (19 samples, 0.47%)</title><rect x="2.7320%" y="725" width="0.4676%" height="15" fill="rgb(233,208,19)" fg:x="111" fg:w="19"/><text x="2.9820%" y="735.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.07%)</title><rect x="3.1996%" y="869" width="0.0738%" height="15" fill="rgb(216,164,2)" fg:x="130" fg:w="3"/><text x="3.4496%" y="879.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.07%)</title><rect x="3.1996%" y="853" width="0.0738%" height="15" fill="rgb(220,129,5)" fg:x="130" fg:w="3"/><text x="3.4496%" y="863.50"></text></g><g><title>__floorf_sse41 (16 samples, 0.39%)</title><rect x="3.2734%" y="853" width="0.3938%" height="15" fill="rgb(242,17,10)" fg:x="133" fg:w="16"/><text x="3.5234%" y="863.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (22 samples, 0.54%)</title><rect x="3.6672%" y="853" width="0.5415%" height="15" fill="rgb(242,107,0)" fg:x="149" fg:w="22"/><text x="3.9172%" y="863.50"></text></g><g><title>fastrand::global_rng::f32 (22 samples, 0.54%)</title><rect x="4.2087%" y="853" width="0.5415%" height="15" fill="rgb(251,28,31)" fg:x="171" fg:w="22"/><text x="4.4587%" y="863.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (1 samples, 0.02%)</title><rect x="4.7502%" y="853" width="0.0246%" height="15" fill="rgb(233,223,10)" fg:x="193" fg:w="1"/><text x="5.0002%" y="863.50"></text></g><g><title>_mi_heap_main (66 samples, 1.62%)</title><rect x="3.2734%" y="869" width="1.6244%" height="15" fill="rgb(215,21,27)" fg:x="133" fg:w="66"/><text x="3.5234%" y="879.50"></text></g><g><title>mi_heap_malloc_aligned (5 samples, 0.12%)</title><rect x="4.7748%" y="853" width="0.1231%" height="15" fill="rgb(232,23,21)" fg:x="194" fg:w="5"/><text x="5.0248%" y="863.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.05%)</title><rect x="4.8979%" y="869" width="0.0492%" height="15" fill="rgb(244,5,23)" fg:x="199" fg:w="2"/><text x="5.1479%" y="879.50"></text></g><g><title>core::ptr::read (24 samples, 0.59%)</title><rect x="5.2670%" y="485" width="0.5907%" height="15" fill="rgb(226,81,46)" fg:x="214" fg:w="24"/><text x="5.5170%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (43 samples, 1.06%)</title><rect x="5.0948%" y="581" width="1.0583%" height="15" fill="rgb(247,70,30)" fg:x="207" fg:w="43"/><text x="5.3448%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (43 samples, 1.06%)</title><rect x="5.0948%" y="565" width="1.0583%" height="15" fill="rgb(212,68,19)" fg:x="207" fg:w="43"/><text x="5.3448%" y="575.50"></text></g><g><title>core::mem::swap (36 samples, 0.89%)</title><rect x="5.2670%" y="549" width="0.8860%" height="15" fill="rgb(240,187,13)" fg:x="214" fg:w="36"/><text x="5.5170%" y="559.50"></text></g><g><title>core::ptr::swap_nonoverlapping (36 samples, 0.89%)</title><rect x="5.2670%" y="533" width="0.8860%" height="15" fill="rgb(223,113,26)" fg:x="214" fg:w="36"/><text x="5.5170%" y="543.50"></text></g><g><title>core::ptr::swap_nonoverlapping_simple_untyped (36 samples, 0.89%)</title><rect x="5.2670%" y="517" width="0.8860%" height="15" fill="rgb(206,192,2)" fg:x="214" fg:w="36"/><text x="5.5170%" y="527.50"></text></g><g><title>core::mem::swap_simple (36 samples, 0.89%)</title><rect x="5.2670%" y="501" width="0.8860%" height="15" fill="rgb(241,108,4)" fg:x="214" fg:w="36"/><text x="5.5170%" y="511.50"></text></g><g><title>core::ptr::write (12 samples, 0.30%)</title><rect x="5.8577%" y="485" width="0.2953%" height="15" fill="rgb(247,173,49)" fg:x="238" fg:w="12"/><text x="6.1077%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (7 samples, 0.17%)</title><rect x="6.7684%" y="469" width="0.1723%" height="15" fill="rgb(224,114,35)" fg:x="275" fg:w="7"/><text x="7.0184%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.17%)</title><rect x="6.7684%" y="453" width="0.1723%" height="15" fill="rgb(245,159,27)" fg:x="275" fg:w="7"/><text x="7.0184%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="8.2698%" y="261" width="0.0246%" height="15" fill="rgb(245,172,44)" fg:x="336" fg:w="1"/><text x="8.5198%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="8.1959%" y="277" width="0.1723%" height="15" fill="rgb(236,23,11)" fg:x="333" fg:w="7"/><text x="8.4459%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (3 samples, 0.07%)</title><rect x="8.2944%" y="261" width="0.0738%" height="15" fill="rgb(205,117,38)" fg:x="337" fg:w="3"/><text x="8.5444%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (12 samples, 0.30%)</title><rect x="8.3682%" y="277" width="0.2953%" height="15" fill="rgb(237,72,25)" fg:x="340" fg:w="12"/><text x="8.6182%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.30%)</title><rect x="8.3682%" y="261" width="0.2953%" height="15" fill="rgb(244,70,9)" fg:x="340" fg:w="12"/><text x="8.6182%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.10%)</title><rect x="8.5651%" y="245" width="0.0984%" height="15" fill="rgb(217,125,39)" fg:x="348" fg:w="4"/><text x="8.8151%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.05%)</title><rect x="8.6635%" y="277" width="0.0492%" height="15" fill="rgb(235,36,10)" fg:x="352" fg:w="2"/><text x="8.9135%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.05%)</title><rect x="8.6635%" y="261" width="0.0492%" height="15" fill="rgb(251,123,47)" fg:x="352" fg:w="2"/><text x="8.9135%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.96%)</title><rect x="7.8267%" y="357" width="0.9599%" height="15" fill="rgb(221,13,13)" fg:x="318" fg:w="39"/><text x="8.0767%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.96%)</title><rect x="7.8267%" y="341" width="0.9599%" height="15" fill="rgb(238,131,9)" fg:x="318" fg:w="39"/><text x="8.0767%" y="351.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.96%)</title><rect x="7.8267%" y="325" width="0.9599%" height="15" fill="rgb(211,50,8)" fg:x="318" fg:w="39"/><text x="8.0767%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.96%)</title><rect x="7.8267%" y="309" width="0.9599%" height="15" fill="rgb(245,182,24)" fg:x="318" fg:w="39"/><text x="8.0767%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (24 samples, 0.59%)</title><rect x="8.1959%" y="293" width="0.5907%" height="15" fill="rgb(242,14,37)" fg:x="333" fg:w="24"/><text x="8.4459%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.07%)</title><rect x="8.7128%" y="277" width="0.0738%" height="15" fill="rgb(246,228,12)" fg:x="354" fg:w="3"/><text x="8.9628%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.07%)</title><rect x="8.7128%" y="261" width="0.0738%" height="15" fill="rgb(213,55,15)" fg:x="354" fg:w="3"/><text x="8.9628%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.07%)</title><rect x="8.7128%" y="245" width="0.0738%" height="15" fill="rgb(209,9,3)" fg:x="354" fg:w="3"/><text x="8.9628%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (23 samples, 0.57%)</title><rect x="9.0573%" y="309" width="0.5661%" height="15" fill="rgb(230,59,30)" fg:x="368" fg:w="23"/><text x="9.3073%" y="319.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="10.3864%" y="149" width="0.0246%" height="15" fill="rgb(209,121,21)" fg:x="422" fg:w="1"/><text x="10.6364%" y="159.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.05%)</title><rect x="10.3864%" y="165" width="0.0492%" height="15" fill="rgb(220,109,13)" fg:x="422" fg:w="2"/><text x="10.6364%" y="175.50"></text></g><g><title>mi_find_page (1 samples, 0.02%)</title><rect x="10.4110%" y="149" width="0.0246%" height="15" fill="rgb(232,18,1)" fg:x="423" fg:w="1"/><text x="10.6610%" y="159.50"></text></g><g><title>mi_find_free_page (1 samples, 0.02%)</title><rect x="10.4110%" y="133" width="0.0246%" height="15" fill="rgb(215,41,42)" fg:x="423" fg:w="1"/><text x="10.6610%" y="143.50"></text></g><g><title>_mi_page_free_collect (1 samples, 0.02%)</title><rect x="10.4110%" y="117" width="0.0246%" height="15" fill="rgb(224,123,36)" fg:x="423" fg:w="1"/><text x="10.6610%" y="127.50"></text></g><g><title>mi_page_thread_free (1 samples, 0.02%)</title><rect x="10.4110%" y="101" width="0.0246%" height="15" fill="rgb(240,125,3)" fg:x="423" fg:w="1"/><text x="10.6610%" y="111.50"></text></g><g><title>_mi_is_power_of_two (14 samples, 0.34%)</title><rect x="10.6571%" y="149" width="0.3446%" height="15" fill="rgb(205,98,50)" fg:x="433" fg:w="14"/><text x="10.9071%" y="159.50"></text></g><g><title>_mi_heap_get_free_small_page (7 samples, 0.17%)</title><rect x="11.0017%" y="117" width="0.1723%" height="15" fill="rgb(205,185,37)" fg:x="447" fg:w="7"/><text x="11.2517%" y="127.50"></text></g><g><title>_mi_wsize_from_size (2 samples, 0.05%)</title><rect x="11.1248%" y="101" width="0.0492%" height="15" fill="rgb(238,207,15)" fg:x="452" fg:w="2"/><text x="11.3748%" y="111.50"></text></g><g><title>mi_heap_malloc_aligned (67 samples, 1.65%)</title><rect x="10.4356%" y="165" width="1.6490%" height="15" fill="rgb(213,199,42)" fg:x="424" fg:w="67"/><text x="10.6856%" y="175.50"></text></g><g><title>mi_heap_malloc_small (44 samples, 1.08%)</title><rect x="11.0017%" y="149" width="1.0829%" height="15" fill="rgb(235,201,11)" fg:x="447" fg:w="44"/><text x="11.2517%" y="159.50"></text></g><g><title>mi_heap_malloc_small_zero (44 samples, 1.08%)</title><rect x="11.0017%" y="133" width="1.0829%" height="15" fill="rgb(207,46,11)" fg:x="447" fg:w="44"/><text x="11.2517%" y="143.50"></text></g><g><title>_mi_page_malloc (37 samples, 0.91%)</title><rect x="11.1740%" y="117" width="0.9107%" height="15" fill="rgb(241,35,35)" fg:x="454" fg:w="37"/><text x="11.4240%" y="127.50"></text></g><g><title>__rust_alloc (97 samples, 2.39%)</title><rect x="10.0911%" y="197" width="2.3874%" height="15" fill="rgb(243,32,47)" fg:x="410" fg:w="97"/><text x="10.3411%" y="207.50">__..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (97 samples, 2.39%)</title><rect x="10.0911%" y="181" width="2.3874%" height="15" fill="rgb(247,202,23)" fg:x="410" fg:w="97"/><text x="10.3411%" y="191.50">&lt;m..</text></g><g><title>mi_malloc_aligned (16 samples, 0.39%)</title><rect x="12.0847%" y="165" width="0.3938%" height="15" fill="rgb(219,102,11)" fg:x="491" fg:w="16"/><text x="12.3347%" y="175.50"></text></g><g><title>mi_prim_get_default_heap (3 samples, 0.07%)</title><rect x="12.4046%" y="149" width="0.0738%" height="15" fill="rgb(243,110,44)" fg:x="504" fg:w="3"/><text x="12.6546%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (98 samples, 2.41%)</title><rect x="10.0911%" y="245" width="2.4120%" height="15" fill="rgb(222,74,54)" fg:x="410" fg:w="98"/><text x="10.3411%" y="255.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (98 samples, 2.41%)</title><rect x="10.0911%" y="229" width="2.4120%" height="15" fill="rgb(216,99,12)" fg:x="410" fg:w="98"/><text x="10.3411%" y="239.50">al..</text></g><g><title>alloc::alloc::alloc (98 samples, 2.41%)</title><rect x="10.0911%" y="213" width="2.4120%" height="15" fill="rgb(226,22,26)" fg:x="410" fg:w="98"/><text x="10.3411%" y="223.50">al..</text></g><g><title>core::ptr::read_volatile (1 samples, 0.02%)</title><rect x="12.4785%" y="197" width="0.0246%" height="15" fill="rgb(217,163,10)" fg:x="507" fg:w="1"/><text x="12.7285%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (196 samples, 4.82%)</title><rect x="7.8267%" y="373" width="4.8240%" height="15" fill="rgb(213,25,53)" fg:x="318" fg:w="196"/><text x="8.0767%" y="383.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (157 samples, 3.86%)</title><rect x="8.7866%" y="357" width="3.8641%" height="15" fill="rgb(252,105,26)" fg:x="357" fg:w="157"/><text x="9.0366%" y="367.50">core..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (150 samples, 3.69%)</title><rect x="8.9589%" y="341" width="3.6919%" height="15" fill="rgb(220,39,43)" fg:x="364" fg:w="150"/><text x="9.2089%" y="351.50">core..</text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}} (148 samples, 3.64%)</title><rect x="9.0081%" y="325" width="3.6426%" height="15" fill="rgb(229,68,48)" fg:x="366" fg:w="148"/><text x="9.2581%" y="335.50">enti..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (123 samples, 3.03%)</title><rect x="9.6234%" y="309" width="3.0273%" height="15" fill="rgb(252,8,32)" fg:x="391" fg:w="123"/><text x="9.8734%" y="319.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (123 samples, 3.03%)</title><rect x="9.6234%" y="293" width="3.0273%" height="15" fill="rgb(223,20,43)" fg:x="391" fg:w="123"/><text x="9.8734%" y="303.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 3.03%)</title><rect x="9.6234%" y="277" width="3.0273%" height="15" fill="rgb(229,81,49)" fg:x="391" fg:w="123"/><text x="9.8734%" y="287.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 3.03%)</title><rect x="9.6234%" y="261" width="3.0273%" height="15" fill="rgb(236,28,36)" fg:x="391" fg:w="123"/><text x="9.8734%" y="271.50">all..</text></g><g><title>core::alloc::layout::Layout::array (6 samples, 0.15%)</title><rect x="12.5031%" y="245" width="0.1477%" height="15" fill="rgb(249,185,26)" fg:x="508" fg:w="6"/><text x="12.7531%" y="255.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (6 samples, 0.15%)</title><rect x="12.5031%" y="229" width="0.1477%" height="15" fill="rgb(249,174,33)" fg:x="508" fg:w="6"/><text x="12.7531%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (199 samples, 4.90%)</title><rect x="7.8267%" y="405" width="4.8979%" height="15" fill="rgb(233,201,37)" fg:x="318" fg:w="199"/><text x="8.0767%" y="415.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (199 samples, 4.90%)</title><rect x="7.8267%" y="389" width="4.8979%" height="15" fill="rgb(221,78,26)" fg:x="318" fg:w="199"/><text x="8.0767%" y="399.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3 samples, 0.07%)</title><rect x="12.6508%" y="373" width="0.0738%" height="15" fill="rgb(250,127,30)" fg:x="514" fg:w="3"/><text x="12.9008%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.17%)</title><rect x="17.5732%" y="245" width="0.1723%" height="15" fill="rgb(230,49,44)" fg:x="714" fg:w="7"/><text x="17.8232%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.17%)</title><rect x="17.5732%" y="229" width="0.1723%" height="15" fill="rgb(229,67,23)" fg:x="714" fg:w="7"/><text x="17.8232%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (7 samples, 0.17%)</title><rect x="17.5732%" y="213" width="0.1723%" height="15" fill="rgb(249,83,47)" fg:x="714" fg:w="7"/><text x="17.8232%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (8 samples, 0.20%)</title><rect x="17.7455%" y="245" width="0.1969%" height="15" fill="rgb(215,43,3)" fg:x="721" fg:w="8"/><text x="17.9955%" y="255.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (8 samples, 0.20%)</title><rect x="17.7455%" y="229" width="0.1969%" height="15" fill="rgb(238,154,13)" fg:x="721" fg:w="8"/><text x="17.9955%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (8 samples, 0.20%)</title><rect x="17.7455%" y="213" width="0.1969%" height="15" fill="rgb(219,56,2)" fg:x="721" fg:w="8"/><text x="17.9955%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.20%)</title><rect x="18.9023%" y="229" width="0.1969%" height="15" fill="rgb(233,0,4)" fg:x="768" fg:w="8"/><text x="19.1523%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::nth (7 samples, 0.17%)</title><rect x="18.9269%" y="213" width="0.1723%" height="15" fill="rgb(235,30,7)" fg:x="769" fg:w="7"/><text x="19.1769%" y="223.50"></text></g><g><title>entity_centered::collided_molecule::CollidedMolecules::get_elements (9 samples, 0.22%)</title><rect x="19.7637%" y="213" width="0.2215%" height="15" fill="rgb(250,79,13)" fg:x="803" fg:w="9"/><text x="20.0137%" y="223.50"></text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="23.6279%" y="85" width="0.0246%" height="15" fill="rgb(211,146,34)" fg:x="960" fg:w="1"/><text x="23.8779%" y="95.50"></text></g><g><title>_mi_malloc_generic (4 samples, 0.10%)</title><rect x="23.6279%" y="101" width="0.0984%" height="15" fill="rgb(228,22,38)" fg:x="960" fg:w="4"/><text x="23.8779%" y="111.50"></text></g><g><title>mi_find_page (3 samples, 0.07%)</title><rect x="23.6525%" y="85" width="0.0738%" height="15" fill="rgb(235,168,5)" fg:x="961" fg:w="3"/><text x="23.9025%" y="95.50"></text></g><g><title>mi_find_free_page (3 samples, 0.07%)</title><rect x="23.6525%" y="69" width="0.0738%" height="15" fill="rgb(221,155,16)" fg:x="961" fg:w="3"/><text x="23.9025%" y="79.50"></text></g><g><title>mi_heap_malloc_aligned (81 samples, 1.99%)</title><rect x="23.7263%" y="101" width="1.9936%" height="15" fill="rgb(215,215,53)" fg:x="964" fg:w="81"/><text x="23.9763%" y="111.50">m..</text></g><g><title>mi_heap_malloc_small (60 samples, 1.48%)</title><rect x="24.2432%" y="85" width="1.4767%" height="15" fill="rgb(223,4,10)" fg:x="985" fg:w="60"/><text x="24.4932%" y="95.50"></text></g><g><title>mi_heap_malloc_small_zero (60 samples, 1.48%)</title><rect x="24.2432%" y="69" width="1.4767%" height="15" fill="rgb(234,103,6)" fg:x="985" fg:w="60"/><text x="24.4932%" y="79.50"></text></g><g><title>_mi_page_malloc (60 samples, 1.48%)</title><rect x="24.2432%" y="53" width="1.4767%" height="15" fill="rgb(227,97,0)" fg:x="985" fg:w="60"/><text x="24.4932%" y="63.50"></text></g><g><title>entity_centered::collided_molecule::CollidedMolecules::roll_back (257 samples, 6.33%)</title><rect x="19.9852%" y="213" width="6.3254%" height="15" fill="rgb(234,150,53)" fg:x="812" fg:w="257"/><text x="20.2352%" y="223.50">entity_c..</text></g><g><title>alloc::alloc::exchange_malloc (124 samples, 3.05%)</title><rect x="23.2587%" y="197" width="3.0519%" height="15" fill="rgb(228,201,54)" fg:x="945" fg:w="124"/><text x="23.5087%" y="207.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 2.90%)</title><rect x="23.4063%" y="181" width="2.9043%" height="15" fill="rgb(222,22,37)" fg:x="951" fg:w="118"/><text x="23.6563%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 2.90%)</title><rect x="23.4063%" y="165" width="2.9043%" height="15" fill="rgb(237,53,32)" fg:x="951" fg:w="118"/><text x="23.6563%" y="175.50">al..</text></g><g><title>alloc::alloc::alloc (118 samples, 2.90%)</title><rect x="23.4063%" y="149" width="2.9043%" height="15" fill="rgb(233,25,53)" fg:x="951" fg:w="118"/><text x="23.6563%" y="159.50">al..</text></g><g><title>__rust_alloc (118 samples, 2.90%)</title><rect x="23.4063%" y="133" width="2.9043%" height="15" fill="rgb(210,40,34)" fg:x="951" fg:w="118"/><text x="23.6563%" y="143.50">__..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (118 samples, 2.90%)</title><rect x="23.4063%" y="117" width="2.9043%" height="15" fill="rgb(241,220,44)" fg:x="951" fg:w="118"/><text x="23.6563%" y="127.50">&lt;m..</text></g><g><title>mi_malloc_aligned (24 samples, 0.59%)</title><rect x="25.7199%" y="101" width="0.5907%" height="15" fill="rgb(235,28,35)" fg:x="1045" fg:w="24"/><text x="25.9699%" y="111.50"></text></g><g><title>mi_prim_get_default_heap (12 samples, 0.30%)</title><rect x="26.0153%" y="85" width="0.2953%" height="15" fill="rgb(210,56,17)" fg:x="1057" fg:w="12"/><text x="26.2653%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.25%)</title><rect x="26.6552%" y="149" width="0.2461%" height="15" fill="rgb(224,130,29)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.25%)</title><rect x="26.6552%" y="133" width="0.2461%" height="15" fill="rgb(235,212,8)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.25%)</title><rect x="26.6552%" y="117" width="0.2461%" height="15" fill="rgb(223,33,50)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="127.50"></text></g><g><title>&lt;entity_centered::reaction_registry::CollidedElements as core::hash::Hash&gt;::hash (10 samples, 0.25%)</title><rect x="26.6552%" y="101" width="0.2461%" height="15" fill="rgb(219,149,13)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="111.50"></text></g><g><title>&lt;entity_centered::element::Element as core::hash::Hash&gt;::hash (10 samples, 0.25%)</title><rect x="26.6552%" y="85" width="0.2461%" height="15" fill="rgb(250,156,29)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (10 samples, 0.25%)</title><rect x="26.6552%" y="69" width="0.2461%" height="15" fill="rgb(216,193,19)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="79.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u64 (10 samples, 0.25%)</title><rect x="26.6552%" y="53" width="0.2461%" height="15" fill="rgb(216,135,14)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="63.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (10 samples, 0.25%)</title><rect x="26.6552%" y="37" width="0.2461%" height="15" fill="rgb(241,47,5)" fg:x="1083" fg:w="10"/><text x="26.9052%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="27.2705%" y="101" width="0.0492%" height="15" fill="rgb(233,42,35)" fg:x="1108" fg:w="2"/><text x="27.5205%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="27.2705%" y="85" width="0.0492%" height="15" fill="rgb(231,13,6)" fg:x="1108" fg:w="2"/><text x="27.5205%" y="95.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (2 samples, 0.05%)</title><rect x="27.2705%" y="69" width="0.0492%" height="15" fill="rgb(207,181,40)" fg:x="1108" fg:w="2"/><text x="27.5205%" y="79.50"></text></g><g><title>hashbrown::raw::h2 (13 samples, 0.32%)</title><rect x="27.3197%" y="101" width="0.3200%" height="15" fill="rgb(254,173,49)" fg:x="1110" fg:w="13"/><text x="27.5697%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (101 samples, 2.49%)</title><rect x="27.6397%" y="101" width="2.4858%" height="15" fill="rgb(221,1,38)" fg:x="1123" fg:w="101"/><text x="27.8897%" y="111.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (101 samples, 2.49%)</title><rect x="27.6397%" y="85" width="2.4858%" height="15" fill="rgb(206,124,46)" fg:x="1123" fg:w="101"/><text x="27.8897%" y="95.50">co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (101 samples, 2.49%)</title><rect x="27.6397%" y="69" width="2.4858%" height="15" fill="rgb(249,21,11)" fg:x="1123" fg:w="101"/><text x="27.8897%" y="79.50">co..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (46 samples, 1.13%)</title><rect x="30.1255%" y="101" width="1.1322%" height="15" fill="rgb(222,201,40)" fg:x="1224" fg:w="46"/><text x="30.3755%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (46 samples, 1.13%)</title><rect x="30.1255%" y="85" width="1.1322%" height="15" fill="rgb(235,61,29)" fg:x="1224" fg:w="46"/><text x="30.3755%" y="95.50"></text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::get (210 samples, 5.17%)</title><rect x="26.3106%" y="213" width="5.1686%" height="15" fill="rgb(219,207,3)" fg:x="1069" fg:w="210"/><text x="26.5606%" y="223.50">entity..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (210 samples, 5.17%)</title><rect x="26.3106%" y="197" width="5.1686%" height="15" fill="rgb(222,56,46)" fg:x="1069" fg:w="210"/><text x="26.5606%" y="207.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (210 samples, 5.17%)</title><rect x="26.3106%" y="181" width="5.1686%" height="15" fill="rgb(239,76,54)" fg:x="1069" fg:w="210"/><text x="26.5606%" y="191.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (210 samples, 5.17%)</title><rect x="26.3106%" y="165" width="5.1686%" height="15" fill="rgb(231,124,27)" fg:x="1069" fg:w="210"/><text x="26.5606%" y="175.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (186 samples, 4.58%)</title><rect x="26.9013%" y="149" width="4.5779%" height="15" fill="rgb(249,195,6)" fg:x="1093" fg:w="186"/><text x="27.1513%" y="159.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (186 samples, 4.58%)</title><rect x="26.9013%" y="133" width="4.5779%" height="15" fill="rgb(237,174,47)" fg:x="1093" fg:w="186"/><text x="27.1513%" y="143.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (186 samples, 4.58%)</title><rect x="26.9013%" y="117" width="4.5779%" height="15" fill="rgb(206,201,31)" fg:x="1093" fg:w="186"/><text x="27.1513%" y="127.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (9 samples, 0.22%)</title><rect x="31.2577%" y="101" width="0.2215%" height="15" fill="rgb(231,57,52)" fg:x="1270" fg:w="9"/><text x="31.5077%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.22%)</title><rect x="31.2577%" y="85" width="0.2215%" height="15" fill="rgb(248,177,22)" fg:x="1270" fg:w="9"/><text x="31.5077%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.22%)</title><rect x="31.2577%" y="69" width="0.2215%" height="15" fill="rgb(215,211,37)" fg:x="1270" fg:w="9"/><text x="31.5077%" y="79.50"></text></g><g><title>fastrand::global_rng::RNG::__getit (13 samples, 0.32%)</title><rect x="31.4792%" y="149" width="0.3200%" height="15" fill="rgb(241,128,51)" fg:x="1279" fg:w="13"/><text x="31.7292%" y="159.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (13 samples, 0.32%)</title><rect x="31.4792%" y="133" width="0.3200%" height="15" fill="rgb(227,165,31)" fg:x="1279" fg:w="13"/><text x="31.7292%" y="143.50"></text></g><g><title>std::sys::pal::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (7 samples, 0.17%)</title><rect x="31.6269%" y="117" width="0.1723%" height="15" fill="rgb(228,167,24)" fg:x="1285" fg:w="7"/><text x="31.8769%" y="127.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (7 samples, 0.17%)</title><rect x="31.6269%" y="101" width="0.1723%" height="15" fill="rgb(228,143,12)" fg:x="1285" fg:w="7"/><text x="31.8769%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastrand::global_rng::RestoreOnDrop&gt; (2 samples, 0.05%)</title><rect x="31.7992%" y="133" width="0.0492%" height="15" fill="rgb(249,149,8)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="143.50"></text></g><g><title>&lt;fastrand::global_rng::RestoreOnDrop as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="31.7992%" y="117" width="0.0492%" height="15" fill="rgb(243,35,44)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.05%)</title><rect x="31.7992%" y="101" width="0.0492%" height="15" fill="rgb(246,89,9)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="111.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.05%)</title><rect x="31.7992%" y="85" width="0.0492%" height="15" fill="rgb(233,213,13)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="95.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="31.7992%" y="69" width="0.0492%" height="15" fill="rgb(233,141,41)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="79.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="31.7992%" y="53" width="0.0492%" height="15" fill="rgb(239,167,4)" fg:x="1292" fg:w="2"/><text x="32.0492%" y="63.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits (1 samples, 0.02%)</title><rect x="32.6852%" y="101" width="0.0246%" height="15" fill="rgb(209,217,16)" fg:x="1328" fg:w="1"/><text x="32.9352%" y="111.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits::rt_u32_to_f32 (1 samples, 0.02%)</title><rect x="32.6852%" y="85" width="0.0246%" height="15" fill="rgb(219,88,35)" fg:x="1328" fg:w="1"/><text x="32.9352%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (782 samples, 19.25%)</title><rect x="14.0290%" y="309" width="19.2469%" height="15" fill="rgb(220,193,23)" fg:x="570" fg:w="782"/><text x="14.2790%" y="319.50">&lt;core::iter::adapters::enumera..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (766 samples, 18.85%)</title><rect x="14.4228%" y="293" width="18.8531%" height="15" fill="rgb(230,90,52)" fg:x="586" fg:w="766"/><text x="14.6728%" y="303.50">core::iter::traits::iterator:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (740 samples, 18.21%)</title><rect x="15.0628%" y="277" width="18.2131%" height="15" fill="rgb(252,106,19)" fg:x="612" fg:w="740"/><text x="15.3128%" y="287.50">core::ops::function::impls::..</text></g><g><title>entity_centered::simulation::detect_collision::_{{closure}}::_{{closure}} (728 samples, 17.92%)</title><rect x="15.3581%" y="261" width="17.9178%" height="15" fill="rgb(206,74,20)" fg:x="624" fg:w="728"/><text x="15.6081%" y="271.50">entity_centered::simulation:..</text></g><g><title>entity_centered::moved_molecule::MovedMolecule::process_collisions (623 samples, 15.33%)</title><rect x="17.9424%" y="245" width="15.3335%" height="15" fill="rgb(230,138,44)" fg:x="729" fg:w="623"/><text x="18.1924%" y="255.50">entity_centered::moved_..</text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (576 samples, 14.18%)</title><rect x="19.0992%" y="229" width="14.1767%" height="15" fill="rgb(235,182,43)" fg:x="776" fg:w="576"/><text x="19.3492%" y="239.50">entity_centered::react..</text></g><g><title>fastrand::global_rng::f32 (73 samples, 1.80%)</title><rect x="31.4792%" y="213" width="1.7967%" height="15" fill="rgb(242,16,51)" fg:x="1279" fg:w="73"/><text x="31.7292%" y="223.50">f..</text></g><g><title>fastrand::global_rng::with_rng (73 samples, 1.80%)</title><rect x="31.4792%" y="197" width="1.7967%" height="15" fill="rgb(248,9,4)" fg:x="1279" fg:w="73"/><text x="31.7292%" y="207.50">f..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (73 samples, 1.80%)</title><rect x="31.4792%" y="181" width="1.7967%" height="15" fill="rgb(210,31,22)" fg:x="1279" fg:w="73"/><text x="31.7292%" y="191.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (73 samples, 1.80%)</title><rect x="31.4792%" y="165" width="1.7967%" height="15" fill="rgb(239,54,39)" fg:x="1279" fg:w="73"/><text x="31.7292%" y="175.50">s..</text></g><g><title>fastrand::global_rng::with_rng::_{{closure}} (60 samples, 1.48%)</title><rect x="31.7992%" y="149" width="1.4767%" height="15" fill="rgb(230,99,41)" fg:x="1292" fg:w="60"/><text x="32.0492%" y="159.50"></text></g><g><title>fastrand::global_rng::f32::_{{closure}} (58 samples, 1.43%)</title><rect x="31.8484%" y="133" width="1.4275%" height="15" fill="rgb(253,106,12)" fg:x="1294" fg:w="58"/><text x="32.0984%" y="143.50"></text></g><g><title>fastrand::Rng::f32 (58 samples, 1.43%)</title><rect x="31.8484%" y="117" width="1.4275%" height="15" fill="rgb(213,46,41)" fg:x="1294" fg:w="58"/><text x="32.0984%" y="127.50"></text></g><g><title>fastrand::Rng::u32 (23 samples, 0.57%)</title><rect x="32.7098%" y="101" width="0.5661%" height="15" fill="rgb(215,133,35)" fg:x="1329" fg:w="23"/><text x="32.9598%" y="111.50"></text></g><g><title>fastrand::Rng::gen_u32 (23 samples, 0.57%)</title><rect x="32.7098%" y="85" width="0.5661%" height="15" fill="rgb(213,28,5)" fg:x="1329" fg:w="23"/><text x="32.9598%" y="95.50"></text></g><g><title>fastrand::Rng::gen_u64 (23 samples, 0.57%)</title><rect x="32.7098%" y="69" width="0.5661%" height="15" fill="rgb(215,77,49)" fg:x="1329" fg:w="23"/><text x="32.9598%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (8 samples, 0.20%)</title><rect x="33.0790%" y="53" width="0.1969%" height="15" fill="rgb(248,100,22)" fg:x="1344" fg:w="8"/><text x="33.3290%" y="63.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (8 samples, 0.20%)</title><rect x="33.7435%" y="293" width="0.1969%" height="15" fill="rgb(208,67,9)" fg:x="1371" fg:w="8"/><text x="33.9935%" y="303.50"></text></g><g><title>core::ops::function::FnOnce::call_once (817 samples, 20.11%)</title><rect x="14.0290%" y="389" width="20.1083%" height="15" fill="rgb(219,133,21)" fg:x="570" fg:w="817"/><text x="14.2790%" y="399.50">core::ops::function::FnOnce::cal..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (817 samples, 20.11%)</title><rect x="14.0290%" y="373" width="20.1083%" height="15" fill="rgb(246,46,29)" fg:x="570" fg:w="817"/><text x="14.2790%" y="383.50">&lt;core::iter::adapters::filter_ma..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (817 samples, 20.11%)</title><rect x="14.0290%" y="357" width="20.1083%" height="15" fill="rgb(246,185,52)" fg:x="570" fg:w="817"/><text x="14.2790%" y="367.50">core::iter::traits::iterator::It..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (817 samples, 20.11%)</title><rect x="14.0290%" y="341" width="20.1083%" height="15" fill="rgb(252,136,11)" fg:x="570" fg:w="817"/><text x="14.2790%" y="351.50">&lt;core::iter::adapters::enumerate..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (817 samples, 20.11%)</title><rect x="14.0290%" y="325" width="20.1083%" height="15" fill="rgb(219,138,53)" fg:x="570" fg:w="817"/><text x="14.2790%" y="335.50">core::iter::traits::iterator::It..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.86%)</title><rect x="33.2759%" y="309" width="0.8614%" height="15" fill="rgb(211,51,23)" fg:x="1352" fg:w="35"/><text x="33.5259%" y="319.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (8 samples, 0.20%)</title><rect x="33.9404%" y="293" width="0.1969%" height="15" fill="rgb(247,221,28)" fg:x="1379" fg:w="8"/><text x="34.1904%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (6 samples, 0.15%)</title><rect x="34.1373%" y="389" width="0.1477%" height="15" fill="rgb(251,222,45)" fg:x="1387" fg:w="6"/><text x="34.3873%" y="399.50"></text></g><g><title>_mi_segment_page_of (29 samples, 0.71%)</title><rect x="35.3187%" y="213" width="0.7138%" height="15" fill="rgb(217,162,53)" fg:x="1435" fg:w="29"/><text x="35.5687%" y="223.50"></text></g><g><title>mi_slice_first (17 samples, 0.42%)</title><rect x="35.6141%" y="197" width="0.4184%" height="15" fill="rgb(229,93,14)" fg:x="1447" fg:w="17"/><text x="35.8641%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 1.94%)</title><rect x="34.3096%" y="293" width="1.9444%" height="15" fill="rgb(209,67,49)" fg:x="1394" fg:w="79"/><text x="34.5596%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (79 samples, 1.94%)</title><rect x="34.3096%" y="277" width="1.9444%" height="15" fill="rgb(213,87,29)" fg:x="1394" fg:w="79"/><text x="34.5596%" y="287.50">a..</text></g><g><title>__rust_dealloc (79 samples, 1.94%)</title><rect x="34.3096%" y="261" width="1.9444%" height="15" fill="rgb(205,151,52)" fg:x="1394" fg:w="79"/><text x="34.5596%" y="271.50">_..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (79 samples, 1.94%)</title><rect x="34.3096%" y="245" width="1.9444%" height="15" fill="rgb(253,215,39)" fg:x="1394" fg:w="79"/><text x="34.5596%" y="255.50">&lt;..</text></g><g><title>mi_free (77 samples, 1.90%)</title><rect x="34.3588%" y="229" width="1.8952%" height="15" fill="rgb(221,220,41)" fg:x="1396" fg:w="77"/><text x="34.6088%" y="239.50">m..</text></g><g><title>mi_block_set_next (9 samples, 0.22%)</title><rect x="36.0325%" y="213" width="0.2215%" height="15" fill="rgb(218,133,21)" fg:x="1464" fg:w="9"/><text x="36.2825%" y="223.50"></text></g><g><title>mi_block_set_nextx (9 samples, 0.22%)</title><rect x="36.0325%" y="197" width="0.2215%" height="15" fill="rgb(221,193,43)" fg:x="1464" fg:w="9"/><text x="36.2825%" y="207.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (961 samples, 23.65%)</title><rect x="12.7246%" y="405" width="23.6525%" height="15" fill="rgb(240,128,52)" fg:x="517" fg:w="961"/><text x="12.9746%" y="415.50">core::iter::adapters::flatten::and_the..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (85 samples, 2.09%)</title><rect x="34.2850%" y="389" width="2.0921%" height="15" fill="rgb(253,114,12)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt; (85 samples, 2.09%)</title><rect x="34.2850%" y="373" width="2.0921%" height="15" fill="rgb(215,223,47)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt; (85 samples, 2.09%)</title><rect x="34.2850%" y="357" width="2.0921%" height="15" fill="rgb(248,225,23)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (85 samples, 2.09%)</title><rect x="34.2850%" y="341" width="2.0921%" height="15" fill="rgb(250,108,0)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (85 samples, 2.09%)</title><rect x="34.2850%" y="325" width="2.0921%" height="15" fill="rgb(228,208,7)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 2.09%)</title><rect x="34.2850%" y="309" width="2.0921%" height="15" fill="rgb(244,45,10)" fg:x="1393" fg:w="85"/><text x="34.5350%" y="319.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.12%)</title><rect x="36.2540%" y="293" width="0.1231%" height="15" fill="rgb(207,125,25)" fg:x="1473" fg:w="5"/><text x="36.5040%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,211 samples, 29.81%)</title><rect x="6.9407%" y="437" width="29.8056%" height="15" fill="rgb(210,195,18)" fg:x="282" fg:w="1211"/><text x="7.1907%" y="447.50">&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; a..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,211 samples, 29.81%)</title><rect x="6.9407%" y="421" width="29.8056%" height="15" fill="rgb(249,80,12)" fg:x="282" fg:w="1211"/><text x="7.1907%" y="431.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;&gt;&gt; (15 samples, 0.37%)</title><rect x="36.3771%" y="405" width="0.3692%" height="15" fill="rgb(221,65,9)" fg:x="1478" fg:w="15"/><text x="36.6271%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.37%)</title><rect x="36.7462%" y="437" width="0.3692%" height="15" fill="rgb(235,49,36)" fg:x="1493" fg:w="15"/><text x="36.9962%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,227 samples, 30.20%)</title><rect x="6.9407%" y="469" width="30.1994%" height="15" fill="rgb(225,32,20)" fg:x="282" fg:w="1227"/><text x="7.1907%" y="479.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::ite..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (1,227 samples, 30.20%)</title><rect x="6.9407%" y="453" width="30.1994%" height="15" fill="rgb(215,141,46)" fg:x="282" fg:w="1227"/><text x="7.1907%" y="463.50">&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.02%)</title><rect x="37.1154%" y="437" width="0.0246%" height="15" fill="rgb(250,160,47)" fg:x="1508" fg:w="1"/><text x="37.3654%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.57%)</title><rect x="37.4354%" y="421" width="0.5661%" height="15" fill="rgb(216,222,40)" fg:x="1521" fg:w="23"/><text x="37.6854%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.02%)</title><rect x="38.0015%" y="421" width="0.0246%" height="15" fill="rgb(234,217,39)" fg:x="1544" fg:w="1"/><text x="38.2515%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 0.98%)</title><rect x="37.3616%" y="453" width="0.9845%" height="15" fill="rgb(207,178,40)" fg:x="1518" fg:w="40"/><text x="37.6116%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.98%)</title><rect x="37.3616%" y="437" width="0.9845%" height="15" fill="rgb(221,136,13)" fg:x="1518" fg:w="40"/><text x="37.6116%" y="447.50"></text></g><g><title>core::ptr::read (13 samples, 0.32%)</title><rect x="38.0261%" y="421" width="0.3200%" height="15" fill="rgb(249,199,10)" fg:x="1545" fg:w="13"/><text x="38.2761%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (13 samples, 0.32%)</title><rect x="38.3460%" y="453" width="0.3200%" height="15" fill="rgb(249,222,13)" fg:x="1558" fg:w="13"/><text x="38.5960%" y="463.50"></text></g><g><title>_mi_prim_thread_id (2 samples, 0.05%)</title><rect x="39.9212%" y="261" width="0.0492%" height="15" fill="rgb(244,185,38)" fg:x="1622" fg:w="2"/><text x="40.1712%" y="271.50"></text></g><g><title>mi_prim_tls_slot (2 samples, 0.05%)</title><rect x="39.9212%" y="245" width="0.0492%" height="15" fill="rgb(236,202,9)" fg:x="1622" fg:w="2"/><text x="40.1712%" y="255.50"></text></g><g><title>_mi_segment_page_of (34 samples, 0.84%)</title><rect x="39.9705%" y="261" width="0.8368%" height="15" fill="rgb(250,229,37)" fg:x="1624" fg:w="34"/><text x="40.2205%" y="271.50"></text></g><g><title>mi_slice_first (26 samples, 0.64%)</title><rect x="40.1674%" y="245" width="0.6399%" height="15" fill="rgb(206,174,23)" fg:x="1632" fg:w="26"/><text x="40.4174%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88 samples, 2.17%)</title><rect x="38.6660%" y="341" width="2.1659%" height="15" fill="rgb(211,33,43)" fg:x="1571" fg:w="88"/><text x="38.9160%" y="351.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (88 samples, 2.17%)</title><rect x="38.6660%" y="325" width="2.1659%" height="15" fill="rgb(245,58,50)" fg:x="1571" fg:w="88"/><text x="38.9160%" y="335.50">a..</text></g><g><title>__rust_dealloc (88 samples, 2.17%)</title><rect x="38.6660%" y="309" width="2.1659%" height="15" fill="rgb(244,68,36)" fg:x="1571" fg:w="88"/><text x="38.9160%" y="319.50">_..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (88 samples, 2.17%)</title><rect x="38.6660%" y="293" width="2.1659%" height="15" fill="rgb(232,229,15)" fg:x="1571" fg:w="88"/><text x="38.9160%" y="303.50">&lt;..</text></g><g><title>mi_free (88 samples, 2.17%)</title><rect x="38.6660%" y="277" width="2.1659%" height="15" fill="rgb(254,30,23)" fg:x="1571" fg:w="88"/><text x="38.9160%" y="287.50">m..</text></g><g><title>mi_checked_ptr_segment (1 samples, 0.02%)</title><rect x="40.8073%" y="261" width="0.0246%" height="15" fill="rgb(235,160,14)" fg:x="1658" fg:w="1"/><text x="41.0573%" y="271.50"></text></g><g><title>_mi_ptr_segment (1 samples, 0.02%)</title><rect x="40.8073%" y="245" width="0.0246%" height="15" fill="rgb(212,155,44)" fg:x="1658" fg:w="1"/><text x="41.0573%" y="255.50"></text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (154 samples, 3.79%)</title><rect x="37.1400%" y="469" width="3.7903%" height="15" fill="rgb(226,2,50)" fg:x="1509" fg:w="154"/><text x="37.3900%" y="479.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (92 samples, 2.26%)</title><rect x="38.6660%" y="453" width="2.2643%" height="15" fill="rgb(234,177,6)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt; (92 samples, 2.26%)</title><rect x="38.6660%" y="437" width="2.2643%" height="15" fill="rgb(217,24,9)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="447.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 2.26%)</title><rect x="38.6660%" y="421" width="2.2643%" height="15" fill="rgb(220,13,46)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="431.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;entity_centered::molecule::Molecule,alloc::alloc::Global&gt;&gt; (92 samples, 2.26%)</title><rect x="38.6660%" y="405" width="2.2643%" height="15" fill="rgb(239,221,27)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="415.50">c..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 2.26%)</title><rect x="38.6660%" y="389" width="2.2643%" height="15" fill="rgb(222,198,25)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="399.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::molecule::Molecule&gt;&gt; (92 samples, 2.26%)</title><rect x="38.6660%" y="373" width="2.2643%" height="15" fill="rgb(211,99,13)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="383.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 2.26%)</title><rect x="38.6660%" y="357" width="2.2643%" height="15" fill="rgb(232,111,31)" fg:x="1571" fg:w="92"/><text x="38.9160%" y="367.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.10%)</title><rect x="40.8319%" y="341" width="0.0984%" height="15" fill="rgb(245,82,37)" fg:x="1659" fg:w="4"/><text x="41.0819%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,422 samples, 35.00%)</title><rect x="6.1531%" y="501" width="34.9988%" height="15" fill="rgb(227,149,46)" fg:x="250" fg:w="1422"/><text x="6.4031%" y="511.50">&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,422 samples, 35.00%)</title><rect x="6.1531%" y="485" width="34.9988%" height="15" fill="rgb(218,36,50)" fg:x="250" fg:w="1422"/><text x="6.4031%" y="495.50">&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (9 samples, 0.22%)</title><rect x="40.9303%" y="469" width="0.2215%" height="15" fill="rgb(226,80,48)" fg:x="1663" fg:w="9"/><text x="41.1803%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.12%)</title><rect x="41.1519%" y="501" width="0.1231%" height="15" fill="rgb(238,224,15)" fg:x="1672" fg:w="5"/><text x="41.4019%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;std::collections::hash::map::Values&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;,entity_centered::simulation::detect_collision::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.2749%" y="501" width="0.0246%" height="15" fill="rgb(241,136,10)" fg:x="1677" fg:w="1"/><text x="41.5249%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::FlattenCompat&lt;core::iter::adapters::flatten::FlatMap&lt;std::collections::hash::map::Values&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt;,entity_centered::simulation::detect_collision::{{closure}}::{{closure}}&gt;,entity_centered::simulation::detect_collision::{{closure}}&gt;,alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.2749%" y="485" width="0.0246%" height="15" fill="rgb(208,32,45)" fg:x="1677" fg:w="1"/><text x="41.5249%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::into_iter::IntoIter&lt;entity_centered::molecule::Molecule&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.2749%" y="469" width="0.0246%" height="15" fill="rgb(207,135,9)" fg:x="1677" fg:w="1"/><text x="41.5249%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.15%)</title><rect x="41.2995%" y="501" width="0.1477%" height="15" fill="rgb(206,86,44)" fg:x="1678" fg:w="6"/><text x="41.5495%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1,456 samples, 35.84%)</title><rect x="6.1531%" y="549" width="35.8356%" height="15" fill="rgb(245,177,15)" fg:x="250" fg:w="1456"/><text x="6.4031%" y="559.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Exte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,456 samples, 35.84%)</title><rect x="6.1531%" y="533" width="35.8356%" height="15" fill="rgb(206,64,50)" fg:x="250" fg:w="1456"/><text x="6.4031%" y="543.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExte..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,456 samples, 35.84%)</title><rect x="6.1531%" y="517" width="35.8356%" height="15" fill="rgb(234,36,40)" fg:x="250" fg:w="1456"/><text x="6.4031%" y="527.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>core::ptr::write (22 samples, 0.54%)</title><rect x="41.4472%" y="501" width="0.5415%" height="15" fill="rgb(213,64,8)" fg:x="1684" fg:w="22"/><text x="41.6972%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="42.1856%" y="421" width="0.0246%" height="15" fill="rgb(210,75,36)" fg:x="1714" fg:w="1"/><text x="42.4356%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="42.1856%" y="405" width="0.0246%" height="15" fill="rgb(229,88,21)" fg:x="1714" fg:w="1"/><text x="42.4356%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (11 samples, 0.27%)</title><rect x="42.2102%" y="421" width="0.2707%" height="15" fill="rgb(252,204,47)" fg:x="1715" fg:w="11"/><text x="42.4602%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.27%)</title><rect x="42.2102%" y="405" width="0.2707%" height="15" fill="rgb(208,77,27)" fg:x="1715" fg:w="11"/><text x="42.4602%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.71%)</title><rect x="41.9887%" y="453" width="0.7138%" height="15" fill="rgb(221,76,26)" fg:x="1706" fg:w="29"/><text x="42.2387%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (21 samples, 0.52%)</title><rect x="42.1856%" y="437" width="0.5169%" height="15" fill="rgb(225,139,18)" fg:x="1714" fg:w="21"/><text x="42.4356%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (9 samples, 0.22%)</title><rect x="42.4809%" y="421" width="0.2215%" height="15" fill="rgb(230,137,11)" fg:x="1726" fg:w="9"/><text x="42.7309%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (9 samples, 0.22%)</title><rect x="42.4809%" y="405" width="0.2215%" height="15" fill="rgb(212,28,1)" fg:x="1726" fg:w="9"/><text x="42.7309%" y="415.50"></text></g><g><title>mi_option_is_enabled (1 samples, 0.02%)</title><rect x="43.1701%" y="261" width="0.0246%" height="15" fill="rgb(248,164,17)" fg:x="1754" fg:w="1"/><text x="43.4201%" y="271.50"></text></g><g><title>mi_option_get (1 samples, 0.02%)</title><rect x="43.1701%" y="245" width="0.0246%" height="15" fill="rgb(222,171,42)" fg:x="1754" fg:w="1"/><text x="43.4201%" y="255.50"></text></g><g><title>_mi_segment_page_free (3 samples, 0.07%)</title><rect x="43.1701%" y="293" width="0.0738%" height="15" fill="rgb(243,84,45)" fg:x="1754" fg:w="3"/><text x="43.4201%" y="303.50"></text></g><g><title>mi_segment_page_clear (3 samples, 0.07%)</title><rect x="43.1701%" y="277" width="0.0738%" height="15" fill="rgb(252,49,23)" fg:x="1754" fg:w="3"/><text x="43.4201%" y="287.50"></text></g><g><title>mi_segment_span_free_coalesce (2 samples, 0.05%)</title><rect x="43.1947%" y="261" width="0.0492%" height="15" fill="rgb(215,19,7)" fg:x="1755" fg:w="2"/><text x="43.4447%" y="271.50"></text></g><g><title>mi_segment_span_free (1 samples, 0.02%)</title><rect x="43.2193%" y="245" width="0.0246%" height="15" fill="rgb(238,81,41)" fg:x="1756" fg:w="1"/><text x="43.4693%" y="255.50"></text></g><g><title>_mi_prim_thread_id (2 samples, 0.05%)</title><rect x="45.3852%" y="277" width="0.0492%" height="15" fill="rgb(210,199,37)" fg:x="1844" fg:w="2"/><text x="45.6352%" y="287.50"></text></g><g><title>mi_prim_tls_slot (2 samples, 0.05%)</title><rect x="45.3852%" y="261" width="0.0492%" height="15" fill="rgb(244,192,49)" fg:x="1844" fg:w="2"/><text x="45.6352%" y="271.50"></text></g><g><title>_mi_segment_page_of (77 samples, 1.90%)</title><rect x="45.4344%" y="277" width="1.8952%" height="15" fill="rgb(226,211,11)" fg:x="1846" fg:w="77"/><text x="45.6844%" y="287.50">_..</text></g><g><title>mi_slice_first (57 samples, 1.40%)</title><rect x="45.9267%" y="261" width="1.4029%" height="15" fill="rgb(236,162,54)" fg:x="1866" fg:w="57"/><text x="46.1767%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (184 samples, 4.53%)</title><rect x="42.8255%" y="357" width="4.5287%" height="15" fill="rgb(220,229,9)" fg:x="1740" fg:w="184"/><text x="43.0755%" y="367.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (184 samples, 4.53%)</title><rect x="42.8255%" y="341" width="4.5287%" height="15" fill="rgb(250,87,22)" fg:x="1740" fg:w="184"/><text x="43.0755%" y="351.50">alloc..</text></g><g><title>__rust_dealloc (184 samples, 4.53%)</title><rect x="42.8255%" y="325" width="4.5287%" height="15" fill="rgb(239,43,17)" fg:x="1740" fg:w="184"/><text x="43.0755%" y="335.50">__rus..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (184 samples, 4.53%)</title><rect x="42.8255%" y="309" width="4.5287%" height="15" fill="rgb(231,177,25)" fg:x="1740" fg:w="184"/><text x="43.0755%" y="319.50">&lt;mima..</text></g><g><title>mi_free (167 samples, 4.11%)</title><rect x="43.2439%" y="293" width="4.1103%" height="15" fill="rgb(219,179,1)" fg:x="1757" fg:w="167"/><text x="43.4939%" y="303.50">mi_f..</text></g><g><title>mi_block_set_next (1 samples, 0.02%)</title><rect x="47.3296%" y="277" width="0.0246%" height="15" fill="rgb(238,219,53)" fg:x="1923" fg:w="1"/><text x="47.5796%" y="287.50"></text></g><g><title>mi_block_set_nextx (1 samples, 0.02%)</title><rect x="47.3296%" y="261" width="0.0246%" height="15" fill="rgb(232,167,36)" fg:x="1923" fg:w="1"/><text x="47.5796%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (255 samples, 6.28%)</title><rect x="41.9887%" y="469" width="6.2762%" height="15" fill="rgb(244,19,51)" fg:x="1706" fg:w="255"/><text x="42.2387%" y="479.50">hashbrow..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (226 samples, 5.56%)</title><rect x="42.7024%" y="453" width="5.5624%" height="15" fill="rgb(224,6,22)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="463.50">hashbro..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (226 samples, 5.56%)</title><rect x="42.7024%" y="437" width="5.5624%" height="15" fill="rgb(224,145,5)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt; (226 samples, 5.56%)</title><rect x="42.7024%" y="421" width="5.5624%" height="15" fill="rgb(234,130,49)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (226 samples, 5.56%)</title><rect x="42.7024%" y="405" width="5.5624%" height="15" fill="rgb(254,6,2)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="415.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;entity_centered::moved_molecule::MovedMolecule&gt;&gt; (226 samples, 5.56%)</title><rect x="42.7024%" y="389" width="5.5624%" height="15" fill="rgb(208,96,46)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="399.50">core::p..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (226 samples, 5.56%)</title><rect x="42.7024%" y="373" width="5.5624%" height="15" fill="rgb(239,3,39)" fg:x="1735" fg:w="226"/><text x="42.9524%" y="383.50">&lt;alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (37 samples, 0.91%)</title><rect x="47.3542%" y="357" width="0.9107%" height="15" fill="rgb(233,210,1)" fg:x="1924" fg:w="37"/><text x="47.6042%" y="367.50"></text></g><g><title>entity_centered::simulation::detect_collision (1,712 samples, 42.14%)</title><rect x="6.1531%" y="565" width="42.1364%" height="15" fill="rgb(244,137,37)" fg:x="250" fg:w="1712"/><text x="6.4031%" y="575.50">entity_centered::simulation::detect_collision</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (256 samples, 6.30%)</title><rect x="41.9887%" y="549" width="6.3008%" height="15" fill="rgb(240,136,2)" fg:x="1706" fg:w="256"/><text x="42.2387%" y="559.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;,core::hash::BuildHasherDefault&lt;rustc_hash::FxHasher&gt;&gt;&gt; (256 samples, 6.30%)</title><rect x="41.9887%" y="533" width="6.3008%" height="15" fill="rgb(239,18,37)" fg:x="1706" fg:w="256"/><text x="42.2387%" y="543.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(entity_centered::vector::VectorInt3d,alloc::vec::Vec&lt;entity_centered::moved_molecule::MovedMolecule&gt;)&gt;&gt; (256 samples, 6.30%)</title><rect x="41.9887%" y="517" width="6.3008%" height="15" fill="rgb(218,185,22)" fg:x="1706" fg:w="256"/><text x="42.2387%" y="527.50">core::pt..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (256 samples, 6.30%)</title><rect x="41.9887%" y="501" width="6.3008%" height="15" fill="rgb(225,218,4)" fg:x="1706" fg:w="256"/><text x="42.2387%" y="511.50">&lt;hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (256 samples, 6.30%)</title><rect x="41.9887%" y="485" width="6.3008%" height="15" fill="rgb(230,182,32)" fg:x="1706" fg:w="256"/><text x="42.2387%" y="495.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.02%)</title><rect x="48.2648%" y="469" width="0.0246%" height="15" fill="rgb(242,56,43)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="48.2648%" y="453" width="0.0246%" height="15" fill="rgb(233,99,24)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="48.2648%" y="437" width="0.0246%" height="15" fill="rgb(234,209,42)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="447.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="48.2648%" y="421" width="0.0246%" height="15" fill="rgb(227,7,12)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="431.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1 samples, 0.02%)</title><rect x="48.2648%" y="405" width="0.0246%" height="15" fill="rgb(245,203,43)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="415.50"></text></g><g><title>_mi_segment_page_free (1 samples, 0.02%)</title><rect x="48.2648%" y="389" width="0.0246%" height="15" fill="rgb(238,205,33)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="399.50"></text></g><g><title>mi_segment_page_clear (1 samples, 0.02%)</title><rect x="48.2648%" y="373" width="0.0246%" height="15" fill="rgb(231,56,7)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="383.50"></text></g><g><title>mi_segment_span_free_coalesce (1 samples, 0.02%)</title><rect x="48.2648%" y="357" width="0.0246%" height="15" fill="rgb(244,186,29)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="367.50"></text></g><g><title>mi_segment_span_remove_from_queue (1 samples, 0.02%)</title><rect x="48.2648%" y="341" width="0.0246%" height="15" fill="rgb(234,111,31)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="351.50"></text></g><g><title>mi_span_queue_delete (1 samples, 0.02%)</title><rect x="48.2648%" y="325" width="0.0246%" height="15" fill="rgb(241,149,10)" fg:x="1961" fg:w="1"/><text x="48.5148%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="51.7844%" y="517" width="0.0492%" height="15" fill="rgb(249,206,44)" fg:x="2104" fg:w="2"/><text x="52.0344%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="51.7844%" y="501" width="0.0492%" height="15" fill="rgb(251,153,30)" fg:x="2104" fg:w="2"/><text x="52.0344%" y="511.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="51.7844%" y="485" width="0.0492%" height="15" fill="rgb(239,152,38)" fg:x="2104" fg:w="2"/><text x="52.0344%" y="495.50"></text></g><g><title>&lt;entity_centered::vector::Vector3d as core::ops::arith::Add&gt;::add (38 samples, 0.94%)</title><rect x="53.2611%" y="453" width="0.9353%" height="15" fill="rgb(249,139,47)" fg:x="2164" fg:w="38"/><text x="53.5111%" y="463.50"></text></g><g><title>&lt;entity_centered::vector::Vector3d as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (61 samples, 1.50%)</title><rect x="54.1964%" y="453" width="1.5014%" height="15" fill="rgb(244,64,35)" fg:x="2202" fg:w="61"/><text x="54.4464%" y="463.50"></text></g><g><title>entity_centered::vector::Vector3d::distance_pow2 (113 samples, 2.78%)</title><rect x="55.6978%" y="437" width="2.7812%" height="15" fill="rgb(216,46,15)" fg:x="2263" fg:w="113"/><text x="55.9478%" y="447.50">en..</text></g><g><title>entity_centered::vector::Vector3d::dot (113 samples, 2.78%)</title><rect x="55.6978%" y="421" width="2.7812%" height="15" fill="rgb(250,74,19)" fg:x="2263" fg:w="113"/><text x="55.9478%" y="431.50">en..</text></g><g><title>entity_centered::molecule::Molecule::apply_movement (409 samples, 10.07%)</title><rect x="51.8336%" y="469" width="10.0665%" height="15" fill="rgb(249,42,33)" fg:x="2106" fg:w="409"/><text x="52.0836%" y="479.50">entity_centered..</text></g><g><title>entity_centered::vector::Vector3d::distance (252 samples, 6.20%)</title><rect x="55.6978%" y="453" width="6.2023%" height="15" fill="rgb(242,149,17)" fg:x="2263" fg:w="252"/><text x="55.9478%" y="463.50">entity_c..</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (139 samples, 3.42%)</title><rect x="58.4790%" y="437" width="3.4211%" height="15" fill="rgb(244,29,21)" fg:x="2376" fg:w="139"/><text x="58.7290%" y="447.50">std..</text></g><g><title>entity_centered::vector::&lt;impl core::ops::arith::Mul&lt;entity_centered::vector::Vector3d&gt; for f32&gt;::mul (32 samples, 0.79%)</title><rect x="66.1826%" y="453" width="0.7876%" height="15" fill="rgb(220,130,37)" fg:x="2689" fg:w="32"/><text x="66.4326%" y="463.50"></text></g><g><title>entity_centered::vector::Vector3d::dot (30 samples, 0.74%)</title><rect x="66.9702%" y="453" width="0.7384%" height="15" fill="rgb(211,67,2)" fg:x="2721" fg:w="30"/><text x="67.2202%" y="463.50"></text></g><g><title>fastrand::global_rng::RNG::__getit (59 samples, 1.45%)</title><rect x="67.8317%" y="389" width="1.4521%" height="15" fill="rgb(235,68,52)" fg:x="2756" fg:w="59"/><text x="68.0817%" y="399.50"></text></g><g><title>std::sys::pal::common::thread_local::fast_local::Key&lt;T&gt;::get (59 samples, 1.45%)</title><rect x="67.8317%" y="373" width="1.4521%" height="15" fill="rgb(246,142,3)" fg:x="2756" fg:w="59"/><text x="68.0817%" y="383.50"></text></g><g><title>std::sys::pal::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (35 samples, 0.86%)</title><rect x="68.4223%" y="357" width="0.8614%" height="15" fill="rgb(241,25,7)" fg:x="2780" fg:w="35"/><text x="68.6723%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (35 samples, 0.86%)</title><rect x="68.4223%" y="341" width="0.8614%" height="15" fill="rgb(242,119,39)" fg:x="2780" fg:w="35"/><text x="68.6723%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;fastrand::global_rng::RestoreOnDrop&gt; (5 samples, 0.12%)</title><rect x="69.2838%" y="373" width="0.1231%" height="15" fill="rgb(241,98,45)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="383.50"></text></g><g><title>&lt;fastrand::global_rng::RestoreOnDrop as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect x="69.2838%" y="357" width="0.1231%" height="15" fill="rgb(254,28,30)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (5 samples, 0.12%)</title><rect x="69.2838%" y="341" width="0.1231%" height="15" fill="rgb(241,142,54)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (5 samples, 0.12%)</title><rect x="69.2838%" y="325" width="0.1231%" height="15" fill="rgb(222,85,15)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="335.50"></text></g><g><title>core::mem::replace (5 samples, 0.12%)</title><rect x="69.2838%" y="309" width="0.1231%" height="15" fill="rgb(210,85,47)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="319.50"></text></g><g><title>core::ptr::write (5 samples, 0.12%)</title><rect x="69.2838%" y="293" width="0.1231%" height="15" fill="rgb(224,206,25)" fg:x="2815" fg:w="5"/><text x="69.5338%" y="303.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits (8 samples, 0.20%)</title><rect x="70.0960%" y="341" width="0.1969%" height="15" fill="rgb(243,201,19)" fg:x="2848" fg:w="8"/><text x="70.3460%" y="351.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits::rt_u32_to_f32 (8 samples, 0.20%)</title><rect x="70.0960%" y="325" width="0.1969%" height="15" fill="rgb(236,59,4)" fg:x="2848" fg:w="8"/><text x="70.3460%" y="335.50"></text></g><g><title>fastrand::global_rng::f32 (167 samples, 4.11%)</title><rect x="67.7086%" y="453" width="4.1103%" height="15" fill="rgb(254,179,45)" fg:x="2751" fg:w="167"/><text x="67.9586%" y="463.50">fast..</text></g><g><title>fastrand::global_rng::with_rng (167 samples, 4.11%)</title><rect x="67.7086%" y="437" width="4.1103%" height="15" fill="rgb(226,14,10)" fg:x="2751" fg:w="167"/><text x="67.9586%" y="447.50">fast..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (167 samples, 4.11%)</title><rect x="67.7086%" y="421" width="4.1103%" height="15" fill="rgb(244,27,41)" fg:x="2751" fg:w="167"/><text x="67.9586%" y="431.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (167 samples, 4.11%)</title><rect x="67.7086%" y="405" width="4.1103%" height="15" fill="rgb(235,35,32)" fg:x="2751" fg:w="167"/><text x="67.9586%" y="415.50">std:..</text></g><g><title>fastrand::global_rng::with_rng::_{{closure}} (103 samples, 2.54%)</title><rect x="69.2838%" y="389" width="2.5351%" height="15" fill="rgb(218,68,31)" fg:x="2815" fg:w="103"/><text x="69.5338%" y="399.50">fa..</text></g><g><title>fastrand::global_rng::f32::_{{closure}} (98 samples, 2.41%)</title><rect x="69.4068%" y="373" width="2.4120%" height="15" fill="rgb(207,120,37)" fg:x="2820" fg:w="98"/><text x="69.6568%" y="383.50">fa..</text></g><g><title>fastrand::Rng::f32 (98 samples, 2.41%)</title><rect x="69.4068%" y="357" width="2.4120%" height="15" fill="rgb(227,98,0)" fg:x="2820" fg:w="98"/><text x="69.6568%" y="367.50">fa..</text></g><g><title>fastrand::Rng::u32 (62 samples, 1.53%)</title><rect x="70.2929%" y="341" width="1.5260%" height="15" fill="rgb(207,7,3)" fg:x="2856" fg:w="62"/><text x="70.5429%" y="351.50"></text></g><g><title>fastrand::Rng::gen_u32 (62 samples, 1.53%)</title><rect x="70.2929%" y="325" width="1.5260%" height="15" fill="rgb(206,98,19)" fg:x="2856" fg:w="62"/><text x="70.5429%" y="335.50"></text></g><g><title>fastrand::Rng::gen_u64 (62 samples, 1.53%)</title><rect x="70.2929%" y="309" width="1.5260%" height="15" fill="rgb(217,5,26)" fg:x="2856" fg:w="62"/><text x="70.5429%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18 samples, 0.44%)</title><rect x="71.3758%" y="293" width="0.4430%" height="15" fill="rgb(235,190,38)" fg:x="2900" fg:w="18"/><text x="71.6258%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (895 samples, 22.03%)</title><rect x="51.6859%" y="533" width="22.0281%" height="15" fill="rgb(247,86,24)" fg:x="2100" fg:w="895"/><text x="51.9359%" y="543.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>core::option::Option&lt;T&gt;::map (889 samples, 21.88%)</title><rect x="51.8336%" y="517" width="21.8804%" height="15" fill="rgb(205,101,16)" fg:x="2106" fg:w="889"/><text x="52.0836%" y="527.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (889 samples, 21.88%)</title><rect x="51.8336%" y="501" width="21.8804%" height="15" fill="rgb(246,168,33)" fg:x="2106" fg:w="889"/><text x="52.0836%" y="511.50">core::ops::function::impls::&lt;impl c..</text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (889 samples, 21.88%)</title><rect x="51.8336%" y="485" width="21.8804%" height="15" fill="rgb(231,114,1)" fg:x="2106" fg:w="889"/><text x="52.0836%" y="495.50">entity_centered::simulation::simula..</text></g><g><title>entity_centered::vector::Vector3d::get_random_unitary (480 samples, 11.81%)</title><rect x="61.9001%" y="469" width="11.8139%" height="15" fill="rgb(207,184,53)" fg:x="2515" fg:w="480"/><text x="62.1501%" y="479.50">entity_centered::v..</text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (77 samples, 1.90%)</title><rect x="71.8189%" y="453" width="1.8952%" height="15" fill="rgb(224,95,51)" fg:x="2918" fg:w="77"/><text x="72.0689%" y="463.50">s..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,497 samples, 36.84%)</title><rect x="48.4617%" y="549" width="36.8447%" height="15" fill="rgb(212,188,45)" fg:x="1969" fg:w="1497"/><text x="48.7117%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::..</text></g><g><title>core::option::Option&lt;T&gt;::map (471 samples, 11.59%)</title><rect x="73.7140%" y="533" width="11.5924%" height="15" fill="rgb(223,154,38)" fg:x="2995" fg:w="471"/><text x="73.9640%" y="543.50">core::option::Opt..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (225 samples, 5.54%)</title><rect x="79.7686%" y="517" width="5.5378%" height="15" fill="rgb(251,22,52)" fg:x="3241" fg:w="225"/><text x="80.0186%" y="527.50">core::o..</text></g><g><title>entity_centered::simulation::simulation::_{{closure}} (225 samples, 5.54%)</title><rect x="79.7686%" y="501" width="5.5378%" height="15" fill="rgb(229,209,22)" fg:x="3241" fg:w="225"/><text x="80.0186%" y="511.50">entity_..</text></g><g><title>entity_centered::vector::Vector3d::into_vectorint (220 samples, 5.41%)</title><rect x="79.8917%" y="485" width="5.4147%" height="15" fill="rgb(234,138,34)" fg:x="3246" fg:w="220"/><text x="80.1417%" y="495.50">entity_..</text></g><g><title>std::f32::&lt;impl f32&gt;::floor (67 samples, 1.65%)</title><rect x="83.6574%" y="469" width="1.6490%" height="15" fill="rgb(212,95,11)" fg:x="3399" fg:w="67"/><text x="83.9074%" y="479.50"></text></g><g><title>__floorf_sse41 (67 samples, 1.65%)</title><rect x="83.6574%" y="453" width="1.6490%" height="15" fill="rgb(240,179,47)" fg:x="3399" fg:w="67"/><text x="83.9074%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (13 samples, 0.32%)</title><rect x="86.1432%" y="533" width="0.3200%" height="15" fill="rgb(240,163,11)" fg:x="3500" fg:w="13"/><text x="86.3932%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (128 samples, 3.15%)</title><rect x="85.3064%" y="549" width="3.1504%" height="15" fill="rgb(236,37,12)" fg:x="3466" fg:w="128"/><text x="85.5564%" y="559.50">all..</text></g><g><title>core::ptr::write (81 samples, 1.99%)</title><rect x="86.4632%" y="533" width="1.9936%" height="15" fill="rgb(232,164,16)" fg:x="3513" fg:w="81"/><text x="86.7132%" y="543.50">c..</text></g><g><title>_mi_deferred_free (1 samples, 0.02%)</title><rect x="88.6537%" y="357" width="0.0246%" height="15" fill="rgb(244,205,15)" fg:x="3602" fg:w="1"/><text x="88.9037%" y="367.50"></text></g><g><title>_mi_page_malloc (1 samples, 0.02%)</title><rect x="88.6783%" y="357" width="0.0246%" height="15" fill="rgb(223,117,47)" fg:x="3603" fg:w="1"/><text x="88.9283%" y="367.50"></text></g><g><title>mi_page_extend_free (16 samples, 0.39%)</title><rect x="88.7275%" y="309" width="0.3938%" height="15" fill="rgb(244,107,35)" fg:x="3605" fg:w="16"/><text x="88.9775%" y="319.50"></text></g><g><title>mi_page_extend_free (16 samples, 0.39%)</title><rect x="88.7275%" y="293" width="0.3938%" height="15" fill="rgb(205,140,8)" fg:x="3605" fg:w="16"/><text x="88.9775%" y="303.50"></text></g><g><title>mi_page_free_list_extend (10 samples, 0.25%)</title><rect x="88.8752%" y="277" width="0.2461%" height="15" fill="rgb(228,84,46)" fg:x="3611" fg:w="10"/><text x="89.1252%" y="287.50"></text></g><g><title>mi_block_set_next (10 samples, 0.25%)</title><rect x="88.8752%" y="261" width="0.2461%" height="15" fill="rgb(254,188,9)" fg:x="3611" fg:w="10"/><text x="89.1252%" y="271.50"></text></g><g><title>mi_block_set_nextx (10 samples, 0.25%)</title><rect x="88.8752%" y="245" width="0.2461%" height="15" fill="rgb(206,112,54)" fg:x="3611" fg:w="10"/><text x="89.1252%" y="255.50"></text></g><g><title>_mi_prim_clock_now (2 samples, 0.05%)</title><rect x="89.1213%" y="181" width="0.0492%" height="15" fill="rgb(216,84,49)" fg:x="3621" fg:w="2"/><text x="89.3713%" y="191.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (1 samples, 0.02%)</title><rect x="89.1460%" y="165" width="0.0246%" height="15" fill="rgb(214,194,35)" fg:x="3622" fg:w="1"/><text x="89.3960%" y="175.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="89.1460%" y="149" width="0.0246%" height="15" fill="rgb(249,28,3)" fg:x="3622" fg:w="1"/><text x="89.3960%" y="159.50"></text></g><g><title>[[vdso]] (1 samples, 0.02%)</title><rect x="89.1460%" y="133" width="0.0246%" height="15" fill="rgb(222,56,52)" fg:x="3622" fg:w="1"/><text x="89.3960%" y="143.50"></text></g><g><title>_mi_segment_page_alloc (3 samples, 0.07%)</title><rect x="89.1213%" y="277" width="0.0738%" height="15" fill="rgb(245,217,50)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="287.50"></text></g><g><title>mi_segments_page_alloc (3 samples, 0.07%)</title><rect x="89.1213%" y="261" width="0.0738%" height="15" fill="rgb(213,201,24)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="271.50"></text></g><g><title>mi_segments_page_find_and_allocate (3 samples, 0.07%)</title><rect x="89.1213%" y="245" width="0.0738%" height="15" fill="rgb(248,116,28)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="255.50"></text></g><g><title>mi_segment_span_allocate (3 samples, 0.07%)</title><rect x="89.1213%" y="229" width="0.0738%" height="15" fill="rgb(219,72,43)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="239.50"></text></g><g><title>mi_segment_ensure_committed (3 samples, 0.07%)</title><rect x="89.1213%" y="213" width="0.0738%" height="15" fill="rgb(209,138,14)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="223.50"></text></g><g><title>mi_segment_commit (3 samples, 0.07%)</title><rect x="89.1213%" y="197" width="0.0738%" height="15" fill="rgb(222,18,33)" fg:x="3621" fg:w="3"/><text x="89.3713%" y="207.50"></text></g><g><title>mi_commit_mask_is_empty (1 samples, 0.02%)</title><rect x="89.1706%" y="181" width="0.0246%" height="15" fill="rgb(213,199,7)" fg:x="3623" fg:w="1"/><text x="89.4206%" y="191.50"></text></g><g><title>mi_page_fresh (4 samples, 0.10%)</title><rect x="89.1213%" y="309" width="0.0984%" height="15" fill="rgb(250,110,10)" fg:x="3621" fg:w="4"/><text x="89.3713%" y="319.50"></text></g><g><title>mi_page_fresh_alloc (4 samples, 0.10%)</title><rect x="89.1213%" y="293" width="0.0984%" height="15" fill="rgb(248,123,6)" fg:x="3621" fg:w="4"/><text x="89.3713%" y="303.50"></text></g><g><title>mi_page_queue_push (1 samples, 0.02%)</title><rect x="89.1952%" y="277" width="0.0246%" height="15" fill="rgb(206,91,31)" fg:x="3624" fg:w="1"/><text x="89.4452%" y="287.50"></text></g><g><title>mi_heap_queue_first_update (1 samples, 0.02%)</title><rect x="89.1952%" y="261" width="0.0246%" height="15" fill="rgb(211,154,13)" fg:x="3624" fg:w="1"/><text x="89.4452%" y="271.50"></text></g><g><title>mi_bin (1 samples, 0.02%)</title><rect x="89.1952%" y="245" width="0.0246%" height="15" fill="rgb(225,148,7)" fg:x="3624" fg:w="1"/><text x="89.4452%" y="255.50"></text></g><g><title>_mi_malloc_generic (24 samples, 0.59%)</title><rect x="88.6537%" y="373" width="0.5907%" height="15" fill="rgb(220,160,43)" fg:x="3602" fg:w="24"/><text x="88.9037%" y="383.50"></text></g><g><title>mi_find_page (22 samples, 0.54%)</title><rect x="88.7029%" y="357" width="0.5415%" height="15" fill="rgb(213,52,39)" fg:x="3604" fg:w="22"/><text x="88.9529%" y="367.50"></text></g><g><title>mi_find_free_page (22 samples, 0.54%)</title><rect x="88.7029%" y="341" width="0.5415%" height="15" fill="rgb(243,137,7)" fg:x="3604" fg:w="22"/><text x="88.9529%" y="351.50"></text></g><g><title>mi_page_queue_find_free_ex (22 samples, 0.54%)</title><rect x="88.7029%" y="325" width="0.5415%" height="15" fill="rgb(230,79,13)" fg:x="3604" fg:w="22"/><text x="88.9529%" y="335.50"></text></g><g><title>mi_page_to_full (1 samples, 0.02%)</title><rect x="89.2198%" y="309" width="0.0246%" height="15" fill="rgb(247,105,23)" fg:x="3625" fg:w="1"/><text x="89.4698%" y="319.50"></text></g><g><title>mi_page_queue_enqueue_from (1 samples, 0.02%)</title><rect x="89.2198%" y="293" width="0.0246%" height="15" fill="rgb(223,179,41)" fg:x="3625" fg:w="1"/><text x="89.4698%" y="303.50"></text></g><g><title>mi_heap_queue_first_update (1 samples, 0.02%)</title><rect x="89.2198%" y="277" width="0.0246%" height="15" fill="rgb(218,9,34)" fg:x="3625" fg:w="1"/><text x="89.4698%" y="287.50"></text></g><g><title>mi_heap_malloc_aligned (31 samples, 0.76%)</title><rect x="89.2444%" y="373" width="0.7630%" height="15" fill="rgb(222,106,8)" fg:x="3626" fg:w="31"/><text x="89.4944%" y="383.50"></text></g><g><title>_mi_heap_get_free_small_page (9 samples, 0.22%)</title><rect x="90.7211%" y="341" width="0.2215%" height="15" fill="rgb(211,220,0)" fg:x="3686" fg:w="9"/><text x="90.9711%" y="351.50"></text></g><g><title>_mi_wsize_from_size (8 samples, 0.20%)</title><rect x="90.7458%" y="325" width="0.1969%" height="15" fill="rgb(229,52,16)" fg:x="3687" fg:w="8"/><text x="90.9958%" y="335.50"></text></g><g><title>mi_heap_malloc_aligned_at (57 samples, 1.40%)</title><rect x="90.0074%" y="373" width="1.4029%" height="15" fill="rgb(212,155,18)" fg:x="3657" fg:w="57"/><text x="90.2574%" y="383.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at (57 samples, 1.40%)</title><rect x="90.0074%" y="357" width="1.4029%" height="15" fill="rgb(242,21,14)" fg:x="3657" fg:w="57"/><text x="90.2574%" y="367.50"></text></g><g><title>_mi_page_malloc (19 samples, 0.47%)</title><rect x="90.9427%" y="341" width="0.4676%" height="15" fill="rgb(222,19,48)" fg:x="3695" fg:w="19"/><text x="91.1927%" y="351.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_fallback (1 samples, 0.02%)</title><rect x="91.4103%" y="373" width="0.0246%" height="15" fill="rgb(232,45,27)" fg:x="3714" fg:w="1"/><text x="91.6603%" y="383.50"></text></g><g><title>entity_centered::simulation::group::_{{closure}} (149 samples, 3.67%)</title><rect x="88.4568%" y="533" width="3.6672%" height="15" fill="rgb(249,103,42)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="543.50">enti..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (149 samples, 3.67%)</title><rect x="88.4568%" y="517" width="3.6672%" height="15" fill="rgb(246,81,33)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="527.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (149 samples, 3.67%)</title><rect x="88.4568%" y="501" width="3.6672%" height="15" fill="rgb(252,33,42)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="511.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (149 samples, 3.67%)</title><rect x="88.4568%" y="485" width="3.6672%" height="15" fill="rgb(209,212,41)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="495.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (149 samples, 3.67%)</title><rect x="88.4568%" y="469" width="3.6672%" height="15" fill="rgb(207,154,6)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="479.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 3.67%)</title><rect x="88.4568%" y="453" width="3.6672%" height="15" fill="rgb(223,64,47)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="463.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (149 samples, 3.67%)</title><rect x="88.4568%" y="437" width="3.6672%" height="15" fill="rgb(211,161,38)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="447.50">allo..</text></g><g><title>alloc::alloc::alloc (149 samples, 3.67%)</title><rect x="88.4568%" y="421" width="3.6672%" height="15" fill="rgb(219,138,40)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="431.50">allo..</text></g><g><title>__rust_alloc (149 samples, 3.67%)</title><rect x="88.4568%" y="405" width="3.6672%" height="15" fill="rgb(241,228,46)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="415.50">__ru..</text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (149 samples, 3.67%)</title><rect x="88.4568%" y="389" width="3.6672%" height="15" fill="rgb(223,209,38)" fg:x="3594" fg:w="149"/><text x="88.7068%" y="399.50">&lt;mim..</text></g><g><title>mi_malloc_aligned (28 samples, 0.69%)</title><rect x="91.4349%" y="373" width="0.6891%" height="15" fill="rgb(236,164,45)" fg:x="3715" fg:w="28"/><text x="91.6849%" y="383.50"></text></g><g><title>mi_prim_get_default_heap (17 samples, 0.42%)</title><rect x="91.7056%" y="357" width="0.4184%" height="15" fill="rgb(231,15,5)" fg:x="3726" fg:w="17"/><text x="91.9556%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (42 samples, 1.03%)</title><rect x="92.5425%" y="485" width="1.0337%" height="15" fill="rgb(252,35,15)" fg:x="3760" fg:w="42"/><text x="92.7925%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (42 samples, 1.03%)</title><rect x="92.5425%" y="469" width="1.0337%" height="15" fill="rgb(248,181,18)" fg:x="3760" fg:w="42"/><text x="92.7925%" y="479.50"></text></g><g><title>core::ptr::write (42 samples, 1.03%)</title><rect x="92.5425%" y="453" width="1.0337%" height="15" fill="rgb(233,39,42)" fg:x="3760" fg:w="42"/><text x="92.7925%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (5 samples, 0.12%)</title><rect x="93.5762%" y="485" width="0.1231%" height="15" fill="rgb(238,110,33)" fg:x="3802" fg:w="5"/><text x="93.8262%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.12%)</title><rect x="93.5762%" y="469" width="0.1231%" height="15" fill="rgb(233,195,10)" fg:x="3802" fg:w="5"/><text x="93.8262%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.12%)</title><rect x="93.5762%" y="453" width="0.1231%" height="15" fill="rgb(254,105,3)" fg:x="3802" fg:w="5"/><text x="93.8262%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.12%)</title><rect x="93.5762%" y="437" width="0.1231%" height="15" fill="rgb(221,225,9)" fg:x="3802" fg:w="5"/><text x="93.8262%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (25 samples, 0.62%)</title><rect x="93.7238%" y="453" width="0.6153%" height="15" fill="rgb(224,227,45)" fg:x="3808" fg:w="25"/><text x="93.9738%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (14 samples, 0.34%)</title><rect x="93.9946%" y="437" width="0.3446%" height="15" fill="rgb(229,198,43)" fg:x="3819" fg:w="14"/><text x="94.2446%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.34%)</title><rect x="93.9946%" y="421" width="0.3446%" height="15" fill="rgb(206,209,35)" fg:x="3819" fg:w="14"/><text x="94.2446%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (7 samples, 0.17%)</title><rect x="94.3392%" y="453" width="0.1723%" height="15" fill="rgb(245,195,53)" fg:x="3833" fg:w="7"/><text x="94.5892%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.10%)</title><rect x="94.4130%" y="437" width="0.0984%" height="15" fill="rgb(240,92,26)" fg:x="3836" fg:w="4"/><text x="94.6630%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (44 samples, 1.08%)</title><rect x="93.6992%" y="469" width="1.0829%" height="15" fill="rgb(207,40,23)" fg:x="3807" fg:w="44"/><text x="93.9492%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.27%)</title><rect x="94.5114%" y="453" width="0.2707%" height="15" fill="rgb(223,111,35)" fg:x="3840" fg:w="11"/><text x="94.7614%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.27%)</title><rect x="94.5114%" y="437" width="0.2707%" height="15" fill="rgb(229,147,28)" fg:x="3840" fg:w="11"/><text x="94.7614%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.27%)</title><rect x="94.5114%" y="421" width="0.2707%" height="15" fill="rgb(211,29,28)" fg:x="3840" fg:w="11"/><text x="94.7614%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (60 samples, 1.48%)</title><rect x="93.6992%" y="485" width="1.4767%" height="15" fill="rgb(228,72,33)" fg:x="3807" fg:w="60"/><text x="93.9492%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (16 samples, 0.39%)</title><rect x="94.7822%" y="469" width="0.3938%" height="15" fill="rgb(205,214,31)" fg:x="3851" fg:w="16"/><text x="95.0322%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (16 samples, 0.39%)</title><rect x="94.7822%" y="453" width="0.3938%" height="15" fill="rgb(224,111,15)" fg:x="3851" fg:w="16"/><text x="95.0322%" y="463.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (280 samples, 6.89%)</title><rect x="88.4568%" y="549" width="6.8915%" height="15" fill="rgb(253,21,26)" fg:x="3594" fg:w="280"/><text x="88.7068%" y="559.50">std::coll..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (131 samples, 3.22%)</title><rect x="92.1240%" y="533" width="3.2242%" height="15" fill="rgb(245,139,43)" fg:x="3743" fg:w="131"/><text x="92.3740%" y="543.50">std..</text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (131 samples, 3.22%)</title><rect x="92.1240%" y="517" width="3.2242%" height="15" fill="rgb(252,170,7)" fg:x="3743" fg:w="131"/><text x="92.3740%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (131 samples, 3.22%)</title><rect x="92.1240%" y="501" width="3.2242%" height="15" fill="rgb(231,118,14)" fg:x="3743" fg:w="131"/><text x="92.3740%" y="511.50">has..</text></g><g><title>hashbrown::raw::special_is_empty (7 samples, 0.17%)</title><rect x="95.1760%" y="485" width="0.1723%" height="15" fill="rgb(238,83,0)" fg:x="3867" fg:w="7"/><text x="95.4260%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (12 samples, 0.30%)</title><rect x="95.3483%" y="517" width="0.2953%" height="15" fill="rgb(221,39,39)" fg:x="3874" fg:w="12"/><text x="95.5983%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (12 samples, 0.30%)</title><rect x="95.3483%" y="501" width="0.2953%" height="15" fill="rgb(222,119,46)" fg:x="3874" fg:w="12"/><text x="95.5983%" y="511.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (5 samples, 0.12%)</title><rect x="95.6436%" y="389" width="0.1231%" height="15" fill="rgb(222,165,49)" fg:x="3886" fg:w="5"/><text x="95.8936%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (11 samples, 0.27%)</title><rect x="95.7667%" y="389" width="0.2707%" height="15" fill="rgb(219,113,52)" fg:x="3891" fg:w="11"/><text x="96.0167%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.62%)</title><rect x="95.6436%" y="517" width="0.6153%" height="15" fill="rgb(214,7,15)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25 samples, 0.62%)</title><rect x="95.6436%" y="501" width="0.6153%" height="15" fill="rgb(235,32,4)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.62%)</title><rect x="95.6436%" y="485" width="0.6153%" height="15" fill="rgb(238,90,54)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="495.50"></text></g><g><title>&lt;entity_centered::vector::VectorInt3d as core::hash::Hash&gt;::hash (25 samples, 0.62%)</title><rect x="95.6436%" y="469" width="0.6153%" height="15" fill="rgb(213,208,19)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (25 samples, 0.62%)</title><rect x="95.6436%" y="453" width="0.6153%" height="15" fill="rgb(233,156,4)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="463.50"></text></g><g><title>core::hash::Hasher::write_i32 (25 samples, 0.62%)</title><rect x="95.6436%" y="437" width="0.6153%" height="15" fill="rgb(207,194,5)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="447.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (25 samples, 0.62%)</title><rect x="95.6436%" y="421" width="0.6153%" height="15" fill="rgb(206,111,30)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="431.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (25 samples, 0.62%)</title><rect x="95.6436%" y="405" width="0.6153%" height="15" fill="rgb(243,70,54)" fg:x="3886" fg:w="25"/><text x="95.8936%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (9 samples, 0.22%)</title><rect x="96.0374%" y="389" width="0.2215%" height="15" fill="rgb(242,28,8)" fg:x="3902" fg:w="9"/><text x="96.2874%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="96.6035%" y="485" width="0.1723%" height="15" fill="rgb(219,106,18)" fg:x="3925" fg:w="7"/><text x="96.8535%" y="495.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.17%)</title><rect x="96.6035%" y="469" width="0.1723%" height="15" fill="rgb(244,222,10)" fg:x="3925" fg:w="7"/><text x="96.8535%" y="479.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::new (1 samples, 0.02%)</title><rect x="96.7512%" y="453" width="0.0246%" height="15" fill="rgb(236,179,52)" fg:x="3931" fg:w="1"/><text x="97.0012%" y="463.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (4 samples, 0.10%)</title><rect x="96.7758%" y="485" width="0.0984%" height="15" fill="rgb(213,23,39)" fg:x="3932" fg:w="4"/><text x="97.0258%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.17%)</title><rect x="96.8742%" y="485" width="0.1723%" height="15" fill="rgb(238,48,10)" fg:x="3936" fg:w="7"/><text x="97.1242%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::_{{closure}} (7 samples, 0.17%)</title><rect x="96.8742%" y="469" width="0.1723%" height="15" fill="rgb(251,196,23)" fg:x="3936" fg:w="7"/><text x="97.1242%" y="479.50"></text></g><g><title>&lt;entity_centered::vector::VectorInt3d as core::cmp::PartialEq&gt;::eq (7 samples, 0.17%)</title><rect x="96.8742%" y="453" width="0.1723%" height="15" fill="rgb(250,152,24)" fg:x="3936" fg:w="7"/><text x="97.1242%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (25 samples, 0.62%)</title><rect x="97.0465%" y="485" width="0.6153%" height="15" fill="rgb(209,150,17)" fg:x="3943" fg:w="25"/><text x="97.2965%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.12%)</title><rect x="97.6618%" y="485" width="0.1231%" height="15" fill="rgb(234,202,34)" fg:x="3968" fg:w="5"/><text x="97.9118%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.12%)</title><rect x="97.6618%" y="469" width="0.1231%" height="15" fill="rgb(253,148,53)" fg:x="3968" fg:w="5"/><text x="97.9118%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="97.6618%" y="453" width="0.1231%" height="15" fill="rgb(218,129,16)" fg:x="3968" fg:w="5"/><text x="97.9118%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.39%)</title><rect x="97.7849%" y="485" width="0.3938%" height="15" fill="rgb(216,85,19)" fg:x="3973" fg:w="16"/><text x="98.0349%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.39%)</title><rect x="97.7849%" y="469" width="0.3938%" height="15" fill="rgb(235,228,7)" fg:x="3973" fg:w="16"/><text x="98.0349%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (126 samples, 3.10%)</title><rect x="95.3483%" y="549" width="3.1012%" height="15" fill="rgb(245,175,0)" fg:x="3874" fg:w="126"/><text x="95.5983%" y="559.50">std..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (126 samples, 3.10%)</title><rect x="95.3483%" y="533" width="3.1012%" height="15" fill="rgb(208,168,36)" fg:x="3874" fg:w="126"/><text x="95.5983%" y="543.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (89 samples, 2.19%)</title><rect x="96.2589%" y="517" width="2.1905%" height="15" fill="rgb(246,171,24)" fg:x="3911" fg:w="89"/><text x="96.5089%" y="527.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (77 samples, 1.90%)</title><rect x="96.5543%" y="501" width="1.8952%" height="15" fill="rgb(215,142,24)" fg:x="3923" fg:w="77"/><text x="96.8043%" y="511.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (11 samples, 0.27%)</title><rect x="98.1787%" y="485" width="0.2707%" height="15" fill="rgb(250,187,7)" fg:x="3989" fg:w="11"/><text x="98.4287%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.27%)</title><rect x="98.1787%" y="469" width="0.2707%" height="15" fill="rgb(228,66,33)" fg:x="3989" fg:w="11"/><text x="98.4287%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.27%)</title><rect x="98.1787%" y="453" width="0.2707%" height="15" fill="rgb(234,215,21)" fg:x="3989" fg:w="11"/><text x="98.4287%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.05%)</title><rect x="98.4494%" y="421" width="0.0492%" height="15" fill="rgb(222,191,20)" fg:x="4000" fg:w="2"/><text x="98.6994%" y="431.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.05%)</title><rect x="98.4494%" y="405" width="0.0492%" height="15" fill="rgb(245,79,54)" fg:x="4000" fg:w="2"/><text x="98.6994%" y="415.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.05%)</title><rect x="98.4494%" y="389" width="0.0492%" height="15" fill="rgb(240,10,37)" fg:x="4000" fg:w="2"/><text x="98.6994%" y="399.50"></text></g><g><title>entity_centered::simulation::simulation (3,754 samples, 92.39%)</title><rect x="6.1531%" y="581" width="92.3948%" height="15" fill="rgb(214,192,32)" fg:x="250" fg:w="3754"/><text x="6.4031%" y="591.50">entity_centered::simulation::simulation</text></g><g><title>entity_centered::simulation::group (2,042 samples, 50.26%)</title><rect x="48.2894%" y="565" width="50.2584%" height="15" fill="rgb(209,36,54)" fg:x="1962" fg:w="2042"/><text x="48.5394%" y="575.50">entity_centered::simulation::group</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::reserve (4 samples, 0.10%)</title><rect x="98.4494%" y="549" width="0.0984%" height="15" fill="rgb(220,10,11)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.10%)</title><rect x="98.4494%" y="533" width="0.0984%" height="15" fill="rgb(221,106,17)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.10%)</title><rect x="98.4494%" y="517" width="0.0984%" height="15" fill="rgb(251,142,44)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.10%)</title><rect x="98.4494%" y="501" width="0.0984%" height="15" fill="rgb(238,13,15)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.10%)</title><rect x="98.4494%" y="485" width="0.0984%" height="15" fill="rgb(208,107,27)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.10%)</title><rect x="98.4494%" y="469" width="0.0984%" height="15" fill="rgb(205,136,37)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (4 samples, 0.10%)</title><rect x="98.4494%" y="453" width="0.0984%" height="15" fill="rgb(250,205,27)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (4 samples, 0.10%)</title><rect x="98.4494%" y="437" width="0.0984%" height="15" fill="rgb(210,80,43)" fg:x="4000" fg:w="4"/><text x="98.6994%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.05%)</title><rect x="98.4986%" y="421" width="0.0492%" height="15" fill="rgb(247,160,36)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="431.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="405" width="0.0492%" height="15" fill="rgb(234,13,49)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="98.4986%" y="389" width="0.0492%" height="15" fill="rgb(234,122,0)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="98.4986%" y="373" width="0.0492%" height="15" fill="rgb(207,146,38)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="357" width="0.0492%" height="15" fill="rgb(207,177,25)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="367.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="341" width="0.0492%" height="15" fill="rgb(211,178,42)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="351.50"></text></g><g><title>&lt;mimalloc::MiMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="325" width="0.0492%" height="15" fill="rgb(230,69,54)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="335.50"></text></g><g><title>mi_heap_malloc_zero_aligned_at_fallback (2 samples, 0.05%)</title><rect x="98.4986%" y="309" width="0.0492%" height="15" fill="rgb(214,135,41)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="319.50"></text></g><g><title>_mi_heap_malloc_zero (2 samples, 0.05%)</title><rect x="98.4986%" y="293" width="0.0492%" height="15" fill="rgb(237,67,25)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="303.50"></text></g><g><title>_mi_heap_malloc_zero_ex (2 samples, 0.05%)</title><rect x="98.4986%" y="277" width="0.0492%" height="15" fill="rgb(222,189,50)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="287.50"></text></g><g><title>_mi_malloc_generic (2 samples, 0.05%)</title><rect x="98.4986%" y="261" width="0.0492%" height="15" fill="rgb(245,148,34)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="271.50"></text></g><g><title>mi_find_page (2 samples, 0.05%)</title><rect x="98.4986%" y="245" width="0.0492%" height="15" fill="rgb(222,29,6)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="255.50"></text></g><g><title>mi_large_huge_page_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="229" width="0.0492%" height="15" fill="rgb(221,189,43)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="239.50"></text></g><g><title>mi_page_fresh_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="213" width="0.0492%" height="15" fill="rgb(207,36,27)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="223.50"></text></g><g><title>_mi_segment_page_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="197" width="0.0492%" height="15" fill="rgb(217,90,24)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="207.50"></text></g><g><title>_mi_segment_page_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="181" width="0.0492%" height="15" fill="rgb(224,66,35)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="191.50"></text></g><g><title>mi_segments_page_alloc (2 samples, 0.05%)</title><rect x="98.4986%" y="165" width="0.0492%" height="15" fill="rgb(221,13,50)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="175.50"></text></g><g><title>mi_segments_page_find_and_allocate (2 samples, 0.05%)</title><rect x="98.4986%" y="149" width="0.0492%" height="15" fill="rgb(236,68,49)" fg:x="4002" fg:w="2"/><text x="98.7486%" y="159.50"></text></g><g><title>mi_segment_span_allocate (1 samples, 0.02%)</title><rect x="98.5233%" y="133" width="0.0246%" height="15" fill="rgb(229,146,28)" fg:x="4003" fg:w="1"/><text x="98.7733%" y="143.50"></text></g><g><title>mi_segment_ensure_committed (1 samples, 0.02%)</title><rect x="98.5233%" y="117" width="0.0246%" height="15" fill="rgb(225,31,38)" fg:x="4003" fg:w="1"/><text x="98.7733%" y="127.50"></text></g><g><title>mi_segment_commit (1 samples, 0.02%)</title><rect x="98.5233%" y="101" width="0.0246%" height="15" fill="rgb(250,208,3)" fg:x="4003" fg:w="1"/><text x="98.7733%" y="111.50"></text></g><g><title>_mi_prim_clock_now (1 samples, 0.02%)</title><rect x="98.5233%" y="85" width="0.0246%" height="15" fill="rgb(246,54,23)" fg:x="4003" fg:w="1"/><text x="98.7733%" y="95.50"></text></g><g><title>clock_gettime@@GLIBC_2.17 (1 samples, 0.02%)</title><rect x="98.5233%" y="69" width="0.0246%" height="15" fill="rgb(243,76,11)" fg:x="4003" fg:w="1"/><text x="98.7733%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::_{{closure}} (2 samples, 0.05%)</title><rect x="98.5479%" y="293" width="0.0492%" height="15" fill="rgb(245,21,50)" fg:x="4004" fg:w="2"/><text x="98.7979%" y="303.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry::_{{closure}}::_{{closure}} (2 samples, 0.05%)</title><rect x="98.5479%" y="277" width="0.0492%" height="15" fill="rgb(228,9,43)" fg:x="4004" fg:w="2"/><text x="98.7979%" y="287.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry (3 samples, 0.07%)</title><rect x="98.5479%" y="581" width="0.0738%" height="15" fill="rgb(208,100,47)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.07%)</title><rect x="98.5479%" y="565" width="0.0738%" height="15" fill="rgb(232,26,8)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.5479%" y="549" width="0.0738%" height="15" fill="rgb(216,166,38)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.5479%" y="533" width="0.0738%" height="15" fill="rgb(251,202,51)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="98.5479%" y="517" width="0.0738%" height="15" fill="rgb(254,216,34)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.07%)</title><rect x="98.5479%" y="501" width="0.0738%" height="15" fill="rgb(251,32,27)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (3 samples, 0.07%)</title><rect x="98.5479%" y="485" width="0.0738%" height="15" fill="rgb(208,127,28)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.07%)</title><rect x="98.5479%" y="469" width="0.0738%" height="15" fill="rgb(224,137,22)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.07%)</title><rect x="98.5479%" y="453" width="0.0738%" height="15" fill="rgb(254,70,32)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.07%)</title><rect x="98.5479%" y="437" width="0.0738%" height="15" fill="rgb(229,75,37)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="447.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.07%)</title><rect x="98.5479%" y="421" width="0.0738%" height="15" fill="rgb(252,64,23)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="431.50"></text></g><g><title>entity_centered::value_board::ValueBoard::add_entry::_{{closure}} (3 samples, 0.07%)</title><rect x="98.5479%" y="405" width="0.0738%" height="15" fill="rgb(232,162,48)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (3 samples, 0.07%)</title><rect x="98.5479%" y="389" width="0.0738%" height="15" fill="rgb(246,160,12)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (3 samples, 0.07%)</title><rect x="98.5479%" y="373" width="0.0738%" height="15" fill="rgb(247,166,0)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (3 samples, 0.07%)</title><rect x="98.5479%" y="357" width="0.0738%" height="15" fill="rgb(249,219,21)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.07%)</title><rect x="98.5479%" y="341" width="0.0738%" height="15" fill="rgb(205,209,3)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.07%)</title><rect x="98.5479%" y="325" width="0.0738%" height="15" fill="rgb(243,44,1)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.07%)</title><rect x="98.5479%" y="309" width="0.0738%" height="15" fill="rgb(206,159,16)" fg:x="4004" fg:w="3"/><text x="98.7979%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (1 samples, 0.02%)</title><rect x="98.5971%" y="293" width="0.0246%" height="15" fill="rgb(244,77,30)" fg:x="4006" fg:w="1"/><text x="98.8471%" y="303.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (1 samples, 0.02%)</title><rect x="98.6217%" y="581" width="0.0246%" height="15" fill="rgb(218,69,12)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="591.50"></text></g><g><title>indicatif::state::AtomicPosition::allow (1 samples, 0.02%)</title><rect x="98.6217%" y="565" width="0.0246%" height="15" fill="rgb(212,87,7)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="98.6217%" y="549" width="0.0246%" height="15" fill="rgb(245,114,25)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.02%)</title><rect x="98.6217%" y="533" width="0.0246%" height="15" fill="rgb(210,61,42)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.02%)</title><rect x="98.6217%" y="517" width="0.0246%" height="15" fill="rgb(211,52,33)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="527.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (1 samples, 0.02%)</title><rect x="98.6217%" y="501" width="0.0246%" height="15" fill="rgb(234,58,33)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="511.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (1 samples, 0.02%)</title><rect x="98.6217%" y="485" width="0.0246%" height="15" fill="rgb(220,115,36)" fg:x="4007" fg:w="1"/><text x="98.8717%" y="495.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (1 samples, 0.02%)</title><rect x="98.6463%" y="517" width="0.0246%" height="15" fill="rgb(243,153,54)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="527.50"></text></g><g><title>console::term::Term::size (1 samples, 0.02%)</title><rect x="98.6463%" y="501" width="0.0246%" height="15" fill="rgb(251,47,18)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="511.50"></text></g><g><title>console::term::Term::size_checked (1 samples, 0.02%)</title><rect x="98.6463%" y="485" width="0.0246%" height="15" fill="rgb(242,102,42)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="495.50"></text></g><g><title>console::unix_term::terminal_size (1 samples, 0.02%)</title><rect x="98.6463%" y="469" width="0.0246%" height="15" fill="rgb(234,31,38)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="479.50"></text></g><g><title>__isatty (1 samples, 0.02%)</title><rect x="98.6463%" y="453" width="0.0246%" height="15" fill="rgb(221,117,51)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="463.50"></text></g><g><title>__GI___tcgetattr (1 samples, 0.02%)</title><rect x="98.6463%" y="437" width="0.0246%" height="15" fill="rgb(212,20,18)" fg:x="4008" fg:w="1"/><text x="98.8963%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6709%" y="485" width="0.0246%" height="15" fill="rgb(245,133,36)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="495.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="98.6709%" y="469" width="0.0246%" height="15" fill="rgb(212,6,19)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="479.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.02%)</title><rect x="98.6709%" y="453" width="0.0246%" height="15" fill="rgb(218,1,36)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="463.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::get_end (1 samples, 0.02%)</title><rect x="98.6709%" y="437" width="0.0246%" height="15" fill="rgb(246,84,54)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="98.6709%" y="421" width="0.0246%" height="15" fill="rgb(242,110,6)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="98.6709%" y="405" width="0.0246%" height="15" fill="rgb(214,47,5)" fg:x="4009" fg:w="1"/><text x="98.9209%" y="415.50"></text></g><g><title>indicatif::state::BarState::draw (3 samples, 0.07%)</title><rect x="98.6463%" y="533" width="0.0738%" height="15" fill="rgb(218,159,25)" fg:x="4008" fg:w="3"/><text x="98.8963%" y="543.50"></text></g><g><title>indicatif::style::ProgressStyle::format_state (2 samples, 0.05%)</title><rect x="98.6709%" y="517" width="0.0492%" height="15" fill="rgb(215,211,28)" fg:x="4009" fg:w="2"/><text x="98.9209%" y="527.50"></text></g><g><title>indicatif::style::ProgressStyle::push_line (2 samples, 0.05%)</title><rect x="98.6709%" y="501" width="0.0492%" height="15" fill="rgb(238,59,32)" fg:x="4009" fg:w="2"/><text x="98.9209%" y="511.50"></text></g><g><title>indicatif::style::WideElement::expand (1 samples, 0.02%)</title><rect x="98.6955%" y="485" width="0.0246%" height="15" fill="rgb(226,82,3)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="495.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.02%)</title><rect x="98.6955%" y="469" width="0.0246%" height="15" fill="rgb(240,164,32)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (1 samples, 0.02%)</title><rect x="98.6955%" y="453" width="0.0246%" height="15" fill="rgb(232,46,7)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="463.50"></text></g><g><title>alloc::fmt::format::_{{closure}} (1 samples, 0.02%)</title><rect x="98.6955%" y="437" width="0.0246%" height="15" fill="rgb(229,129,53)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="98.6955%" y="421" width="0.0246%" height="15" fill="rgb(234,188,29)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.02%)</title><rect x="98.6955%" y="405" width="0.0246%" height="15" fill="rgb(246,141,4)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.02%)</title><rect x="98.6955%" y="389" width="0.0246%" height="15" fill="rgb(229,23,39)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="98.6955%" y="373" width="0.0246%" height="15" fill="rgb(206,12,3)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.02%)</title><rect x="98.6955%" y="357" width="0.0246%" height="15" fill="rgb(252,226,20)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="367.50"></text></g><g><title>&lt;indicatif::style::BarDisplay as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="98.6955%" y="341" width="0.0246%" height="15" fill="rgb(216,123,35)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="98.6955%" y="325" width="0.0246%" height="15" fill="rgb(212,68,40)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.02%)</title><rect x="98.6955%" y="309" width="0.0246%" height="15" fill="rgb(254,125,32)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="98.6955%" y="293" width="0.0246%" height="15" fill="rgb(253,97,22)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="98.6955%" y="277" width="0.0246%" height="15" fill="rgb(241,101,14)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="98.6955%" y="261" width="0.0246%" height="15" fill="rgb(238,103,29)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="98.6955%" y="245" width="0.0246%" height="15" fill="rgb(233,195,47)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="98.6955%" y="229" width="0.0246%" height="15" fill="rgb(246,218,30)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="98.6955%" y="213" width="0.0246%" height="15" fill="rgb(219,145,47)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="98.6955%" y="197" width="0.0246%" height="15" fill="rgb(243,12,26)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="98.6955%" y="181" width="0.0246%" height="15" fill="rgb(214,87,16)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="98.6955%" y="165" width="0.0246%" height="15" fill="rgb(208,99,42)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="98.6955%" y="149" width="0.0246%" height="15" fill="rgb(253,99,2)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="98.6955%" y="133" width="0.0246%" height="15" fill="rgb(220,168,23)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="143.50"></text></g><g><title>mi_heap_realloc_aligned (1 samples, 0.02%)</title><rect x="98.6955%" y="117" width="0.0246%" height="15" fill="rgb(242,38,24)" fg:x="4010" fg:w="1"/><text x="98.9455%" y="127.50"></text></g><g><title>__libc_start_main@@GLIBC_2.34 (3,808 samples, 93.72%)</title><rect x="5.0701%" y="853" width="93.7238%" height="15" fill="rgb(225,182,9)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="863.50">__libc_start_main@@GLIBC_2.34</text></g><g><title>__libc_start_call_main (3,808 samples, 93.72%)</title><rect x="5.0701%" y="837" width="93.7238%" height="15" fill="rgb(243,178,37)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="847.50">__libc_start_call_main</text></g><g><title>main (3,808 samples, 93.72%)</title><rect x="5.0701%" y="821" width="93.7238%" height="15" fill="rgb(232,139,19)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (3,808 samples, 93.72%)</title><rect x="5.0701%" y="805" width="93.7238%" height="15" fill="rgb(225,201,24)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,808 samples, 93.72%)</title><rect x="5.0701%" y="789" width="93.7238%" height="15" fill="rgb(221,47,46)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,808 samples, 93.72%)</title><rect x="5.0701%" y="773" width="93.7238%" height="15" fill="rgb(249,23,13)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,808 samples, 93.72%)</title><rect x="5.0701%" y="757" width="93.7238%" height="15" fill="rgb(219,9,5)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,808 samples, 93.72%)</title><rect x="5.0701%" y="741" width="93.7238%" height="15" fill="rgb(254,171,16)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="751.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (3,808 samples, 93.72%)</title><rect x="5.0701%" y="725" width="93.7238%" height="15" fill="rgb(230,171,20)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,808 samples, 93.72%)</title><rect x="5.0701%" y="709" width="93.7238%" height="15" fill="rgb(210,71,41)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,808 samples, 93.72%)</title><rect x="5.0701%" y="693" width="93.7238%" height="15" fill="rgb(206,173,20)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,808 samples, 93.72%)</title><rect x="5.0701%" y="677" width="93.7238%" height="15" fill="rgb(233,88,34)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,808 samples, 93.72%)</title><rect x="5.0701%" y="661" width="93.7238%" height="15" fill="rgb(223,209,46)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="671.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,808 samples, 93.72%)</title><rect x="5.0701%" y="645" width="93.7238%" height="15" fill="rgb(250,43,18)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,808 samples, 93.72%)</title><rect x="5.0701%" y="629" width="93.7238%" height="15" fill="rgb(208,13,10)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>entity_centered::main (3,808 samples, 93.72%)</title><rect x="5.0701%" y="613" width="93.7238%" height="15" fill="rgb(212,200,36)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="623.50">entity_centered::main</text></g><g><title>entity_centered::simulation::run (3,808 samples, 93.72%)</title><rect x="5.0701%" y="597" width="93.7238%" height="15" fill="rgb(225,90,30)" fg:x="206" fg:w="3808"/><text x="5.3201%" y="607.50">entity_centered::simulation::run</text></g><g><title>indicatif::progress_bar::ProgressBar::tick_inner (6 samples, 0.15%)</title><rect x="98.6463%" y="581" width="0.1477%" height="15" fill="rgb(236,182,39)" fg:x="4008" fg:w="6"/><text x="98.8963%" y="591.50"></text></g><g><title>indicatif::state::BarState::tick (6 samples, 0.15%)</title><rect x="98.6463%" y="565" width="0.1477%" height="15" fill="rgb(212,144,35)" fg:x="4008" fg:w="6"/><text x="98.8963%" y="575.50"></text></g><g><title>indicatif::state::BarState::update_estimate_and_draw (6 samples, 0.15%)</title><rect x="98.6463%" y="549" width="0.1477%" height="15" fill="rgb(228,63,44)" fg:x="4008" fg:w="6"/><text x="98.8963%" y="559.50"></text></g><g><title>indicatif::state::Estimator::record (3 samples, 0.07%)</title><rect x="98.7202%" y="533" width="0.0738%" height="15" fill="rgb(228,109,6)" fg:x="4011" fg:w="3"/><text x="98.9702%" y="543.50"></text></g><g><title>indicatif::state::estimator_weight (3 samples, 0.07%)</title><rect x="98.7202%" y="517" width="0.0738%" height="15" fill="rgb(238,117,24)" fg:x="4011" fg:w="3"/><text x="98.9702%" y="527.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (3 samples, 0.07%)</title><rect x="98.7202%" y="501" width="0.0738%" height="15" fill="rgb(242,26,26)" fg:x="4011" fg:w="3"/><text x="98.9702%" y="511.50"></text></g><g><title>pow@@GLIBC_2.29 (3 samples, 0.07%)</title><rect x="98.7202%" y="485" width="0.0738%" height="15" fill="rgb(221,92,48)" fg:x="4011" fg:w="3"/><text x="98.9702%" y="495.50"></text></g><g><title>__ieee754_pow_fma (2 samples, 0.05%)</title><rect x="98.7448%" y="469" width="0.0492%" height="15" fill="rgb(209,209,32)" fg:x="4012" fg:w="2"/><text x="98.9948%" y="479.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.02%)</title><rect x="98.7940%" y="821" width="0.0246%" height="15" fill="rgb(221,70,22)" fg:x="4014" fg:w="1"/><text x="99.0440%" y="831.50"></text></g><g><title>_start (3,815 samples, 93.90%)</title><rect x="4.9471%" y="869" width="93.8961%" height="15" fill="rgb(248,145,5)" fg:x="201" fg:w="3815"/><text x="5.1971%" y="879.50">_start</text></g><g><title>_dl_start (2 samples, 0.05%)</title><rect x="98.7940%" y="853" width="0.0492%" height="15" fill="rgb(226,116,26)" fg:x="4014" fg:w="2"/><text x="99.0440%" y="863.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.05%)</title><rect x="98.7940%" y="837" width="0.0492%" height="15" fill="rgb(244,5,17)" fg:x="4014" fg:w="2"/><text x="99.0440%" y="847.50"></text></g><g><title>dl_main (1 samples, 0.02%)</title><rect x="98.8186%" y="821" width="0.0246%" height="15" fill="rgb(252,159,33)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="831.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.02%)</title><rect x="98.8186%" y="805" width="0.0246%" height="15" fill="rgb(206,71,0)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="815.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.02%)</title><rect x="98.8186%" y="789" width="0.0246%" height="15" fill="rgb(233,118,54)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="799.50"></text></g><g><title>openaux (1 samples, 0.02%)</title><rect x="98.8186%" y="773" width="0.0246%" height="15" fill="rgb(234,83,48)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="783.50"></text></g><g><title>_dl_map_object (1 samples, 0.02%)</title><rect x="98.8186%" y="757" width="0.0246%" height="15" fill="rgb(228,3,54)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="767.50"></text></g><g><title>open_path (1 samples, 0.02%)</title><rect x="98.8186%" y="741" width="0.0246%" height="15" fill="rgb(226,155,13)" fg:x="4015" fg:w="1"/><text x="99.0686%" y="751.50"></text></g><g><title>all (4,063 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(241,28,37)" fg:x="0" fg:w="4063"/><text x="0.2500%" y="911.50"></text></g><g><title>entity_centered (4,063 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(233,93,10)" fg:x="0" fg:w="4063"/><text x="0.2500%" y="895.50">entity_centered</text></g><g><title>entity_centered::reaction_registry::ReactionRegistry::decide_collision (47 samples, 1.16%)</title><rect x="98.8432%" y="869" width="1.1568%" height="15" fill="rgb(225,113,19)" fg:x="4016" fg:w="47"/><text x="99.0932%" y="879.50"></text></g></svg></svg>